
ADC2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000027ba  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  000027ba  0000282e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001ca4  00000000  00000000  00002838  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000be1  00000000  00000000  000044dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000160  00000000  00000000  000050bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000018f  00000000  00000000  0000521d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002045  00000000  00000000  000053ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001101  00000000  00000000  000073f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f82  00000000  00000000  000084f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  00009474  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c2  00000000  00000000  000095f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000088e  00000000  00000000  000098b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000a144  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea eb       	ldi	r30, 0xBA	; 186
      68:	f7 e2       	ldi	r31, 0x27	; 39
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 36       	cpi	r26, 0x68	; 104
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 47 06 	call	0xc8e	; 0xc8e <main>
      7a:	0c 94 db 13 	jmp	0x27b6	; 0x27b6 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 a4 13 	jmp	0x2748	; 0x2748 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 c0 13 	jmp	0x2780	; 0x2780 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 b0 13 	jmp	0x2760	; 0x2760 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 cc 13 	jmp	0x2798	; 0x2798 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 b0 13 	jmp	0x2760	; 0x2760 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 cc 13 	jmp	0x2798	; 0x2798 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 a4 13 	jmp	0x2748	; 0x2748 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 c0 13 	jmp	0x2780	; 0x2780 <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 ac 13 	jmp	0x2758	; 0x2758 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	60 e6       	ldi	r22, 0x60	; 96
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 c8 13 	jmp	0x2790	; 0x2790 <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 b0 13 	jmp	0x2760	; 0x2760 <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 cc 13 	jmp	0x2798	; 0x2798 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 b0 13 	jmp	0x2760	; 0x2760 <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 cc 13 	jmp	0x2798	; 0x2798 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 b0 13 	jmp	0x2760	; 0x2760 <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 cc 13 	jmp	0x2798	; 0x2798 <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 b4 13 	jmp	0x2768	; 0x2768 <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 d0 13 	jmp	0x27a0	; 0x27a0 <__epilogue_restores__+0x20>

00000942 <__pack_f>:
     942:	df 92       	push	r13
     944:	ef 92       	push	r14
     946:	ff 92       	push	r15
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
     94c:	fc 01       	movw	r30, r24
     94e:	e4 80       	ldd	r14, Z+4	; 0x04
     950:	f5 80       	ldd	r15, Z+5	; 0x05
     952:	06 81       	ldd	r16, Z+6	; 0x06
     954:	17 81       	ldd	r17, Z+7	; 0x07
     956:	d1 80       	ldd	r13, Z+1	; 0x01
     958:	80 81       	ld	r24, Z
     95a:	82 30       	cpi	r24, 0x02	; 2
     95c:	48 f4       	brcc	.+18     	; 0x970 <__pack_f+0x2e>
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	a0 e1       	ldi	r26, 0x10	; 16
     964:	b0 e0       	ldi	r27, 0x00	; 0
     966:	e8 2a       	or	r14, r24
     968:	f9 2a       	or	r15, r25
     96a:	0a 2b       	or	r16, r26
     96c:	1b 2b       	or	r17, r27
     96e:	a5 c0       	rjmp	.+330    	; 0xaba <__pack_f+0x178>
     970:	84 30       	cpi	r24, 0x04	; 4
     972:	09 f4       	brne	.+2      	; 0x976 <__pack_f+0x34>
     974:	9f c0       	rjmp	.+318    	; 0xab4 <__pack_f+0x172>
     976:	82 30       	cpi	r24, 0x02	; 2
     978:	21 f4       	brne	.+8      	; 0x982 <__pack_f+0x40>
     97a:	ee 24       	eor	r14, r14
     97c:	ff 24       	eor	r15, r15
     97e:	87 01       	movw	r16, r14
     980:	05 c0       	rjmp	.+10     	; 0x98c <__pack_f+0x4a>
     982:	e1 14       	cp	r14, r1
     984:	f1 04       	cpc	r15, r1
     986:	01 05       	cpc	r16, r1
     988:	11 05       	cpc	r17, r1
     98a:	19 f4       	brne	.+6      	; 0x992 <__pack_f+0x50>
     98c:	e0 e0       	ldi	r30, 0x00	; 0
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	96 c0       	rjmp	.+300    	; 0xabe <__pack_f+0x17c>
     992:	62 81       	ldd	r22, Z+2	; 0x02
     994:	73 81       	ldd	r23, Z+3	; 0x03
     996:	9f ef       	ldi	r25, 0xFF	; 255
     998:	62 38       	cpi	r22, 0x82	; 130
     99a:	79 07       	cpc	r23, r25
     99c:	0c f0       	brlt	.+2      	; 0x9a0 <__pack_f+0x5e>
     99e:	5b c0       	rjmp	.+182    	; 0xa56 <__pack_f+0x114>
     9a0:	22 e8       	ldi	r18, 0x82	; 130
     9a2:	3f ef       	ldi	r19, 0xFF	; 255
     9a4:	26 1b       	sub	r18, r22
     9a6:	37 0b       	sbc	r19, r23
     9a8:	2a 31       	cpi	r18, 0x1A	; 26
     9aa:	31 05       	cpc	r19, r1
     9ac:	2c f0       	brlt	.+10     	; 0x9b8 <__pack_f+0x76>
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	40 e0       	ldi	r20, 0x00	; 0
     9b4:	50 e0       	ldi	r21, 0x00	; 0
     9b6:	2a c0       	rjmp	.+84     	; 0xa0c <__pack_f+0xca>
     9b8:	b8 01       	movw	r22, r16
     9ba:	a7 01       	movw	r20, r14
     9bc:	02 2e       	mov	r0, r18
     9be:	04 c0       	rjmp	.+8      	; 0x9c8 <__pack_f+0x86>
     9c0:	76 95       	lsr	r23
     9c2:	67 95       	ror	r22
     9c4:	57 95       	ror	r21
     9c6:	47 95       	ror	r20
     9c8:	0a 94       	dec	r0
     9ca:	d2 f7       	brpl	.-12     	; 0x9c0 <__pack_f+0x7e>
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	a0 e0       	ldi	r26, 0x00	; 0
     9d2:	b0 e0       	ldi	r27, 0x00	; 0
     9d4:	04 c0       	rjmp	.+8      	; 0x9de <__pack_f+0x9c>
     9d6:	88 0f       	add	r24, r24
     9d8:	99 1f       	adc	r25, r25
     9da:	aa 1f       	adc	r26, r26
     9dc:	bb 1f       	adc	r27, r27
     9de:	2a 95       	dec	r18
     9e0:	d2 f7       	brpl	.-12     	; 0x9d6 <__pack_f+0x94>
     9e2:	01 97       	sbiw	r24, 0x01	; 1
     9e4:	a1 09       	sbc	r26, r1
     9e6:	b1 09       	sbc	r27, r1
     9e8:	8e 21       	and	r24, r14
     9ea:	9f 21       	and	r25, r15
     9ec:	a0 23       	and	r26, r16
     9ee:	b1 23       	and	r27, r17
     9f0:	00 97       	sbiw	r24, 0x00	; 0
     9f2:	a1 05       	cpc	r26, r1
     9f4:	b1 05       	cpc	r27, r1
     9f6:	21 f0       	breq	.+8      	; 0xa00 <__pack_f+0xbe>
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	a0 e0       	ldi	r26, 0x00	; 0
     9fe:	b0 e0       	ldi	r27, 0x00	; 0
     a00:	9a 01       	movw	r18, r20
     a02:	ab 01       	movw	r20, r22
     a04:	28 2b       	or	r18, r24
     a06:	39 2b       	or	r19, r25
     a08:	4a 2b       	or	r20, r26
     a0a:	5b 2b       	or	r21, r27
     a0c:	da 01       	movw	r26, r20
     a0e:	c9 01       	movw	r24, r18
     a10:	8f 77       	andi	r24, 0x7F	; 127
     a12:	90 70       	andi	r25, 0x00	; 0
     a14:	a0 70       	andi	r26, 0x00	; 0
     a16:	b0 70       	andi	r27, 0x00	; 0
     a18:	80 34       	cpi	r24, 0x40	; 64
     a1a:	91 05       	cpc	r25, r1
     a1c:	a1 05       	cpc	r26, r1
     a1e:	b1 05       	cpc	r27, r1
     a20:	39 f4       	brne	.+14     	; 0xa30 <__pack_f+0xee>
     a22:	27 ff       	sbrs	r18, 7
     a24:	09 c0       	rjmp	.+18     	; 0xa38 <__pack_f+0xf6>
     a26:	20 5c       	subi	r18, 0xC0	; 192
     a28:	3f 4f       	sbci	r19, 0xFF	; 255
     a2a:	4f 4f       	sbci	r20, 0xFF	; 255
     a2c:	5f 4f       	sbci	r21, 0xFF	; 255
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <__pack_f+0xf6>
     a30:	21 5c       	subi	r18, 0xC1	; 193
     a32:	3f 4f       	sbci	r19, 0xFF	; 255
     a34:	4f 4f       	sbci	r20, 0xFF	; 255
     a36:	5f 4f       	sbci	r21, 0xFF	; 255
     a38:	e0 e0       	ldi	r30, 0x00	; 0
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	20 30       	cpi	r18, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	3a 07       	cpc	r19, r26
     a42:	a0 e0       	ldi	r26, 0x00	; 0
     a44:	4a 07       	cpc	r20, r26
     a46:	a0 e4       	ldi	r26, 0x40	; 64
     a48:	5a 07       	cpc	r21, r26
     a4a:	10 f0       	brcs	.+4      	; 0xa50 <__pack_f+0x10e>
     a4c:	e1 e0       	ldi	r30, 0x01	; 1
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	79 01       	movw	r14, r18
     a52:	8a 01       	movw	r16, r20
     a54:	27 c0       	rjmp	.+78     	; 0xaa4 <__pack_f+0x162>
     a56:	60 38       	cpi	r22, 0x80	; 128
     a58:	71 05       	cpc	r23, r1
     a5a:	64 f5       	brge	.+88     	; 0xab4 <__pack_f+0x172>
     a5c:	fb 01       	movw	r30, r22
     a5e:	e1 58       	subi	r30, 0x81	; 129
     a60:	ff 4f       	sbci	r31, 0xFF	; 255
     a62:	d8 01       	movw	r26, r16
     a64:	c7 01       	movw	r24, r14
     a66:	8f 77       	andi	r24, 0x7F	; 127
     a68:	90 70       	andi	r25, 0x00	; 0
     a6a:	a0 70       	andi	r26, 0x00	; 0
     a6c:	b0 70       	andi	r27, 0x00	; 0
     a6e:	80 34       	cpi	r24, 0x40	; 64
     a70:	91 05       	cpc	r25, r1
     a72:	a1 05       	cpc	r26, r1
     a74:	b1 05       	cpc	r27, r1
     a76:	39 f4       	brne	.+14     	; 0xa86 <__pack_f+0x144>
     a78:	e7 fe       	sbrs	r14, 7
     a7a:	0d c0       	rjmp	.+26     	; 0xa96 <__pack_f+0x154>
     a7c:	80 e4       	ldi	r24, 0x40	; 64
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	a0 e0       	ldi	r26, 0x00	; 0
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <__pack_f+0x14c>
     a86:	8f e3       	ldi	r24, 0x3F	; 63
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	e8 0e       	add	r14, r24
     a90:	f9 1e       	adc	r15, r25
     a92:	0a 1f       	adc	r16, r26
     a94:	1b 1f       	adc	r17, r27
     a96:	17 ff       	sbrs	r17, 7
     a98:	05 c0       	rjmp	.+10     	; 0xaa4 <__pack_f+0x162>
     a9a:	16 95       	lsr	r17
     a9c:	07 95       	ror	r16
     a9e:	f7 94       	ror	r15
     aa0:	e7 94       	ror	r14
     aa2:	31 96       	adiw	r30, 0x01	; 1
     aa4:	87 e0       	ldi	r24, 0x07	; 7
     aa6:	16 95       	lsr	r17
     aa8:	07 95       	ror	r16
     aaa:	f7 94       	ror	r15
     aac:	e7 94       	ror	r14
     aae:	8a 95       	dec	r24
     ab0:	d1 f7       	brne	.-12     	; 0xaa6 <__pack_f+0x164>
     ab2:	05 c0       	rjmp	.+10     	; 0xabe <__pack_f+0x17c>
     ab4:	ee 24       	eor	r14, r14
     ab6:	ff 24       	eor	r15, r15
     ab8:	87 01       	movw	r16, r14
     aba:	ef ef       	ldi	r30, 0xFF	; 255
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	6e 2f       	mov	r22, r30
     ac0:	67 95       	ror	r22
     ac2:	66 27       	eor	r22, r22
     ac4:	67 95       	ror	r22
     ac6:	90 2f       	mov	r25, r16
     ac8:	9f 77       	andi	r25, 0x7F	; 127
     aca:	d7 94       	ror	r13
     acc:	dd 24       	eor	r13, r13
     ace:	d7 94       	ror	r13
     ad0:	8e 2f       	mov	r24, r30
     ad2:	86 95       	lsr	r24
     ad4:	49 2f       	mov	r20, r25
     ad6:	46 2b       	or	r20, r22
     ad8:	58 2f       	mov	r21, r24
     ada:	5d 29       	or	r21, r13
     adc:	b7 01       	movw	r22, r14
     ade:	ca 01       	movw	r24, r20
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	08 95       	ret

00000aec <__unpack_f>:
     aec:	fc 01       	movw	r30, r24
     aee:	db 01       	movw	r26, r22
     af0:	40 81       	ld	r20, Z
     af2:	51 81       	ldd	r21, Z+1	; 0x01
     af4:	22 81       	ldd	r18, Z+2	; 0x02
     af6:	62 2f       	mov	r22, r18
     af8:	6f 77       	andi	r22, 0x7F	; 127
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	22 1f       	adc	r18, r18
     afe:	22 27       	eor	r18, r18
     b00:	22 1f       	adc	r18, r18
     b02:	93 81       	ldd	r25, Z+3	; 0x03
     b04:	89 2f       	mov	r24, r25
     b06:	88 0f       	add	r24, r24
     b08:	82 2b       	or	r24, r18
     b0a:	28 2f       	mov	r18, r24
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	99 1f       	adc	r25, r25
     b10:	99 27       	eor	r25, r25
     b12:	99 1f       	adc	r25, r25
     b14:	11 96       	adiw	r26, 0x01	; 1
     b16:	9c 93       	st	X, r25
     b18:	11 97       	sbiw	r26, 0x01	; 1
     b1a:	21 15       	cp	r18, r1
     b1c:	31 05       	cpc	r19, r1
     b1e:	a9 f5       	brne	.+106    	; 0xb8a <__unpack_f+0x9e>
     b20:	41 15       	cp	r20, r1
     b22:	51 05       	cpc	r21, r1
     b24:	61 05       	cpc	r22, r1
     b26:	71 05       	cpc	r23, r1
     b28:	11 f4       	brne	.+4      	; 0xb2e <__unpack_f+0x42>
     b2a:	82 e0       	ldi	r24, 0x02	; 2
     b2c:	37 c0       	rjmp	.+110    	; 0xb9c <__unpack_f+0xb0>
     b2e:	82 e8       	ldi	r24, 0x82	; 130
     b30:	9f ef       	ldi	r25, 0xFF	; 255
     b32:	13 96       	adiw	r26, 0x03	; 3
     b34:	9c 93       	st	X, r25
     b36:	8e 93       	st	-X, r24
     b38:	12 97       	sbiw	r26, 0x02	; 2
     b3a:	9a 01       	movw	r18, r20
     b3c:	ab 01       	movw	r20, r22
     b3e:	67 e0       	ldi	r22, 0x07	; 7
     b40:	22 0f       	add	r18, r18
     b42:	33 1f       	adc	r19, r19
     b44:	44 1f       	adc	r20, r20
     b46:	55 1f       	adc	r21, r21
     b48:	6a 95       	dec	r22
     b4a:	d1 f7       	brne	.-12     	; 0xb40 <__unpack_f+0x54>
     b4c:	83 e0       	ldi	r24, 0x03	; 3
     b4e:	8c 93       	st	X, r24
     b50:	0d c0       	rjmp	.+26     	; 0xb6c <__unpack_f+0x80>
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	12 96       	adiw	r26, 0x02	; 2
     b5c:	8d 91       	ld	r24, X+
     b5e:	9c 91       	ld	r25, X
     b60:	13 97       	sbiw	r26, 0x03	; 3
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	13 96       	adiw	r26, 0x03	; 3
     b66:	9c 93       	st	X, r25
     b68:	8e 93       	st	-X, r24
     b6a:	12 97       	sbiw	r26, 0x02	; 2
     b6c:	20 30       	cpi	r18, 0x00	; 0
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	38 07       	cpc	r19, r24
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	48 07       	cpc	r20, r24
     b76:	80 e4       	ldi	r24, 0x40	; 64
     b78:	58 07       	cpc	r21, r24
     b7a:	58 f3       	brcs	.-42     	; 0xb52 <__unpack_f+0x66>
     b7c:	14 96       	adiw	r26, 0x04	; 4
     b7e:	2d 93       	st	X+, r18
     b80:	3d 93       	st	X+, r19
     b82:	4d 93       	st	X+, r20
     b84:	5c 93       	st	X, r21
     b86:	17 97       	sbiw	r26, 0x07	; 7
     b88:	08 95       	ret
     b8a:	2f 3f       	cpi	r18, 0xFF	; 255
     b8c:	31 05       	cpc	r19, r1
     b8e:	79 f4       	brne	.+30     	; 0xbae <__unpack_f+0xc2>
     b90:	41 15       	cp	r20, r1
     b92:	51 05       	cpc	r21, r1
     b94:	61 05       	cpc	r22, r1
     b96:	71 05       	cpc	r23, r1
     b98:	19 f4       	brne	.+6      	; 0xba0 <__unpack_f+0xb4>
     b9a:	84 e0       	ldi	r24, 0x04	; 4
     b9c:	8c 93       	st	X, r24
     b9e:	08 95       	ret
     ba0:	64 ff       	sbrs	r22, 4
     ba2:	03 c0       	rjmp	.+6      	; 0xbaa <__unpack_f+0xbe>
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	8c 93       	st	X, r24
     ba8:	12 c0       	rjmp	.+36     	; 0xbce <__unpack_f+0xe2>
     baa:	1c 92       	st	X, r1
     bac:	10 c0       	rjmp	.+32     	; 0xbce <__unpack_f+0xe2>
     bae:	2f 57       	subi	r18, 0x7F	; 127
     bb0:	30 40       	sbci	r19, 0x00	; 0
     bb2:	13 96       	adiw	r26, 0x03	; 3
     bb4:	3c 93       	st	X, r19
     bb6:	2e 93       	st	-X, r18
     bb8:	12 97       	sbiw	r26, 0x02	; 2
     bba:	83 e0       	ldi	r24, 0x03	; 3
     bbc:	8c 93       	st	X, r24
     bbe:	87 e0       	ldi	r24, 0x07	; 7
     bc0:	44 0f       	add	r20, r20
     bc2:	55 1f       	adc	r21, r21
     bc4:	66 1f       	adc	r22, r22
     bc6:	77 1f       	adc	r23, r23
     bc8:	8a 95       	dec	r24
     bca:	d1 f7       	brne	.-12     	; 0xbc0 <__unpack_f+0xd4>
     bcc:	70 64       	ori	r23, 0x40	; 64
     bce:	14 96       	adiw	r26, 0x04	; 4
     bd0:	4d 93       	st	X+, r20
     bd2:	5d 93       	st	X+, r21
     bd4:	6d 93       	st	X+, r22
     bd6:	7c 93       	st	X, r23
     bd8:	17 97       	sbiw	r26, 0x07	; 7
     bda:	08 95       	ret

00000bdc <__fpcmp_parts_f>:
     bdc:	1f 93       	push	r17
     bde:	dc 01       	movw	r26, r24
     be0:	fb 01       	movw	r30, r22
     be2:	9c 91       	ld	r25, X
     be4:	92 30       	cpi	r25, 0x02	; 2
     be6:	08 f4       	brcc	.+2      	; 0xbea <__fpcmp_parts_f+0xe>
     be8:	47 c0       	rjmp	.+142    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bea:	80 81       	ld	r24, Z
     bec:	82 30       	cpi	r24, 0x02	; 2
     bee:	08 f4       	brcc	.+2      	; 0xbf2 <__fpcmp_parts_f+0x16>
     bf0:	43 c0       	rjmp	.+134    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bf2:	94 30       	cpi	r25, 0x04	; 4
     bf4:	51 f4       	brne	.+20     	; 0xc0a <__fpcmp_parts_f+0x2e>
     bf6:	11 96       	adiw	r26, 0x01	; 1
     bf8:	1c 91       	ld	r17, X
     bfa:	84 30       	cpi	r24, 0x04	; 4
     bfc:	99 f5       	brne	.+102    	; 0xc64 <__fpcmp_parts_f+0x88>
     bfe:	81 81       	ldd	r24, Z+1	; 0x01
     c00:	68 2f       	mov	r22, r24
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	61 1b       	sub	r22, r17
     c06:	71 09       	sbc	r23, r1
     c08:	3f c0       	rjmp	.+126    	; 0xc88 <__fpcmp_parts_f+0xac>
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	21 f0       	breq	.+8      	; 0xc16 <__fpcmp_parts_f+0x3a>
     c0e:	92 30       	cpi	r25, 0x02	; 2
     c10:	31 f4       	brne	.+12     	; 0xc1e <__fpcmp_parts_f+0x42>
     c12:	82 30       	cpi	r24, 0x02	; 2
     c14:	b9 f1       	breq	.+110    	; 0xc84 <__fpcmp_parts_f+0xa8>
     c16:	81 81       	ldd	r24, Z+1	; 0x01
     c18:	88 23       	and	r24, r24
     c1a:	89 f1       	breq	.+98     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c1c:	2d c0       	rjmp	.+90     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c1e:	11 96       	adiw	r26, 0x01	; 1
     c20:	1c 91       	ld	r17, X
     c22:	11 97       	sbiw	r26, 0x01	; 1
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	f1 f0       	breq	.+60     	; 0xc64 <__fpcmp_parts_f+0x88>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	18 17       	cp	r17, r24
     c2c:	d9 f4       	brne	.+54     	; 0xc64 <__fpcmp_parts_f+0x88>
     c2e:	12 96       	adiw	r26, 0x02	; 2
     c30:	2d 91       	ld	r18, X+
     c32:	3c 91       	ld	r19, X
     c34:	13 97       	sbiw	r26, 0x03	; 3
     c36:	82 81       	ldd	r24, Z+2	; 0x02
     c38:	93 81       	ldd	r25, Z+3	; 0x03
     c3a:	82 17       	cp	r24, r18
     c3c:	93 07       	cpc	r25, r19
     c3e:	94 f0       	brlt	.+36     	; 0xc64 <__fpcmp_parts_f+0x88>
     c40:	28 17       	cp	r18, r24
     c42:	39 07       	cpc	r19, r25
     c44:	bc f0       	brlt	.+46     	; 0xc74 <__fpcmp_parts_f+0x98>
     c46:	14 96       	adiw	r26, 0x04	; 4
     c48:	8d 91       	ld	r24, X+
     c4a:	9d 91       	ld	r25, X+
     c4c:	0d 90       	ld	r0, X+
     c4e:	bc 91       	ld	r27, X
     c50:	a0 2d       	mov	r26, r0
     c52:	24 81       	ldd	r18, Z+4	; 0x04
     c54:	35 81       	ldd	r19, Z+5	; 0x05
     c56:	46 81       	ldd	r20, Z+6	; 0x06
     c58:	57 81       	ldd	r21, Z+7	; 0x07
     c5a:	28 17       	cp	r18, r24
     c5c:	39 07       	cpc	r19, r25
     c5e:	4a 07       	cpc	r20, r26
     c60:	5b 07       	cpc	r21, r27
     c62:	18 f4       	brcc	.+6      	; 0xc6a <__fpcmp_parts_f+0x8e>
     c64:	11 23       	and	r17, r17
     c66:	41 f0       	breq	.+16     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c68:	0a c0       	rjmp	.+20     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c6a:	82 17       	cp	r24, r18
     c6c:	93 07       	cpc	r25, r19
     c6e:	a4 07       	cpc	r26, r20
     c70:	b5 07       	cpc	r27, r21
     c72:	40 f4       	brcc	.+16     	; 0xc84 <__fpcmp_parts_f+0xa8>
     c74:	11 23       	and	r17, r17
     c76:	19 f0       	breq	.+6      	; 0xc7e <__fpcmp_parts_f+0xa2>
     c78:	61 e0       	ldi	r22, 0x01	; 1
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <__fpcmp_parts_f+0xac>
     c7e:	6f ef       	ldi	r22, 0xFF	; 255
     c80:	7f ef       	ldi	r23, 0xFF	; 255
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <__fpcmp_parts_f+0xac>
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	cb 01       	movw	r24, r22
     c8a:	1f 91       	pop	r17
     c8c:	08 95       	ret

00000c8e <main>:
#include"DIO_interface.h"
//HAL
#include"LCD_interface.h"

int main()
{
     c8e:	df 93       	push	r29
     c90:	cf 93       	push	r28
     c92:	cd b7       	in	r28, 0x3d	; 61
     c94:	de b7       	in	r29, 0x3e	; 62
     c96:	a1 97       	sbiw	r28, 0x21	; 33
     c98:	0f b6       	in	r0, 0x3f	; 63
     c9a:	f8 94       	cli
     c9c:	de bf       	out	0x3e, r29	; 62
     c9e:	0f be       	out	0x3f, r0	; 63
     ca0:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8Temp;
	u16 Local_u16Digital,Local_u16AnalogValue;
	DIO_Init();
     ca2:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <DIO_Init>
	LCD_voidInit();
     ca6:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <LCD_voidInit>
	ADC_voidInit();
     caa:	0e 94 6d 07 	call	0xeda	; 0xeda <ADC_voidInit>

	while(1)
	{
		//read digital value
		ADC_u8GetDigitalValue(ADC_u8_CHANNEL_0,&Local_u16Digital);
     cae:	9e 01       	movw	r18, r28
     cb0:	20 5e       	subi	r18, 0xE0	; 224
     cb2:	3f 4f       	sbci	r19, 0xFF	; 255
     cb4:	80 e0       	ldi	r24, 0x00	; 0
     cb6:	b9 01       	movw	r22, r18
     cb8:	0e 94 ac 07 	call	0xf58	; 0xf58 <ADC_u8GetDigitalValue>
		//get analog value
		Local_u16AnalogValue=(Local_u16Digital*5000UL)/1024;//since the highest room temp = 50 celsius
     cbc:	88 a1       	ldd	r24, Y+32	; 0x20
     cbe:	99 a1       	ldd	r25, Y+33	; 0x21
     cc0:	cc 01       	movw	r24, r24
     cc2:	a0 e0       	ldi	r26, 0x00	; 0
     cc4:	b0 e0       	ldi	r27, 0x00	; 0
     cc6:	28 e8       	ldi	r18, 0x88	; 136
     cc8:	33 e1       	ldi	r19, 0x13	; 19
     cca:	40 e0       	ldi	r20, 0x00	; 0
     ccc:	50 e0       	ldi	r21, 0x00	; 0
     cce:	bc 01       	movw	r22, r24
     cd0:	cd 01       	movw	r24, r26
     cd2:	0e 94 71 13 	call	0x26e2	; 0x26e2 <__mulsi3>
     cd6:	dc 01       	movw	r26, r24
     cd8:	cb 01       	movw	r24, r22
     cda:	07 2e       	mov	r0, r23
     cdc:	7a e0       	ldi	r23, 0x0A	; 10
     cde:	b6 95       	lsr	r27
     ce0:	a7 95       	ror	r26
     ce2:	97 95       	ror	r25
     ce4:	87 95       	ror	r24
     ce6:	7a 95       	dec	r23
     ce8:	d1 f7       	brne	.-12     	; 0xcde <main+0x50>
     cea:	70 2d       	mov	r23, r0
     cec:	9e 8f       	std	Y+30, r25	; 0x1e
     cee:	8d 8f       	std	Y+29, r24	; 0x1d
		Local_u8Temp=Local_u16AnalogValue/10;
     cf0:	8d 8d       	ldd	r24, Y+29	; 0x1d
     cf2:	9e 8d       	ldd	r25, Y+30	; 0x1e
     cf4:	2a e0       	ldi	r18, 0x0A	; 10
     cf6:	30 e0       	ldi	r19, 0x00	; 0
     cf8:	b9 01       	movw	r22, r18
     cfa:	0e 94 90 13 	call	0x2720	; 0x2720 <__udivmodhi4>
     cfe:	cb 01       	movw	r24, r22
     d00:	8f 8f       	std	Y+31, r24	; 0x1f
		//turning on LCD
		LCD_voidSendNum(Local_u8Temp);
     d02:	8f 8d       	ldd	r24, Y+31	; 0x1f
     d04:	88 2f       	mov	r24, r24
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	0e 94 21 13 	call	0x2642	; 0x2642 <LCD_voidSendNum>
     d0c:	80 e0       	ldi	r24, 0x00	; 0
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	a8 e4       	ldi	r26, 0x48	; 72
     d12:	b2 e4       	ldi	r27, 0x42	; 66
     d14:	89 8f       	std	Y+25, r24	; 0x19
     d16:	9a 8f       	std	Y+26, r25	; 0x1a
     d18:	ab 8f       	std	Y+27, r26	; 0x1b
     d1a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d1c:	69 8d       	ldd	r22, Y+25	; 0x19
     d1e:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d20:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d22:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d24:	20 e0       	ldi	r18, 0x00	; 0
     d26:	30 e4       	ldi	r19, 0x40	; 64
     d28:	4c e9       	ldi	r20, 0x9C	; 156
     d2a:	56 e4       	ldi	r21, 0x46	; 70
     d2c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     d30:	dc 01       	movw	r26, r24
     d32:	cb 01       	movw	r24, r22
     d34:	8d 8b       	std	Y+21, r24	; 0x15
     d36:	9e 8b       	std	Y+22, r25	; 0x16
     d38:	af 8b       	std	Y+23, r26	; 0x17
     d3a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     d3c:	6d 89       	ldd	r22, Y+21	; 0x15
     d3e:	7e 89       	ldd	r23, Y+22	; 0x16
     d40:	8f 89       	ldd	r24, Y+23	; 0x17
     d42:	98 8d       	ldd	r25, Y+24	; 0x18
     d44:	20 e0       	ldi	r18, 0x00	; 0
     d46:	30 e0       	ldi	r19, 0x00	; 0
     d48:	40 e8       	ldi	r20, 0x80	; 128
     d4a:	5f e3       	ldi	r21, 0x3F	; 63
     d4c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     d50:	88 23       	and	r24, r24
     d52:	2c f4       	brge	.+10     	; 0xd5e <main+0xd0>
		__ticks = 1;
     d54:	81 e0       	ldi	r24, 0x01	; 1
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	9c 8b       	std	Y+20, r25	; 0x14
     d5a:	8b 8b       	std	Y+19, r24	; 0x13
     d5c:	3f c0       	rjmp	.+126    	; 0xddc <main+0x14e>
	else if (__tmp > 65535)
     d5e:	6d 89       	ldd	r22, Y+21	; 0x15
     d60:	7e 89       	ldd	r23, Y+22	; 0x16
     d62:	8f 89       	ldd	r24, Y+23	; 0x17
     d64:	98 8d       	ldd	r25, Y+24	; 0x18
     d66:	20 e0       	ldi	r18, 0x00	; 0
     d68:	3f ef       	ldi	r19, 0xFF	; 255
     d6a:	4f e7       	ldi	r20, 0x7F	; 127
     d6c:	57 e4       	ldi	r21, 0x47	; 71
     d6e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
     d72:	18 16       	cp	r1, r24
     d74:	4c f5       	brge	.+82     	; 0xdc8 <main+0x13a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d76:	69 8d       	ldd	r22, Y+25	; 0x19
     d78:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d7a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d7c:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d7e:	20 e0       	ldi	r18, 0x00	; 0
     d80:	30 e0       	ldi	r19, 0x00	; 0
     d82:	40 e2       	ldi	r20, 0x20	; 32
     d84:	51 e4       	ldi	r21, 0x41	; 65
     d86:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     d8a:	dc 01       	movw	r26, r24
     d8c:	cb 01       	movw	r24, r22
     d8e:	bc 01       	movw	r22, r24
     d90:	cd 01       	movw	r24, r26
     d92:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     d96:	dc 01       	movw	r26, r24
     d98:	cb 01       	movw	r24, r22
     d9a:	9c 8b       	std	Y+20, r25	; 0x14
     d9c:	8b 8b       	std	Y+19, r24	; 0x13
     d9e:	0f c0       	rjmp	.+30     	; 0xdbe <main+0x130>
     da0:	80 ed       	ldi	r24, 0xD0	; 208
     da2:	97 e0       	ldi	r25, 0x07	; 7
     da4:	9a 8b       	std	Y+18, r25	; 0x12
     da6:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     da8:	89 89       	ldd	r24, Y+17	; 0x11
     daa:	9a 89       	ldd	r25, Y+18	; 0x12
     dac:	01 97       	sbiw	r24, 0x01	; 1
     dae:	f1 f7       	brne	.-4      	; 0xdac <main+0x11e>
     db0:	9a 8b       	std	Y+18, r25	; 0x12
     db2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     db4:	8b 89       	ldd	r24, Y+19	; 0x13
     db6:	9c 89       	ldd	r25, Y+20	; 0x14
     db8:	01 97       	sbiw	r24, 0x01	; 1
     dba:	9c 8b       	std	Y+20, r25	; 0x14
     dbc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dbe:	8b 89       	ldd	r24, Y+19	; 0x13
     dc0:	9c 89       	ldd	r25, Y+20	; 0x14
     dc2:	00 97       	sbiw	r24, 0x00	; 0
     dc4:	69 f7       	brne	.-38     	; 0xda0 <main+0x112>
     dc6:	14 c0       	rjmp	.+40     	; 0xdf0 <main+0x162>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dc8:	6d 89       	ldd	r22, Y+21	; 0x15
     dca:	7e 89       	ldd	r23, Y+22	; 0x16
     dcc:	8f 89       	ldd	r24, Y+23	; 0x17
     dce:	98 8d       	ldd	r25, Y+24	; 0x18
     dd0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     dd4:	dc 01       	movw	r26, r24
     dd6:	cb 01       	movw	r24, r22
     dd8:	9c 8b       	std	Y+20, r25	; 0x14
     dda:	8b 8b       	std	Y+19, r24	; 0x13
     ddc:	8b 89       	ldd	r24, Y+19	; 0x13
     dde:	9c 89       	ldd	r25, Y+20	; 0x14
     de0:	98 8b       	std	Y+16, r25	; 0x10
     de2:	8f 87       	std	Y+15, r24	; 0x0f
     de4:	8f 85       	ldd	r24, Y+15	; 0x0f
     de6:	98 89       	ldd	r25, Y+16	; 0x10
     de8:	01 97       	sbiw	r24, 0x01	; 1
     dea:	f1 f7       	brne	.-4      	; 0xde8 <main+0x15a>
     dec:	98 8b       	std	Y+16, r25	; 0x10
     dee:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(50);
		LCD_voidClear();
     df0:	0e 94 a6 12 	call	0x254c	; 0x254c <LCD_voidClear>
     df4:	80 e0       	ldi	r24, 0x00	; 0
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	a8 e4       	ldi	r26, 0x48	; 72
     dfa:	b2 e4       	ldi	r27, 0x42	; 66
     dfc:	8b 87       	std	Y+11, r24	; 0x0b
     dfe:	9c 87       	std	Y+12, r25	; 0x0c
     e00:	ad 87       	std	Y+13, r26	; 0x0d
     e02:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e04:	6b 85       	ldd	r22, Y+11	; 0x0b
     e06:	7c 85       	ldd	r23, Y+12	; 0x0c
     e08:	8d 85       	ldd	r24, Y+13	; 0x0d
     e0a:	9e 85       	ldd	r25, Y+14	; 0x0e
     e0c:	20 e0       	ldi	r18, 0x00	; 0
     e0e:	30 e4       	ldi	r19, 0x40	; 64
     e10:	4c e9       	ldi	r20, 0x9C	; 156
     e12:	56 e4       	ldi	r21, 0x46	; 70
     e14:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e18:	dc 01       	movw	r26, r24
     e1a:	cb 01       	movw	r24, r22
     e1c:	8f 83       	std	Y+7, r24	; 0x07
     e1e:	98 87       	std	Y+8, r25	; 0x08
     e20:	a9 87       	std	Y+9, r26	; 0x09
     e22:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e24:	6f 81       	ldd	r22, Y+7	; 0x07
     e26:	78 85       	ldd	r23, Y+8	; 0x08
     e28:	89 85       	ldd	r24, Y+9	; 0x09
     e2a:	9a 85       	ldd	r25, Y+10	; 0x0a
     e2c:	20 e0       	ldi	r18, 0x00	; 0
     e2e:	30 e0       	ldi	r19, 0x00	; 0
     e30:	40 e8       	ldi	r20, 0x80	; 128
     e32:	5f e3       	ldi	r21, 0x3F	; 63
     e34:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     e38:	88 23       	and	r24, r24
     e3a:	2c f4       	brge	.+10     	; 0xe46 <main+0x1b8>
		__ticks = 1;
     e3c:	81 e0       	ldi	r24, 0x01	; 1
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	9e 83       	std	Y+6, r25	; 0x06
     e42:	8d 83       	std	Y+5, r24	; 0x05
     e44:	3f c0       	rjmp	.+126    	; 0xec4 <main+0x236>
	else if (__tmp > 65535)
     e46:	6f 81       	ldd	r22, Y+7	; 0x07
     e48:	78 85       	ldd	r23, Y+8	; 0x08
     e4a:	89 85       	ldd	r24, Y+9	; 0x09
     e4c:	9a 85       	ldd	r25, Y+10	; 0x0a
     e4e:	20 e0       	ldi	r18, 0x00	; 0
     e50:	3f ef       	ldi	r19, 0xFF	; 255
     e52:	4f e7       	ldi	r20, 0x7F	; 127
     e54:	57 e4       	ldi	r21, 0x47	; 71
     e56:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
     e5a:	18 16       	cp	r1, r24
     e5c:	4c f5       	brge	.+82     	; 0xeb0 <main+0x222>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e5e:	6b 85       	ldd	r22, Y+11	; 0x0b
     e60:	7c 85       	ldd	r23, Y+12	; 0x0c
     e62:	8d 85       	ldd	r24, Y+13	; 0x0d
     e64:	9e 85       	ldd	r25, Y+14	; 0x0e
     e66:	20 e0       	ldi	r18, 0x00	; 0
     e68:	30 e0       	ldi	r19, 0x00	; 0
     e6a:	40 e2       	ldi	r20, 0x20	; 32
     e6c:	51 e4       	ldi	r21, 0x41	; 65
     e6e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e72:	dc 01       	movw	r26, r24
     e74:	cb 01       	movw	r24, r22
     e76:	bc 01       	movw	r22, r24
     e78:	cd 01       	movw	r24, r26
     e7a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     e7e:	dc 01       	movw	r26, r24
     e80:	cb 01       	movw	r24, r22
     e82:	9e 83       	std	Y+6, r25	; 0x06
     e84:	8d 83       	std	Y+5, r24	; 0x05
     e86:	0f c0       	rjmp	.+30     	; 0xea6 <main+0x218>
     e88:	80 ed       	ldi	r24, 0xD0	; 208
     e8a:	97 e0       	ldi	r25, 0x07	; 7
     e8c:	9c 83       	std	Y+4, r25	; 0x04
     e8e:	8b 83       	std	Y+3, r24	; 0x03
     e90:	8b 81       	ldd	r24, Y+3	; 0x03
     e92:	9c 81       	ldd	r25, Y+4	; 0x04
     e94:	01 97       	sbiw	r24, 0x01	; 1
     e96:	f1 f7       	brne	.-4      	; 0xe94 <main+0x206>
     e98:	9c 83       	std	Y+4, r25	; 0x04
     e9a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e9c:	8d 81       	ldd	r24, Y+5	; 0x05
     e9e:	9e 81       	ldd	r25, Y+6	; 0x06
     ea0:	01 97       	sbiw	r24, 0x01	; 1
     ea2:	9e 83       	std	Y+6, r25	; 0x06
     ea4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ea6:	8d 81       	ldd	r24, Y+5	; 0x05
     ea8:	9e 81       	ldd	r25, Y+6	; 0x06
     eaa:	00 97       	sbiw	r24, 0x00	; 0
     eac:	69 f7       	brne	.-38     	; 0xe88 <main+0x1fa>
     eae:	ff ce       	rjmp	.-514    	; 0xcae <main+0x20>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     eb0:	6f 81       	ldd	r22, Y+7	; 0x07
     eb2:	78 85       	ldd	r23, Y+8	; 0x08
     eb4:	89 85       	ldd	r24, Y+9	; 0x09
     eb6:	9a 85       	ldd	r25, Y+10	; 0x0a
     eb8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     ebc:	dc 01       	movw	r26, r24
     ebe:	cb 01       	movw	r24, r22
     ec0:	9e 83       	std	Y+6, r25	; 0x06
     ec2:	8d 83       	std	Y+5, r24	; 0x05
     ec4:	8d 81       	ldd	r24, Y+5	; 0x05
     ec6:	9e 81       	ldd	r25, Y+6	; 0x06
     ec8:	9a 83       	std	Y+2, r25	; 0x02
     eca:	89 83       	std	Y+1, r24	; 0x01
     ecc:	89 81       	ldd	r24, Y+1	; 0x01
     ece:	9a 81       	ldd	r25, Y+2	; 0x02
     ed0:	01 97       	sbiw	r24, 0x01	; 1
     ed2:	f1 f7       	brne	.-4      	; 0xed0 <main+0x242>
     ed4:	9a 83       	std	Y+2, r25	; 0x02
     ed6:	89 83       	std	Y+1, r24	; 0x01
     ed8:	ea ce       	rjmp	.-556    	; 0xcae <main+0x20>

00000eda <ADC_voidInit>:
#include "ADC_private.h"
#include "ADC_config.h"


void ADC_voidInit(void)
{
     eda:	df 93       	push	r29
     edc:	cf 93       	push	r28
     ede:	cd b7       	in	r28, 0x3d	; 61
     ee0:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADC_u8_ADMUX,6);
     ee2:	a7 e2       	ldi	r26, 0x27	; 39
     ee4:	b0 e0       	ldi	r27, 0x00	; 0
     ee6:	e7 e2       	ldi	r30, 0x27	; 39
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	80 81       	ld	r24, Z
     eec:	80 64       	ori	r24, 0x40	; 64
     eee:	8c 93       	st	X, r24
		CLR_BIT(ADC_u8_ADMUX,7);
     ef0:	a7 e2       	ldi	r26, 0x27	; 39
     ef2:	b0 e0       	ldi	r27, 0x00	; 0
     ef4:	e7 e2       	ldi	r30, 0x27	; 39
     ef6:	f0 e0       	ldi	r31, 0x00	; 0
     ef8:	80 81       	ld	r24, Z
     efa:	8f 77       	andi	r24, 0x7F	; 127
     efc:	8c 93       	st	X, r24


		//left or right adjust //right
		CLR_BIT(ADC_u8_ADMUX,5);
     efe:	a7 e2       	ldi	r26, 0x27	; 39
     f00:	b0 e0       	ldi	r27, 0x00	; 0
     f02:	e7 e2       	ldi	r30, 0x27	; 39
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	80 81       	ld	r24, Z
     f08:	8f 7d       	andi	r24, 0xDF	; 223
     f0a:	8c 93       	st	X, r24


		CLR_BIT(ADC_u8_ADCSRA,5);
     f0c:	a6 e2       	ldi	r26, 0x26	; 38
     f0e:	b0 e0       	ldi	r27, 0x00	; 0
     f10:	e6 e2       	ldi	r30, 0x26	; 38
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	80 81       	ld	r24, Z
     f16:	8f 7d       	andi	r24, 0xDF	; 223
     f18:	8c 93       	st	X, r24


		SET_BIT( ADC_u8_ADCSRA,0);
     f1a:	a6 e2       	ldi	r26, 0x26	; 38
     f1c:	b0 e0       	ldi	r27, 0x00	; 0
     f1e:	e6 e2       	ldi	r30, 0x26	; 38
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	80 81       	ld	r24, Z
     f24:	81 60       	ori	r24, 0x01	; 1
     f26:	8c 93       	st	X, r24
		SET_BIT( ADC_u8_ADCSRA,1);
     f28:	a6 e2       	ldi	r26, 0x26	; 38
     f2a:	b0 e0       	ldi	r27, 0x00	; 0
     f2c:	e6 e2       	ldi	r30, 0x26	; 38
     f2e:	f0 e0       	ldi	r31, 0x00	; 0
     f30:	80 81       	ld	r24, Z
     f32:	82 60       	ori	r24, 0x02	; 2
     f34:	8c 93       	st	X, r24
		CLR_BIT(ADC_u8_ADCSRA,2);
     f36:	a6 e2       	ldi	r26, 0x26	; 38
     f38:	b0 e0       	ldi	r27, 0x00	; 0
     f3a:	e6 e2       	ldi	r30, 0x26	; 38
     f3c:	f0 e0       	ldi	r31, 0x00	; 0
     f3e:	80 81       	ld	r24, Z
     f40:	8b 7f       	andi	r24, 0xFB	; 251
     f42:	8c 93       	st	X, r24


		SET_BIT(ADC_u8_ADCSRA,7);
     f44:	a6 e2       	ldi	r26, 0x26	; 38
     f46:	b0 e0       	ldi	r27, 0x00	; 0
     f48:	e6 e2       	ldi	r30, 0x26	; 38
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	80 81       	ld	r24, Z
     f4e:	80 68       	ori	r24, 0x80	; 128
     f50:	8c 93       	st	X, r24
}
     f52:	cf 91       	pop	r28
     f54:	df 91       	pop	r29
     f56:	08 95       	ret

00000f58 <ADC_u8GetDigitalValue>:

u8 ADC_u8GetDigitalValue( u8 Copy_u8Channel ,u16 * Copy_pu16DigitalValue)
{
     f58:	df 93       	push	r29
     f5a:	cf 93       	push	r28
     f5c:	00 d0       	rcall	.+0      	; 0xf5e <ADC_u8GetDigitalValue+0x6>
     f5e:	00 d0       	rcall	.+0      	; 0xf60 <ADC_u8GetDigitalValue+0x8>
     f60:	cd b7       	in	r28, 0x3d	; 61
     f62:	de b7       	in	r29, 0x3e	; 62
     f64:	8a 83       	std	Y+2, r24	; 0x02
     f66:	7c 83       	std	Y+4, r23	; 0x04
     f68:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
     f6a:	81 e0       	ldi	r24, 0x01	; 1
     f6c:	89 83       	std	Y+1, r24	; 0x01
		if((Copy_u8Channel<32) && ( Copy_pu16DigitalValue!=NULL))
     f6e:	8a 81       	ldd	r24, Y+2	; 0x02
     f70:	80 32       	cpi	r24, 0x20	; 32
     f72:	70 f5       	brcc	.+92     	; 0xfd0 <ADC_u8GetDigitalValue+0x78>
     f74:	8b 81       	ldd	r24, Y+3	; 0x03
     f76:	9c 81       	ldd	r25, Y+4	; 0x04
     f78:	00 97       	sbiw	r24, 0x00	; 0
     f7a:	51 f1       	breq	.+84     	; 0xfd0 <ADC_u8GetDigitalValue+0x78>
		{
			//clear ADMUX
			ADC_u8_ADMUX &= 0b11100000;
     f7c:	a7 e2       	ldi	r26, 0x27	; 39
     f7e:	b0 e0       	ldi	r27, 0x00	; 0
     f80:	e7 e2       	ldi	r30, 0x27	; 39
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	80 81       	ld	r24, Z
     f86:	80 7e       	andi	r24, 0xE0	; 224
     f88:	8c 93       	st	X, r24
			//select channel
			ADC_u8_ADMUX |= Copy_u8Channel;
     f8a:	a7 e2       	ldi	r26, 0x27	; 39
     f8c:	b0 e0       	ldi	r27, 0x00	; 0
     f8e:	e7 e2       	ldi	r30, 0x27	; 39
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	90 81       	ld	r25, Z
     f94:	8a 81       	ldd	r24, Y+2	; 0x02
     f96:	89 2b       	or	r24, r25
     f98:	8c 93       	st	X, r24
			//start conversion
			SET_BIT(ADC_u8_ADCSRA,6);
     f9a:	a6 e2       	ldi	r26, 0x26	; 38
     f9c:	b0 e0       	ldi	r27, 0x00	; 0
     f9e:	e6 e2       	ldi	r30, 0x26	; 38
     fa0:	f0 e0       	ldi	r31, 0x00	; 0
     fa2:	80 81       	ld	r24, Z
     fa4:	80 64       	ori	r24, 0x40	; 64
     fa6:	8c 93       	st	X, r24
			//wait for the interrupt flag
			while((GET_BIT(ADC_u8_ADCSRA,4))==0);
     fa8:	e6 e2       	ldi	r30, 0x26	; 38
     faa:	f0 e0       	ldi	r31, 0x00	; 0
     fac:	80 81       	ld	r24, Z
     fae:	82 95       	swap	r24
     fb0:	8f 70       	andi	r24, 0x0F	; 15
     fb2:	88 2f       	mov	r24, r24
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	81 70       	andi	r24, 0x01	; 1
     fb8:	90 70       	andi	r25, 0x00	; 0
     fba:	00 97       	sbiw	r24, 0x00	; 0
     fbc:	a9 f3       	breq	.-22     	; 0xfa8 <ADC_u8GetDigitalValue+0x50>

			//read output
			*Copy_pu16DigitalValue= ADC_u16_ADC;
     fbe:	e4 e2       	ldi	r30, 0x24	; 36
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	80 81       	ld	r24, Z
     fc4:	91 81       	ldd	r25, Z+1	; 0x01
     fc6:	eb 81       	ldd	r30, Y+3	; 0x03
     fc8:	fc 81       	ldd	r31, Y+4	; 0x04
     fca:	91 83       	std	Z+1, r25	; 0x01
     fcc:	80 83       	st	Z, r24
     fce:	01 c0       	rjmp	.+2      	; 0xfd2 <ADC_u8GetDigitalValue+0x7a>

		}
		else Local_u8ErrorState = STD_TYPES_NOK;
     fd0:	19 82       	std	Y+1, r1	; 0x01

		return Local_u8ErrorState;
     fd2:	89 81       	ldd	r24, Y+1	; 0x01

}
     fd4:	0f 90       	pop	r0
     fd6:	0f 90       	pop	r0
     fd8:	0f 90       	pop	r0
     fda:	0f 90       	pop	r0
     fdc:	cf 91       	pop	r28
     fde:	df 91       	pop	r29
     fe0:	08 95       	ret

00000fe2 <DIO_Init>:
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_config.h"

void DIO_Init(void)
{
     fe2:	df 93       	push	r29
     fe4:	cf 93       	push	r28
     fe6:	cd b7       	in	r28, 0x3d	; 61
     fe8:	de b7       	in	r29, 0x3e	; 62
	/* Initial Direction For Pins */
	DDRA_u8_REG = CONC(DIO_u8_PA7_INITIAL_DIRECTION,DIO_u8_PA6_INITIAL_DIRECTION,DIO_u8_PA5_INITIAL_DIRECTION,DIO_u8_PA4_INITIAL_DIRECTION,
     fea:	ea e3       	ldi	r30, 0x3A	; 58
     fec:	f0 e0       	ldi	r31, 0x00	; 0
     fee:	86 e0       	ldi	r24, 0x06	; 6
     ff0:	80 83       	st	Z, r24
			DIO_u8_PA3_INITIAL_DIRECTION,DIO_u8_PA2_INITIAL_DIRECTION,DIO_u8_PA1_INITIAL_DIRECTION,DIO_u8_PA0_INITIAL_DIRECTION);
	DDRB_u8_REG = CONC(DIO_u8_PB7_INITIAL_DIRECTION,DIO_u8_PB6_INITIAL_DIRECTION,DIO_u8_PB5_INITIAL_DIRECTION,DIO_u8_PB4_INITIAL_DIRECTION,
     ff2:	e7 e3       	ldi	r30, 0x37	; 55
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	8f ef       	ldi	r24, 0xFF	; 255
     ff8:	80 83       	st	Z, r24
			DIO_u8_PB3_INITIAL_DIRECTION,DIO_u8_PB2_INITIAL_DIRECTION,DIO_u8_PB1_INITIAL_DIRECTION,DIO_u8_PB0_INITIAL_DIRECTION);
	DDRC_u8_REG = CONC(DIO_u8_PC7_INITIAL_DIRECTION,DIO_u8_PC6_INITIAL_DIRECTION,DIO_u8_PC5_INITIAL_DIRECTION,DIO_u8_PC4_INITIAL_DIRECTION,
     ffa:	e4 e3       	ldi	r30, 0x34	; 52
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	8f ef       	ldi	r24, 0xFF	; 255
    1000:	80 83       	st	Z, r24
			DIO_u8_PC3_INITIAL_DIRECTION,DIO_u8_PC2_INITIAL_DIRECTION,DIO_u8_PC1_INITIAL_DIRECTION,DIO_u8_PC0_INITIAL_DIRECTION);
	DDRD_u8_REG = CONC(DIO_u8_PD7_INITIAL_DIRECTION,DIO_u8_PD6_INITIAL_DIRECTION,DIO_u8_PD5_INITIAL_DIRECTION,DIO_u8_PD4_INITIAL_DIRECTION,
    1002:	e1 e3       	ldi	r30, 0x31	; 49
    1004:	f0 e0       	ldi	r31, 0x00	; 0
    1006:	8f ef       	ldi	r24, 0xFF	; 255
    1008:	80 83       	st	Z, r24
			DIO_u8_PD3_INITIAL_DIRECTION,DIO_u8_PD2_INITIAL_DIRECTION,DIO_u8_PD1_INITIAL_DIRECTION,DIO_u8_PD0_INITIAL_DIRECTION);

	/* Initial Value For Pins */
	PORTA_u8_REG = CONC(DIO_u8_PA7_INITIAL_VALUE,DIO_u8_PA6_INITIAL_VALUE,DIO_u8_PA5_INITIAL_VALUE,DIO_u8_PA4_INITIAL_VALUE,
    100a:	eb e3       	ldi	r30, 0x3B	; 59
    100c:	f0 e0       	ldi	r31, 0x00	; 0
    100e:	10 82       	st	Z, r1
			DIO_u8_PA3_INITIAL_VALUE,DIO_u8_PA2_INITIAL_VALUE,DIO_u8_PA1_INITIAL_VALUE,DIO_u8_PA0_INITIAL_VALUE);
	PORTB_u8_REG = CONC(DIO_u8_PB7_INITIAL_VALUE,DIO_u8_PB6_INITIAL_VALUE,DIO_u8_PB5_INITIAL_VALUE,DIO_u8_PB4_INITIAL_VALUE,
    1010:	e8 e3       	ldi	r30, 0x38	; 56
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	10 82       	st	Z, r1
			DIO_u8_PB3_INITIAL_VALUE,DIO_u8_PB2_INITIAL_VALUE,DIO_u8_PB1_INITIAL_VALUE,DIO_u8_PB0_INITIAL_VALUE);
	PORTC_u8_REG = CONC(DIO_u8_PC7_INITIAL_VALUE,DIO_u8_PC6_INITIAL_VALUE,DIO_u8_PC5_INITIAL_VALUE,DIO_u8_PC4_INITIAL_VALUE,
    1016:	e5 e3       	ldi	r30, 0x35	; 53
    1018:	f0 e0       	ldi	r31, 0x00	; 0
    101a:	10 82       	st	Z, r1
			DIO_u8_PC3_INITIAL_VALUE,DIO_u8_PC2_INITIAL_VALUE,DIO_u8_PC1_INITIAL_VALUE,DIO_u8_PC0_INITIAL_VALUE);
	PORTD_u8_REG = CONC(DIO_u8_PD7_INITIAL_VALUE,DIO_u8_PD6_INITIAL_VALUE,DIO_u8_PD5_INITIAL_VALUE,DIO_u8_PD4_INITIAL_VALUE,
    101c:	e2 e3       	ldi	r30, 0x32	; 50
    101e:	f0 e0       	ldi	r31, 0x00	; 0
    1020:	10 82       	st	Z, r1
			DIO_u8_PD3_INITIAL_VALUE,DIO_u8_PD2_INITIAL_VALUE,DIO_u8_PD1_INITIAL_VALUE,DIO_u8_PD0_INITIAL_VALUE);
}
    1022:	cf 91       	pop	r28
    1024:	df 91       	pop	r29
    1026:	08 95       	ret

00001028 <DIO_u8SetPinDirection>:

u8 DIO_u8SetPinDirection	(u8 Copy_u8PortId , u8 Copy_u8PinId , u8 Copy_u8PinDirection)
{
    1028:	df 93       	push	r29
    102a:	cf 93       	push	r28
    102c:	cd b7       	in	r28, 0x3d	; 61
    102e:	de b7       	in	r29, 0x3e	; 62
    1030:	2e 97       	sbiw	r28, 0x0e	; 14
    1032:	0f b6       	in	r0, 0x3f	; 63
    1034:	f8 94       	cli
    1036:	de bf       	out	0x3e, r29	; 62
    1038:	0f be       	out	0x3f, r0	; 63
    103a:	cd bf       	out	0x3d, r28	; 61
    103c:	8a 83       	std	Y+2, r24	; 0x02
    103e:	6b 83       	std	Y+3, r22	; 0x03
    1040:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorStatus = STD_TYPES_OK;
    1042:	81 e0       	ldi	r24, 0x01	; 1
    1044:	89 83       	std	Y+1, r24	; 0x01

	/* Check 1- Valid Port ID
             2- Valid Pin ID	
			 3- Valid Pin Direction*/
	if((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PinId<= DIO_u8_PIN7) && ((Copy_u8PinDirection == DIO_u8_INPUT) || (Copy_u8PinDirection == DIO_u8_OUTPUT)))
    1046:	8a 81       	ldd	r24, Y+2	; 0x02
    1048:	84 30       	cpi	r24, 0x04	; 4
    104a:	08 f0       	brcs	.+2      	; 0x104e <DIO_u8SetPinDirection+0x26>
    104c:	0d c1       	rjmp	.+538    	; 0x1268 <DIO_u8SetPinDirection+0x240>
    104e:	8b 81       	ldd	r24, Y+3	; 0x03
    1050:	88 30       	cpi	r24, 0x08	; 8
    1052:	08 f0       	brcs	.+2      	; 0x1056 <DIO_u8SetPinDirection+0x2e>
    1054:	09 c1       	rjmp	.+530    	; 0x1268 <DIO_u8SetPinDirection+0x240>
    1056:	8c 81       	ldd	r24, Y+4	; 0x04
    1058:	88 23       	and	r24, r24
    105a:	21 f0       	breq	.+8      	; 0x1064 <DIO_u8SetPinDirection+0x3c>
    105c:	8c 81       	ldd	r24, Y+4	; 0x04
    105e:	81 30       	cpi	r24, 0x01	; 1
    1060:	09 f0       	breq	.+2      	; 0x1064 <DIO_u8SetPinDirection+0x3c>
    1062:	02 c1       	rjmp	.+516    	; 0x1268 <DIO_u8SetPinDirection+0x240>
	{
		switch(Copy_u8PortId)
    1064:	8a 81       	ldd	r24, Y+2	; 0x02
    1066:	28 2f       	mov	r18, r24
    1068:	30 e0       	ldi	r19, 0x00	; 0
    106a:	3e 87       	std	Y+14, r19	; 0x0e
    106c:	2d 87       	std	Y+13, r18	; 0x0d
    106e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1070:	9e 85       	ldd	r25, Y+14	; 0x0e
    1072:	81 30       	cpi	r24, 0x01	; 1
    1074:	91 05       	cpc	r25, r1
    1076:	09 f4       	brne	.+2      	; 0x107a <DIO_u8SetPinDirection+0x52>
    1078:	4f c0       	rjmp	.+158    	; 0x1118 <DIO_u8SetPinDirection+0xf0>
    107a:	2d 85       	ldd	r18, Y+13	; 0x0d
    107c:	3e 85       	ldd	r19, Y+14	; 0x0e
    107e:	22 30       	cpi	r18, 0x02	; 2
    1080:	31 05       	cpc	r19, r1
    1082:	2c f4       	brge	.+10     	; 0x108e <DIO_u8SetPinDirection+0x66>
    1084:	8d 85       	ldd	r24, Y+13	; 0x0d
    1086:	9e 85       	ldd	r25, Y+14	; 0x0e
    1088:	00 97       	sbiw	r24, 0x00	; 0
    108a:	71 f0       	breq	.+28     	; 0x10a8 <DIO_u8SetPinDirection+0x80>
    108c:	ee c0       	rjmp	.+476    	; 0x126a <DIO_u8SetPinDirection+0x242>
    108e:	2d 85       	ldd	r18, Y+13	; 0x0d
    1090:	3e 85       	ldd	r19, Y+14	; 0x0e
    1092:	22 30       	cpi	r18, 0x02	; 2
    1094:	31 05       	cpc	r19, r1
    1096:	09 f4       	brne	.+2      	; 0x109a <DIO_u8SetPinDirection+0x72>
    1098:	77 c0       	rjmp	.+238    	; 0x1188 <DIO_u8SetPinDirection+0x160>
    109a:	8d 85       	ldd	r24, Y+13	; 0x0d
    109c:	9e 85       	ldd	r25, Y+14	; 0x0e
    109e:	83 30       	cpi	r24, 0x03	; 3
    10a0:	91 05       	cpc	r25, r1
    10a2:	09 f4       	brne	.+2      	; 0x10a6 <DIO_u8SetPinDirection+0x7e>
    10a4:	a9 c0       	rjmp	.+338    	; 0x11f8 <DIO_u8SetPinDirection+0x1d0>
    10a6:	e1 c0       	rjmp	.+450    	; 0x126a <DIO_u8SetPinDirection+0x242>
		{
		case DIO_u8_PORTA:
			switch(Copy_u8PinDirection)
    10a8:	8c 81       	ldd	r24, Y+4	; 0x04
    10aa:	28 2f       	mov	r18, r24
    10ac:	30 e0       	ldi	r19, 0x00	; 0
    10ae:	3c 87       	std	Y+12, r19	; 0x0c
    10b0:	2b 87       	std	Y+11, r18	; 0x0b
    10b2:	8b 85       	ldd	r24, Y+11	; 0x0b
    10b4:	9c 85       	ldd	r25, Y+12	; 0x0c
    10b6:	00 97       	sbiw	r24, 0x00	; 0
    10b8:	31 f0       	breq	.+12     	; 0x10c6 <DIO_u8SetPinDirection+0x9e>
    10ba:	2b 85       	ldd	r18, Y+11	; 0x0b
    10bc:	3c 85       	ldd	r19, Y+12	; 0x0c
    10be:	21 30       	cpi	r18, 0x01	; 1
    10c0:	31 05       	cpc	r19, r1
    10c2:	b1 f0       	breq	.+44     	; 0x10f0 <DIO_u8SetPinDirection+0xc8>
    10c4:	d2 c0       	rjmp	.+420    	; 0x126a <DIO_u8SetPinDirection+0x242>
			{
			case DIO_u8_INPUT:
				CLR_BIT(DDRA_u8_REG,Copy_u8PinId);
    10c6:	aa e3       	ldi	r26, 0x3A	; 58
    10c8:	b0 e0       	ldi	r27, 0x00	; 0
    10ca:	ea e3       	ldi	r30, 0x3A	; 58
    10cc:	f0 e0       	ldi	r31, 0x00	; 0
    10ce:	80 81       	ld	r24, Z
    10d0:	48 2f       	mov	r20, r24
    10d2:	8b 81       	ldd	r24, Y+3	; 0x03
    10d4:	28 2f       	mov	r18, r24
    10d6:	30 e0       	ldi	r19, 0x00	; 0
    10d8:	81 e0       	ldi	r24, 0x01	; 1
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	02 2e       	mov	r0, r18
    10de:	02 c0       	rjmp	.+4      	; 0x10e4 <DIO_u8SetPinDirection+0xbc>
    10e0:	88 0f       	add	r24, r24
    10e2:	99 1f       	adc	r25, r25
    10e4:	0a 94       	dec	r0
    10e6:	e2 f7       	brpl	.-8      	; 0x10e0 <DIO_u8SetPinDirection+0xb8>
    10e8:	80 95       	com	r24
    10ea:	84 23       	and	r24, r20
    10ec:	8c 93       	st	X, r24
    10ee:	bd c0       	rjmp	.+378    	; 0x126a <DIO_u8SetPinDirection+0x242>
				break;
			case DIO_u8_OUTPUT:
				SET_BIT(DDRA_u8_REG,Copy_u8PinId);
    10f0:	aa e3       	ldi	r26, 0x3A	; 58
    10f2:	b0 e0       	ldi	r27, 0x00	; 0
    10f4:	ea e3       	ldi	r30, 0x3A	; 58
    10f6:	f0 e0       	ldi	r31, 0x00	; 0
    10f8:	80 81       	ld	r24, Z
    10fa:	48 2f       	mov	r20, r24
    10fc:	8b 81       	ldd	r24, Y+3	; 0x03
    10fe:	28 2f       	mov	r18, r24
    1100:	30 e0       	ldi	r19, 0x00	; 0
    1102:	81 e0       	ldi	r24, 0x01	; 1
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	02 2e       	mov	r0, r18
    1108:	02 c0       	rjmp	.+4      	; 0x110e <DIO_u8SetPinDirection+0xe6>
    110a:	88 0f       	add	r24, r24
    110c:	99 1f       	adc	r25, r25
    110e:	0a 94       	dec	r0
    1110:	e2 f7       	brpl	.-8      	; 0x110a <DIO_u8SetPinDirection+0xe2>
    1112:	84 2b       	or	r24, r20
    1114:	8c 93       	st	X, r24
    1116:	a9 c0       	rjmp	.+338    	; 0x126a <DIO_u8SetPinDirection+0x242>
				break;
			}
			break;
			case DIO_u8_PORTB:
				switch(Copy_u8PinDirection)
    1118:	8c 81       	ldd	r24, Y+4	; 0x04
    111a:	28 2f       	mov	r18, r24
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	3a 87       	std	Y+10, r19	; 0x0a
    1120:	29 87       	std	Y+9, r18	; 0x09
    1122:	89 85       	ldd	r24, Y+9	; 0x09
    1124:	9a 85       	ldd	r25, Y+10	; 0x0a
    1126:	00 97       	sbiw	r24, 0x00	; 0
    1128:	31 f0       	breq	.+12     	; 0x1136 <DIO_u8SetPinDirection+0x10e>
    112a:	29 85       	ldd	r18, Y+9	; 0x09
    112c:	3a 85       	ldd	r19, Y+10	; 0x0a
    112e:	21 30       	cpi	r18, 0x01	; 1
    1130:	31 05       	cpc	r19, r1
    1132:	b1 f0       	breq	.+44     	; 0x1160 <DIO_u8SetPinDirection+0x138>
    1134:	9a c0       	rjmp	.+308    	; 0x126a <DIO_u8SetPinDirection+0x242>
				{
				case DIO_u8_INPUT:
					CLR_BIT(DDRB_u8_REG,Copy_u8PinId);
    1136:	a7 e3       	ldi	r26, 0x37	; 55
    1138:	b0 e0       	ldi	r27, 0x00	; 0
    113a:	e7 e3       	ldi	r30, 0x37	; 55
    113c:	f0 e0       	ldi	r31, 0x00	; 0
    113e:	80 81       	ld	r24, Z
    1140:	48 2f       	mov	r20, r24
    1142:	8b 81       	ldd	r24, Y+3	; 0x03
    1144:	28 2f       	mov	r18, r24
    1146:	30 e0       	ldi	r19, 0x00	; 0
    1148:	81 e0       	ldi	r24, 0x01	; 1
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	02 2e       	mov	r0, r18
    114e:	02 c0       	rjmp	.+4      	; 0x1154 <DIO_u8SetPinDirection+0x12c>
    1150:	88 0f       	add	r24, r24
    1152:	99 1f       	adc	r25, r25
    1154:	0a 94       	dec	r0
    1156:	e2 f7       	brpl	.-8      	; 0x1150 <DIO_u8SetPinDirection+0x128>
    1158:	80 95       	com	r24
    115a:	84 23       	and	r24, r20
    115c:	8c 93       	st	X, r24
    115e:	85 c0       	rjmp	.+266    	; 0x126a <DIO_u8SetPinDirection+0x242>
					break;
				case DIO_u8_OUTPUT:
					SET_BIT(DDRB_u8_REG,Copy_u8PinId);
    1160:	a7 e3       	ldi	r26, 0x37	; 55
    1162:	b0 e0       	ldi	r27, 0x00	; 0
    1164:	e7 e3       	ldi	r30, 0x37	; 55
    1166:	f0 e0       	ldi	r31, 0x00	; 0
    1168:	80 81       	ld	r24, Z
    116a:	48 2f       	mov	r20, r24
    116c:	8b 81       	ldd	r24, Y+3	; 0x03
    116e:	28 2f       	mov	r18, r24
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	81 e0       	ldi	r24, 0x01	; 1
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	02 2e       	mov	r0, r18
    1178:	02 c0       	rjmp	.+4      	; 0x117e <DIO_u8SetPinDirection+0x156>
    117a:	88 0f       	add	r24, r24
    117c:	99 1f       	adc	r25, r25
    117e:	0a 94       	dec	r0
    1180:	e2 f7       	brpl	.-8      	; 0x117a <DIO_u8SetPinDirection+0x152>
    1182:	84 2b       	or	r24, r20
    1184:	8c 93       	st	X, r24
    1186:	71 c0       	rjmp	.+226    	; 0x126a <DIO_u8SetPinDirection+0x242>
					break;
				}
				break;
				case DIO_u8_PORTC:
					switch(Copy_u8PinDirection)
    1188:	8c 81       	ldd	r24, Y+4	; 0x04
    118a:	28 2f       	mov	r18, r24
    118c:	30 e0       	ldi	r19, 0x00	; 0
    118e:	38 87       	std	Y+8, r19	; 0x08
    1190:	2f 83       	std	Y+7, r18	; 0x07
    1192:	8f 81       	ldd	r24, Y+7	; 0x07
    1194:	98 85       	ldd	r25, Y+8	; 0x08
    1196:	00 97       	sbiw	r24, 0x00	; 0
    1198:	31 f0       	breq	.+12     	; 0x11a6 <DIO_u8SetPinDirection+0x17e>
    119a:	2f 81       	ldd	r18, Y+7	; 0x07
    119c:	38 85       	ldd	r19, Y+8	; 0x08
    119e:	21 30       	cpi	r18, 0x01	; 1
    11a0:	31 05       	cpc	r19, r1
    11a2:	b1 f0       	breq	.+44     	; 0x11d0 <DIO_u8SetPinDirection+0x1a8>
    11a4:	62 c0       	rjmp	.+196    	; 0x126a <DIO_u8SetPinDirection+0x242>
					{
					case DIO_u8_INPUT:
						CLR_BIT(DDRC_u8_REG,Copy_u8PinId);
    11a6:	a4 e3       	ldi	r26, 0x34	; 52
    11a8:	b0 e0       	ldi	r27, 0x00	; 0
    11aa:	e4 e3       	ldi	r30, 0x34	; 52
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	80 81       	ld	r24, Z
    11b0:	48 2f       	mov	r20, r24
    11b2:	8b 81       	ldd	r24, Y+3	; 0x03
    11b4:	28 2f       	mov	r18, r24
    11b6:	30 e0       	ldi	r19, 0x00	; 0
    11b8:	81 e0       	ldi	r24, 0x01	; 1
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	02 2e       	mov	r0, r18
    11be:	02 c0       	rjmp	.+4      	; 0x11c4 <DIO_u8SetPinDirection+0x19c>
    11c0:	88 0f       	add	r24, r24
    11c2:	99 1f       	adc	r25, r25
    11c4:	0a 94       	dec	r0
    11c6:	e2 f7       	brpl	.-8      	; 0x11c0 <DIO_u8SetPinDirection+0x198>
    11c8:	80 95       	com	r24
    11ca:	84 23       	and	r24, r20
    11cc:	8c 93       	st	X, r24
    11ce:	4d c0       	rjmp	.+154    	; 0x126a <DIO_u8SetPinDirection+0x242>
						break;
					case DIO_u8_OUTPUT:
						SET_BIT(DDRC_u8_REG,Copy_u8PinId);
    11d0:	a4 e3       	ldi	r26, 0x34	; 52
    11d2:	b0 e0       	ldi	r27, 0x00	; 0
    11d4:	e4 e3       	ldi	r30, 0x34	; 52
    11d6:	f0 e0       	ldi	r31, 0x00	; 0
    11d8:	80 81       	ld	r24, Z
    11da:	48 2f       	mov	r20, r24
    11dc:	8b 81       	ldd	r24, Y+3	; 0x03
    11de:	28 2f       	mov	r18, r24
    11e0:	30 e0       	ldi	r19, 0x00	; 0
    11e2:	81 e0       	ldi	r24, 0x01	; 1
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	02 2e       	mov	r0, r18
    11e8:	02 c0       	rjmp	.+4      	; 0x11ee <DIO_u8SetPinDirection+0x1c6>
    11ea:	88 0f       	add	r24, r24
    11ec:	99 1f       	adc	r25, r25
    11ee:	0a 94       	dec	r0
    11f0:	e2 f7       	brpl	.-8      	; 0x11ea <DIO_u8SetPinDirection+0x1c2>
    11f2:	84 2b       	or	r24, r20
    11f4:	8c 93       	st	X, r24
    11f6:	39 c0       	rjmp	.+114    	; 0x126a <DIO_u8SetPinDirection+0x242>
						break;
					}
					break;
					case DIO_u8_PORTD:
						switch(Copy_u8PinDirection)
    11f8:	8c 81       	ldd	r24, Y+4	; 0x04
    11fa:	28 2f       	mov	r18, r24
    11fc:	30 e0       	ldi	r19, 0x00	; 0
    11fe:	3e 83       	std	Y+6, r19	; 0x06
    1200:	2d 83       	std	Y+5, r18	; 0x05
    1202:	8d 81       	ldd	r24, Y+5	; 0x05
    1204:	9e 81       	ldd	r25, Y+6	; 0x06
    1206:	00 97       	sbiw	r24, 0x00	; 0
    1208:	31 f0       	breq	.+12     	; 0x1216 <DIO_u8SetPinDirection+0x1ee>
    120a:	2d 81       	ldd	r18, Y+5	; 0x05
    120c:	3e 81       	ldd	r19, Y+6	; 0x06
    120e:	21 30       	cpi	r18, 0x01	; 1
    1210:	31 05       	cpc	r19, r1
    1212:	b1 f0       	breq	.+44     	; 0x1240 <DIO_u8SetPinDirection+0x218>
    1214:	2a c0       	rjmp	.+84     	; 0x126a <DIO_u8SetPinDirection+0x242>
						{
						case DIO_u8_INPUT:
							CLR_BIT(DDRD_u8_REG,Copy_u8PinId);
    1216:	a1 e3       	ldi	r26, 0x31	; 49
    1218:	b0 e0       	ldi	r27, 0x00	; 0
    121a:	e1 e3       	ldi	r30, 0x31	; 49
    121c:	f0 e0       	ldi	r31, 0x00	; 0
    121e:	80 81       	ld	r24, Z
    1220:	48 2f       	mov	r20, r24
    1222:	8b 81       	ldd	r24, Y+3	; 0x03
    1224:	28 2f       	mov	r18, r24
    1226:	30 e0       	ldi	r19, 0x00	; 0
    1228:	81 e0       	ldi	r24, 0x01	; 1
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	02 2e       	mov	r0, r18
    122e:	02 c0       	rjmp	.+4      	; 0x1234 <DIO_u8SetPinDirection+0x20c>
    1230:	88 0f       	add	r24, r24
    1232:	99 1f       	adc	r25, r25
    1234:	0a 94       	dec	r0
    1236:	e2 f7       	brpl	.-8      	; 0x1230 <DIO_u8SetPinDirection+0x208>
    1238:	80 95       	com	r24
    123a:	84 23       	and	r24, r20
    123c:	8c 93       	st	X, r24
    123e:	15 c0       	rjmp	.+42     	; 0x126a <DIO_u8SetPinDirection+0x242>
							break;
						case DIO_u8_OUTPUT:
							SET_BIT(DDRD_u8_REG,Copy_u8PinId);
    1240:	a1 e3       	ldi	r26, 0x31	; 49
    1242:	b0 e0       	ldi	r27, 0x00	; 0
    1244:	e1 e3       	ldi	r30, 0x31	; 49
    1246:	f0 e0       	ldi	r31, 0x00	; 0
    1248:	80 81       	ld	r24, Z
    124a:	48 2f       	mov	r20, r24
    124c:	8b 81       	ldd	r24, Y+3	; 0x03
    124e:	28 2f       	mov	r18, r24
    1250:	30 e0       	ldi	r19, 0x00	; 0
    1252:	81 e0       	ldi	r24, 0x01	; 1
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	02 2e       	mov	r0, r18
    1258:	02 c0       	rjmp	.+4      	; 0x125e <DIO_u8SetPinDirection+0x236>
    125a:	88 0f       	add	r24, r24
    125c:	99 1f       	adc	r25, r25
    125e:	0a 94       	dec	r0
    1260:	e2 f7       	brpl	.-8      	; 0x125a <DIO_u8SetPinDirection+0x232>
    1262:	84 2b       	or	r24, r20
    1264:	8c 93       	st	X, r24
    1266:	01 c0       	rjmp	.+2      	; 0x126a <DIO_u8SetPinDirection+0x242>
						break;
		}
	}
	else
	{
		Local_u8ErrorStatus = STD_TYPES_NOK;
    1268:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorStatus;
    126a:	89 81       	ldd	r24, Y+1	; 0x01
}
    126c:	2e 96       	adiw	r28, 0x0e	; 14
    126e:	0f b6       	in	r0, 0x3f	; 63
    1270:	f8 94       	cli
    1272:	de bf       	out	0x3e, r29	; 62
    1274:	0f be       	out	0x3f, r0	; 63
    1276:	cd bf       	out	0x3d, r28	; 61
    1278:	cf 91       	pop	r28
    127a:	df 91       	pop	r29
    127c:	08 95       	ret

0000127e <DIO_u8SetPinValue>:

	u8 DIO_u8SetPinValue		(u8 Copy_u8PortId , u8 Copy_u8PinId , u8 Copy_u8PinValue    )
	{
    127e:	df 93       	push	r29
    1280:	cf 93       	push	r28
    1282:	cd b7       	in	r28, 0x3d	; 61
    1284:	de b7       	in	r29, 0x3e	; 62
    1286:	2e 97       	sbiw	r28, 0x0e	; 14
    1288:	0f b6       	in	r0, 0x3f	; 63
    128a:	f8 94       	cli
    128c:	de bf       	out	0x3e, r29	; 62
    128e:	0f be       	out	0x3f, r0	; 63
    1290:	cd bf       	out	0x3d, r28	; 61
    1292:	8a 83       	std	Y+2, r24	; 0x02
    1294:	6b 83       	std	Y+3, r22	; 0x03
    1296:	4c 83       	std	Y+4, r20	; 0x04
		u8 Local_u8ErrorStatus = STD_TYPES_OK;
    1298:	81 e0       	ldi	r24, 0x01	; 1
    129a:	89 83       	std	Y+1, r24	; 0x01
		if((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PinId<= DIO_u8_PIN7) && ((Copy_u8PinValue == DIO_u8_LOW) || (Copy_u8PinValue == DIO_u8_HIGH)))
    129c:	8a 81       	ldd	r24, Y+2	; 0x02
    129e:	84 30       	cpi	r24, 0x04	; 4
    12a0:	08 f0       	brcs	.+2      	; 0x12a4 <DIO_u8SetPinValue+0x26>
    12a2:	0d c1       	rjmp	.+538    	; 0x14be <DIO_u8SetPinValue+0x240>
    12a4:	8b 81       	ldd	r24, Y+3	; 0x03
    12a6:	88 30       	cpi	r24, 0x08	; 8
    12a8:	08 f0       	brcs	.+2      	; 0x12ac <DIO_u8SetPinValue+0x2e>
    12aa:	09 c1       	rjmp	.+530    	; 0x14be <DIO_u8SetPinValue+0x240>
    12ac:	8c 81       	ldd	r24, Y+4	; 0x04
    12ae:	88 23       	and	r24, r24
    12b0:	21 f0       	breq	.+8      	; 0x12ba <DIO_u8SetPinValue+0x3c>
    12b2:	8c 81       	ldd	r24, Y+4	; 0x04
    12b4:	81 30       	cpi	r24, 0x01	; 1
    12b6:	09 f0       	breq	.+2      	; 0x12ba <DIO_u8SetPinValue+0x3c>
    12b8:	02 c1       	rjmp	.+516    	; 0x14be <DIO_u8SetPinValue+0x240>
		{
			switch(Copy_u8PortId)
    12ba:	8a 81       	ldd	r24, Y+2	; 0x02
    12bc:	28 2f       	mov	r18, r24
    12be:	30 e0       	ldi	r19, 0x00	; 0
    12c0:	3e 87       	std	Y+14, r19	; 0x0e
    12c2:	2d 87       	std	Y+13, r18	; 0x0d
    12c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    12c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    12c8:	81 30       	cpi	r24, 0x01	; 1
    12ca:	91 05       	cpc	r25, r1
    12cc:	09 f4       	brne	.+2      	; 0x12d0 <DIO_u8SetPinValue+0x52>
    12ce:	4f c0       	rjmp	.+158    	; 0x136e <DIO_u8SetPinValue+0xf0>
    12d0:	2d 85       	ldd	r18, Y+13	; 0x0d
    12d2:	3e 85       	ldd	r19, Y+14	; 0x0e
    12d4:	22 30       	cpi	r18, 0x02	; 2
    12d6:	31 05       	cpc	r19, r1
    12d8:	2c f4       	brge	.+10     	; 0x12e4 <DIO_u8SetPinValue+0x66>
    12da:	8d 85       	ldd	r24, Y+13	; 0x0d
    12dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    12de:	00 97       	sbiw	r24, 0x00	; 0
    12e0:	71 f0       	breq	.+28     	; 0x12fe <DIO_u8SetPinValue+0x80>
    12e2:	ee c0       	rjmp	.+476    	; 0x14c0 <DIO_u8SetPinValue+0x242>
    12e4:	2d 85       	ldd	r18, Y+13	; 0x0d
    12e6:	3e 85       	ldd	r19, Y+14	; 0x0e
    12e8:	22 30       	cpi	r18, 0x02	; 2
    12ea:	31 05       	cpc	r19, r1
    12ec:	09 f4       	brne	.+2      	; 0x12f0 <DIO_u8SetPinValue+0x72>
    12ee:	77 c0       	rjmp	.+238    	; 0x13de <DIO_u8SetPinValue+0x160>
    12f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    12f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    12f4:	83 30       	cpi	r24, 0x03	; 3
    12f6:	91 05       	cpc	r25, r1
    12f8:	09 f4       	brne	.+2      	; 0x12fc <DIO_u8SetPinValue+0x7e>
    12fa:	a9 c0       	rjmp	.+338    	; 0x144e <DIO_u8SetPinValue+0x1d0>
    12fc:	e1 c0       	rjmp	.+450    	; 0x14c0 <DIO_u8SetPinValue+0x242>
			{
			case DIO_u8_PORTA:
				switch(Copy_u8PinValue)
    12fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1300:	28 2f       	mov	r18, r24
    1302:	30 e0       	ldi	r19, 0x00	; 0
    1304:	3c 87       	std	Y+12, r19	; 0x0c
    1306:	2b 87       	std	Y+11, r18	; 0x0b
    1308:	8b 85       	ldd	r24, Y+11	; 0x0b
    130a:	9c 85       	ldd	r25, Y+12	; 0x0c
    130c:	00 97       	sbiw	r24, 0x00	; 0
    130e:	31 f0       	breq	.+12     	; 0x131c <DIO_u8SetPinValue+0x9e>
    1310:	2b 85       	ldd	r18, Y+11	; 0x0b
    1312:	3c 85       	ldd	r19, Y+12	; 0x0c
    1314:	21 30       	cpi	r18, 0x01	; 1
    1316:	31 05       	cpc	r19, r1
    1318:	b1 f0       	breq	.+44     	; 0x1346 <DIO_u8SetPinValue+0xc8>
    131a:	d2 c0       	rjmp	.+420    	; 0x14c0 <DIO_u8SetPinValue+0x242>
				{
				case DIO_u8_LOW:
					CLR_BIT(PORTA_u8_REG,Copy_u8PinId);
    131c:	ab e3       	ldi	r26, 0x3B	; 59
    131e:	b0 e0       	ldi	r27, 0x00	; 0
    1320:	eb e3       	ldi	r30, 0x3B	; 59
    1322:	f0 e0       	ldi	r31, 0x00	; 0
    1324:	80 81       	ld	r24, Z
    1326:	48 2f       	mov	r20, r24
    1328:	8b 81       	ldd	r24, Y+3	; 0x03
    132a:	28 2f       	mov	r18, r24
    132c:	30 e0       	ldi	r19, 0x00	; 0
    132e:	81 e0       	ldi	r24, 0x01	; 1
    1330:	90 e0       	ldi	r25, 0x00	; 0
    1332:	02 2e       	mov	r0, r18
    1334:	02 c0       	rjmp	.+4      	; 0x133a <DIO_u8SetPinValue+0xbc>
    1336:	88 0f       	add	r24, r24
    1338:	99 1f       	adc	r25, r25
    133a:	0a 94       	dec	r0
    133c:	e2 f7       	brpl	.-8      	; 0x1336 <DIO_u8SetPinValue+0xb8>
    133e:	80 95       	com	r24
    1340:	84 23       	and	r24, r20
    1342:	8c 93       	st	X, r24
    1344:	bd c0       	rjmp	.+378    	; 0x14c0 <DIO_u8SetPinValue+0x242>
					break;
				case DIO_u8_HIGH:
					SET_BIT(PORTA_u8_REG,Copy_u8PinId);
    1346:	ab e3       	ldi	r26, 0x3B	; 59
    1348:	b0 e0       	ldi	r27, 0x00	; 0
    134a:	eb e3       	ldi	r30, 0x3B	; 59
    134c:	f0 e0       	ldi	r31, 0x00	; 0
    134e:	80 81       	ld	r24, Z
    1350:	48 2f       	mov	r20, r24
    1352:	8b 81       	ldd	r24, Y+3	; 0x03
    1354:	28 2f       	mov	r18, r24
    1356:	30 e0       	ldi	r19, 0x00	; 0
    1358:	81 e0       	ldi	r24, 0x01	; 1
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	02 2e       	mov	r0, r18
    135e:	02 c0       	rjmp	.+4      	; 0x1364 <DIO_u8SetPinValue+0xe6>
    1360:	88 0f       	add	r24, r24
    1362:	99 1f       	adc	r25, r25
    1364:	0a 94       	dec	r0
    1366:	e2 f7       	brpl	.-8      	; 0x1360 <DIO_u8SetPinValue+0xe2>
    1368:	84 2b       	or	r24, r20
    136a:	8c 93       	st	X, r24
    136c:	a9 c0       	rjmp	.+338    	; 0x14c0 <DIO_u8SetPinValue+0x242>
					break;
				}
				break;
				case DIO_u8_PORTB:
					switch(Copy_u8PinValue)
    136e:	8c 81       	ldd	r24, Y+4	; 0x04
    1370:	28 2f       	mov	r18, r24
    1372:	30 e0       	ldi	r19, 0x00	; 0
    1374:	3a 87       	std	Y+10, r19	; 0x0a
    1376:	29 87       	std	Y+9, r18	; 0x09
    1378:	89 85       	ldd	r24, Y+9	; 0x09
    137a:	9a 85       	ldd	r25, Y+10	; 0x0a
    137c:	00 97       	sbiw	r24, 0x00	; 0
    137e:	31 f0       	breq	.+12     	; 0x138c <DIO_u8SetPinValue+0x10e>
    1380:	29 85       	ldd	r18, Y+9	; 0x09
    1382:	3a 85       	ldd	r19, Y+10	; 0x0a
    1384:	21 30       	cpi	r18, 0x01	; 1
    1386:	31 05       	cpc	r19, r1
    1388:	b1 f0       	breq	.+44     	; 0x13b6 <DIO_u8SetPinValue+0x138>
    138a:	9a c0       	rjmp	.+308    	; 0x14c0 <DIO_u8SetPinValue+0x242>
					{
					case DIO_u8_LOW:
						CLR_BIT(PORTB_u8_REG,Copy_u8PinId);
    138c:	a8 e3       	ldi	r26, 0x38	; 56
    138e:	b0 e0       	ldi	r27, 0x00	; 0
    1390:	e8 e3       	ldi	r30, 0x38	; 56
    1392:	f0 e0       	ldi	r31, 0x00	; 0
    1394:	80 81       	ld	r24, Z
    1396:	48 2f       	mov	r20, r24
    1398:	8b 81       	ldd	r24, Y+3	; 0x03
    139a:	28 2f       	mov	r18, r24
    139c:	30 e0       	ldi	r19, 0x00	; 0
    139e:	81 e0       	ldi	r24, 0x01	; 1
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	02 2e       	mov	r0, r18
    13a4:	02 c0       	rjmp	.+4      	; 0x13aa <DIO_u8SetPinValue+0x12c>
    13a6:	88 0f       	add	r24, r24
    13a8:	99 1f       	adc	r25, r25
    13aa:	0a 94       	dec	r0
    13ac:	e2 f7       	brpl	.-8      	; 0x13a6 <DIO_u8SetPinValue+0x128>
    13ae:	80 95       	com	r24
    13b0:	84 23       	and	r24, r20
    13b2:	8c 93       	st	X, r24
    13b4:	85 c0       	rjmp	.+266    	; 0x14c0 <DIO_u8SetPinValue+0x242>
						break;
					case DIO_u8_HIGH:
						SET_BIT(PORTB_u8_REG,Copy_u8PinId);
    13b6:	a8 e3       	ldi	r26, 0x38	; 56
    13b8:	b0 e0       	ldi	r27, 0x00	; 0
    13ba:	e8 e3       	ldi	r30, 0x38	; 56
    13bc:	f0 e0       	ldi	r31, 0x00	; 0
    13be:	80 81       	ld	r24, Z
    13c0:	48 2f       	mov	r20, r24
    13c2:	8b 81       	ldd	r24, Y+3	; 0x03
    13c4:	28 2f       	mov	r18, r24
    13c6:	30 e0       	ldi	r19, 0x00	; 0
    13c8:	81 e0       	ldi	r24, 0x01	; 1
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	02 2e       	mov	r0, r18
    13ce:	02 c0       	rjmp	.+4      	; 0x13d4 <DIO_u8SetPinValue+0x156>
    13d0:	88 0f       	add	r24, r24
    13d2:	99 1f       	adc	r25, r25
    13d4:	0a 94       	dec	r0
    13d6:	e2 f7       	brpl	.-8      	; 0x13d0 <DIO_u8SetPinValue+0x152>
    13d8:	84 2b       	or	r24, r20
    13da:	8c 93       	st	X, r24
    13dc:	71 c0       	rjmp	.+226    	; 0x14c0 <DIO_u8SetPinValue+0x242>
						break;
					}
					break;
					case DIO_u8_PORTC:
						switch(Copy_u8PinValue)
    13de:	8c 81       	ldd	r24, Y+4	; 0x04
    13e0:	28 2f       	mov	r18, r24
    13e2:	30 e0       	ldi	r19, 0x00	; 0
    13e4:	38 87       	std	Y+8, r19	; 0x08
    13e6:	2f 83       	std	Y+7, r18	; 0x07
    13e8:	8f 81       	ldd	r24, Y+7	; 0x07
    13ea:	98 85       	ldd	r25, Y+8	; 0x08
    13ec:	00 97       	sbiw	r24, 0x00	; 0
    13ee:	31 f0       	breq	.+12     	; 0x13fc <DIO_u8SetPinValue+0x17e>
    13f0:	2f 81       	ldd	r18, Y+7	; 0x07
    13f2:	38 85       	ldd	r19, Y+8	; 0x08
    13f4:	21 30       	cpi	r18, 0x01	; 1
    13f6:	31 05       	cpc	r19, r1
    13f8:	b1 f0       	breq	.+44     	; 0x1426 <DIO_u8SetPinValue+0x1a8>
    13fa:	62 c0       	rjmp	.+196    	; 0x14c0 <DIO_u8SetPinValue+0x242>
						{
						case DIO_u8_LOW:
							CLR_BIT(PORTC_u8_REG,Copy_u8PinId);
    13fc:	a5 e3       	ldi	r26, 0x35	; 53
    13fe:	b0 e0       	ldi	r27, 0x00	; 0
    1400:	e5 e3       	ldi	r30, 0x35	; 53
    1402:	f0 e0       	ldi	r31, 0x00	; 0
    1404:	80 81       	ld	r24, Z
    1406:	48 2f       	mov	r20, r24
    1408:	8b 81       	ldd	r24, Y+3	; 0x03
    140a:	28 2f       	mov	r18, r24
    140c:	30 e0       	ldi	r19, 0x00	; 0
    140e:	81 e0       	ldi	r24, 0x01	; 1
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	02 2e       	mov	r0, r18
    1414:	02 c0       	rjmp	.+4      	; 0x141a <DIO_u8SetPinValue+0x19c>
    1416:	88 0f       	add	r24, r24
    1418:	99 1f       	adc	r25, r25
    141a:	0a 94       	dec	r0
    141c:	e2 f7       	brpl	.-8      	; 0x1416 <DIO_u8SetPinValue+0x198>
    141e:	80 95       	com	r24
    1420:	84 23       	and	r24, r20
    1422:	8c 93       	st	X, r24
    1424:	4d c0       	rjmp	.+154    	; 0x14c0 <DIO_u8SetPinValue+0x242>
							break;
						case DIO_u8_HIGH:
							SET_BIT(PORTC_u8_REG,Copy_u8PinId);
    1426:	a5 e3       	ldi	r26, 0x35	; 53
    1428:	b0 e0       	ldi	r27, 0x00	; 0
    142a:	e5 e3       	ldi	r30, 0x35	; 53
    142c:	f0 e0       	ldi	r31, 0x00	; 0
    142e:	80 81       	ld	r24, Z
    1430:	48 2f       	mov	r20, r24
    1432:	8b 81       	ldd	r24, Y+3	; 0x03
    1434:	28 2f       	mov	r18, r24
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	81 e0       	ldi	r24, 0x01	; 1
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	02 2e       	mov	r0, r18
    143e:	02 c0       	rjmp	.+4      	; 0x1444 <DIO_u8SetPinValue+0x1c6>
    1440:	88 0f       	add	r24, r24
    1442:	99 1f       	adc	r25, r25
    1444:	0a 94       	dec	r0
    1446:	e2 f7       	brpl	.-8      	; 0x1440 <DIO_u8SetPinValue+0x1c2>
    1448:	84 2b       	or	r24, r20
    144a:	8c 93       	st	X, r24
    144c:	39 c0       	rjmp	.+114    	; 0x14c0 <DIO_u8SetPinValue+0x242>
							break;
						}
						break;
						case DIO_u8_PORTD:
							switch(Copy_u8PinValue)
    144e:	8c 81       	ldd	r24, Y+4	; 0x04
    1450:	28 2f       	mov	r18, r24
    1452:	30 e0       	ldi	r19, 0x00	; 0
    1454:	3e 83       	std	Y+6, r19	; 0x06
    1456:	2d 83       	std	Y+5, r18	; 0x05
    1458:	8d 81       	ldd	r24, Y+5	; 0x05
    145a:	9e 81       	ldd	r25, Y+6	; 0x06
    145c:	00 97       	sbiw	r24, 0x00	; 0
    145e:	31 f0       	breq	.+12     	; 0x146c <DIO_u8SetPinValue+0x1ee>
    1460:	2d 81       	ldd	r18, Y+5	; 0x05
    1462:	3e 81       	ldd	r19, Y+6	; 0x06
    1464:	21 30       	cpi	r18, 0x01	; 1
    1466:	31 05       	cpc	r19, r1
    1468:	b1 f0       	breq	.+44     	; 0x1496 <DIO_u8SetPinValue+0x218>
    146a:	2a c0       	rjmp	.+84     	; 0x14c0 <DIO_u8SetPinValue+0x242>
							{
							case DIO_u8_LOW:
								CLR_BIT(PORTD_u8_REG,Copy_u8PinId);
    146c:	a2 e3       	ldi	r26, 0x32	; 50
    146e:	b0 e0       	ldi	r27, 0x00	; 0
    1470:	e2 e3       	ldi	r30, 0x32	; 50
    1472:	f0 e0       	ldi	r31, 0x00	; 0
    1474:	80 81       	ld	r24, Z
    1476:	48 2f       	mov	r20, r24
    1478:	8b 81       	ldd	r24, Y+3	; 0x03
    147a:	28 2f       	mov	r18, r24
    147c:	30 e0       	ldi	r19, 0x00	; 0
    147e:	81 e0       	ldi	r24, 0x01	; 1
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	02 2e       	mov	r0, r18
    1484:	02 c0       	rjmp	.+4      	; 0x148a <DIO_u8SetPinValue+0x20c>
    1486:	88 0f       	add	r24, r24
    1488:	99 1f       	adc	r25, r25
    148a:	0a 94       	dec	r0
    148c:	e2 f7       	brpl	.-8      	; 0x1486 <DIO_u8SetPinValue+0x208>
    148e:	80 95       	com	r24
    1490:	84 23       	and	r24, r20
    1492:	8c 93       	st	X, r24
    1494:	15 c0       	rjmp	.+42     	; 0x14c0 <DIO_u8SetPinValue+0x242>
								break;
							case DIO_u8_HIGH:
								SET_BIT(PORTD_u8_REG,Copy_u8PinId);
    1496:	a2 e3       	ldi	r26, 0x32	; 50
    1498:	b0 e0       	ldi	r27, 0x00	; 0
    149a:	e2 e3       	ldi	r30, 0x32	; 50
    149c:	f0 e0       	ldi	r31, 0x00	; 0
    149e:	80 81       	ld	r24, Z
    14a0:	48 2f       	mov	r20, r24
    14a2:	8b 81       	ldd	r24, Y+3	; 0x03
    14a4:	28 2f       	mov	r18, r24
    14a6:	30 e0       	ldi	r19, 0x00	; 0
    14a8:	81 e0       	ldi	r24, 0x01	; 1
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	02 2e       	mov	r0, r18
    14ae:	02 c0       	rjmp	.+4      	; 0x14b4 <DIO_u8SetPinValue+0x236>
    14b0:	88 0f       	add	r24, r24
    14b2:	99 1f       	adc	r25, r25
    14b4:	0a 94       	dec	r0
    14b6:	e2 f7       	brpl	.-8      	; 0x14b0 <DIO_u8SetPinValue+0x232>
    14b8:	84 2b       	or	r24, r20
    14ba:	8c 93       	st	X, r24
    14bc:	01 c0       	rjmp	.+2      	; 0x14c0 <DIO_u8SetPinValue+0x242>

			}
		}
		else
		{
			Local_u8ErrorStatus = STD_TYPES_NOK;
    14be:	19 82       	std	Y+1, r1	; 0x01
		}
		return Local_u8ErrorStatus;
    14c0:	89 81       	ldd	r24, Y+1	; 0x01

	}
    14c2:	2e 96       	adiw	r28, 0x0e	; 14
    14c4:	0f b6       	in	r0, 0x3f	; 63
    14c6:	f8 94       	cli
    14c8:	de bf       	out	0x3e, r29	; 62
    14ca:	0f be       	out	0x3f, r0	; 63
    14cc:	cd bf       	out	0x3d, r28	; 61
    14ce:	cf 91       	pop	r28
    14d0:	df 91       	pop	r29
    14d2:	08 95       	ret

000014d4 <DIO_u8GetPinValue>:

	u8 DIO_u8GetPinValue		(u8 Copy_u8PortId , u8 Copy_u8PinId , u8 *Copy_pu8ReturnedPinValue)
	{
    14d4:	df 93       	push	r29
    14d6:	cf 93       	push	r28
    14d8:	cd b7       	in	r28, 0x3d	; 61
    14da:	de b7       	in	r29, 0x3e	; 62
    14dc:	27 97       	sbiw	r28, 0x07	; 7
    14de:	0f b6       	in	r0, 0x3f	; 63
    14e0:	f8 94       	cli
    14e2:	de bf       	out	0x3e, r29	; 62
    14e4:	0f be       	out	0x3f, r0	; 63
    14e6:	cd bf       	out	0x3d, r28	; 61
    14e8:	8a 83       	std	Y+2, r24	; 0x02
    14ea:	6b 83       	std	Y+3, r22	; 0x03
    14ec:	5d 83       	std	Y+5, r21	; 0x05
    14ee:	4c 83       	std	Y+4, r20	; 0x04
		u8 Local_u8ErrorStatus = STD_TYPES_OK;
    14f0:	81 e0       	ldi	r24, 0x01	; 1
    14f2:	89 83       	std	Y+1, r24	; 0x01
		if((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PinId<= DIO_u8_PIN7) && (Copy_pu8ReturnedPinValue != NULL))
    14f4:	8a 81       	ldd	r24, Y+2	; 0x02
    14f6:	84 30       	cpi	r24, 0x04	; 4
    14f8:	08 f0       	brcs	.+2      	; 0x14fc <DIO_u8GetPinValue+0x28>
    14fa:	9b c0       	rjmp	.+310    	; 0x1632 <DIO_u8GetPinValue+0x15e>
    14fc:	8b 81       	ldd	r24, Y+3	; 0x03
    14fe:	88 30       	cpi	r24, 0x08	; 8
    1500:	08 f0       	brcs	.+2      	; 0x1504 <DIO_u8GetPinValue+0x30>
    1502:	97 c0       	rjmp	.+302    	; 0x1632 <DIO_u8GetPinValue+0x15e>
    1504:	8c 81       	ldd	r24, Y+4	; 0x04
    1506:	9d 81       	ldd	r25, Y+5	; 0x05
    1508:	00 97       	sbiw	r24, 0x00	; 0
    150a:	09 f4       	brne	.+2      	; 0x150e <DIO_u8GetPinValue+0x3a>
    150c:	92 c0       	rjmp	.+292    	; 0x1632 <DIO_u8GetPinValue+0x15e>
		{
			switch(Copy_u8PortId)
    150e:	8a 81       	ldd	r24, Y+2	; 0x02
    1510:	28 2f       	mov	r18, r24
    1512:	30 e0       	ldi	r19, 0x00	; 0
    1514:	3f 83       	std	Y+7, r19	; 0x07
    1516:	2e 83       	std	Y+6, r18	; 0x06
    1518:	4e 81       	ldd	r20, Y+6	; 0x06
    151a:	5f 81       	ldd	r21, Y+7	; 0x07
    151c:	41 30       	cpi	r20, 0x01	; 1
    151e:	51 05       	cpc	r21, r1
    1520:	a1 f1       	breq	.+104    	; 0x158a <DIO_u8GetPinValue+0xb6>
    1522:	8e 81       	ldd	r24, Y+6	; 0x06
    1524:	9f 81       	ldd	r25, Y+7	; 0x07
    1526:	82 30       	cpi	r24, 0x02	; 2
    1528:	91 05       	cpc	r25, r1
    152a:	34 f4       	brge	.+12     	; 0x1538 <DIO_u8GetPinValue+0x64>
    152c:	2e 81       	ldd	r18, Y+6	; 0x06
    152e:	3f 81       	ldd	r19, Y+7	; 0x07
    1530:	21 15       	cp	r18, r1
    1532:	31 05       	cpc	r19, r1
    1534:	71 f0       	breq	.+28     	; 0x1552 <DIO_u8GetPinValue+0x7e>
    1536:	7e c0       	rjmp	.+252    	; 0x1634 <DIO_u8GetPinValue+0x160>
    1538:	4e 81       	ldd	r20, Y+6	; 0x06
    153a:	5f 81       	ldd	r21, Y+7	; 0x07
    153c:	42 30       	cpi	r20, 0x02	; 2
    153e:	51 05       	cpc	r21, r1
    1540:	09 f4       	brne	.+2      	; 0x1544 <DIO_u8GetPinValue+0x70>
    1542:	3f c0       	rjmp	.+126    	; 0x15c2 <DIO_u8GetPinValue+0xee>
    1544:	8e 81       	ldd	r24, Y+6	; 0x06
    1546:	9f 81       	ldd	r25, Y+7	; 0x07
    1548:	83 30       	cpi	r24, 0x03	; 3
    154a:	91 05       	cpc	r25, r1
    154c:	09 f4       	brne	.+2      	; 0x1550 <DIO_u8GetPinValue+0x7c>
    154e:	55 c0       	rjmp	.+170    	; 0x15fa <DIO_u8GetPinValue+0x126>
    1550:	71 c0       	rjmp	.+226    	; 0x1634 <DIO_u8GetPinValue+0x160>
			{
			case DIO_u8_PORTA:
				if(GET_BIT(PINA_u8_REG,Copy_u8PinId) == 0)
    1552:	e9 e3       	ldi	r30, 0x39	; 57
    1554:	f0 e0       	ldi	r31, 0x00	; 0
    1556:	80 81       	ld	r24, Z
    1558:	28 2f       	mov	r18, r24
    155a:	30 e0       	ldi	r19, 0x00	; 0
    155c:	8b 81       	ldd	r24, Y+3	; 0x03
    155e:	88 2f       	mov	r24, r24
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	a9 01       	movw	r20, r18
    1564:	02 c0       	rjmp	.+4      	; 0x156a <DIO_u8GetPinValue+0x96>
    1566:	55 95       	asr	r21
    1568:	47 95       	ror	r20
    156a:	8a 95       	dec	r24
    156c:	e2 f7       	brpl	.-8      	; 0x1566 <DIO_u8GetPinValue+0x92>
    156e:	ca 01       	movw	r24, r20
    1570:	81 70       	andi	r24, 0x01	; 1
    1572:	90 70       	andi	r25, 0x00	; 0
    1574:	00 97       	sbiw	r24, 0x00	; 0
    1576:	21 f4       	brne	.+8      	; 0x1580 <DIO_u8GetPinValue+0xac>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    1578:	ec 81       	ldd	r30, Y+4	; 0x04
    157a:	fd 81       	ldd	r31, Y+5	; 0x05
    157c:	10 82       	st	Z, r1
    157e:	5a c0       	rjmp	.+180    	; 0x1634 <DIO_u8GetPinValue+0x160>
				}
				else 
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    1580:	ec 81       	ldd	r30, Y+4	; 0x04
    1582:	fd 81       	ldd	r31, Y+5	; 0x05
    1584:	81 e0       	ldi	r24, 0x01	; 1
    1586:	80 83       	st	Z, r24
    1588:	55 c0       	rjmp	.+170    	; 0x1634 <DIO_u8GetPinValue+0x160>
				}
				break;
			case DIO_u8_PORTB:
				if(GET_BIT(PINB_u8_REG,Copy_u8PinId) == 0)
    158a:	e6 e3       	ldi	r30, 0x36	; 54
    158c:	f0 e0       	ldi	r31, 0x00	; 0
    158e:	80 81       	ld	r24, Z
    1590:	28 2f       	mov	r18, r24
    1592:	30 e0       	ldi	r19, 0x00	; 0
    1594:	8b 81       	ldd	r24, Y+3	; 0x03
    1596:	88 2f       	mov	r24, r24
    1598:	90 e0       	ldi	r25, 0x00	; 0
    159a:	a9 01       	movw	r20, r18
    159c:	02 c0       	rjmp	.+4      	; 0x15a2 <DIO_u8GetPinValue+0xce>
    159e:	55 95       	asr	r21
    15a0:	47 95       	ror	r20
    15a2:	8a 95       	dec	r24
    15a4:	e2 f7       	brpl	.-8      	; 0x159e <DIO_u8GetPinValue+0xca>
    15a6:	ca 01       	movw	r24, r20
    15a8:	81 70       	andi	r24, 0x01	; 1
    15aa:	90 70       	andi	r25, 0x00	; 0
    15ac:	00 97       	sbiw	r24, 0x00	; 0
    15ae:	21 f4       	brne	.+8      	; 0x15b8 <DIO_u8GetPinValue+0xe4>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    15b0:	ec 81       	ldd	r30, Y+4	; 0x04
    15b2:	fd 81       	ldd	r31, Y+5	; 0x05
    15b4:	10 82       	st	Z, r1
    15b6:	3e c0       	rjmp	.+124    	; 0x1634 <DIO_u8GetPinValue+0x160>
				}
				else 
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    15b8:	ec 81       	ldd	r30, Y+4	; 0x04
    15ba:	fd 81       	ldd	r31, Y+5	; 0x05
    15bc:	81 e0       	ldi	r24, 0x01	; 1
    15be:	80 83       	st	Z, r24
    15c0:	39 c0       	rjmp	.+114    	; 0x1634 <DIO_u8GetPinValue+0x160>
				}
				break;
			case DIO_u8_PORTC:
				if(GET_BIT(PINC_u8_REG,Copy_u8PinId) == 0)
    15c2:	e3 e3       	ldi	r30, 0x33	; 51
    15c4:	f0 e0       	ldi	r31, 0x00	; 0
    15c6:	80 81       	ld	r24, Z
    15c8:	28 2f       	mov	r18, r24
    15ca:	30 e0       	ldi	r19, 0x00	; 0
    15cc:	8b 81       	ldd	r24, Y+3	; 0x03
    15ce:	88 2f       	mov	r24, r24
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	a9 01       	movw	r20, r18
    15d4:	02 c0       	rjmp	.+4      	; 0x15da <DIO_u8GetPinValue+0x106>
    15d6:	55 95       	asr	r21
    15d8:	47 95       	ror	r20
    15da:	8a 95       	dec	r24
    15dc:	e2 f7       	brpl	.-8      	; 0x15d6 <DIO_u8GetPinValue+0x102>
    15de:	ca 01       	movw	r24, r20
    15e0:	81 70       	andi	r24, 0x01	; 1
    15e2:	90 70       	andi	r25, 0x00	; 0
    15e4:	00 97       	sbiw	r24, 0x00	; 0
    15e6:	21 f4       	brne	.+8      	; 0x15f0 <DIO_u8GetPinValue+0x11c>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    15e8:	ec 81       	ldd	r30, Y+4	; 0x04
    15ea:	fd 81       	ldd	r31, Y+5	; 0x05
    15ec:	10 82       	st	Z, r1
    15ee:	22 c0       	rjmp	.+68     	; 0x1634 <DIO_u8GetPinValue+0x160>
				}
				else 
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    15f0:	ec 81       	ldd	r30, Y+4	; 0x04
    15f2:	fd 81       	ldd	r31, Y+5	; 0x05
    15f4:	81 e0       	ldi	r24, 0x01	; 1
    15f6:	80 83       	st	Z, r24
    15f8:	1d c0       	rjmp	.+58     	; 0x1634 <DIO_u8GetPinValue+0x160>
				}
				break;
			case DIO_u8_PORTD:
				if(GET_BIT(PIND_u8_REG,Copy_u8PinId) == 0)
    15fa:	e0 e3       	ldi	r30, 0x30	; 48
    15fc:	f0 e0       	ldi	r31, 0x00	; 0
    15fe:	80 81       	ld	r24, Z
    1600:	28 2f       	mov	r18, r24
    1602:	30 e0       	ldi	r19, 0x00	; 0
    1604:	8b 81       	ldd	r24, Y+3	; 0x03
    1606:	88 2f       	mov	r24, r24
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	a9 01       	movw	r20, r18
    160c:	02 c0       	rjmp	.+4      	; 0x1612 <DIO_u8GetPinValue+0x13e>
    160e:	55 95       	asr	r21
    1610:	47 95       	ror	r20
    1612:	8a 95       	dec	r24
    1614:	e2 f7       	brpl	.-8      	; 0x160e <DIO_u8GetPinValue+0x13a>
    1616:	ca 01       	movw	r24, r20
    1618:	81 70       	andi	r24, 0x01	; 1
    161a:	90 70       	andi	r25, 0x00	; 0
    161c:	00 97       	sbiw	r24, 0x00	; 0
    161e:	21 f4       	brne	.+8      	; 0x1628 <DIO_u8GetPinValue+0x154>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    1620:	ec 81       	ldd	r30, Y+4	; 0x04
    1622:	fd 81       	ldd	r31, Y+5	; 0x05
    1624:	10 82       	st	Z, r1
    1626:	06 c0       	rjmp	.+12     	; 0x1634 <DIO_u8GetPinValue+0x160>
				}
				else 
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    1628:	ec 81       	ldd	r30, Y+4	; 0x04
    162a:	fd 81       	ldd	r31, Y+5	; 0x05
    162c:	81 e0       	ldi	r24, 0x01	; 1
    162e:	80 83       	st	Z, r24
    1630:	01 c0       	rjmp	.+2      	; 0x1634 <DIO_u8GetPinValue+0x160>

			}
		}
		else
		{
			Local_u8ErrorStatus = STD_TYPES_NOK;
    1632:	19 82       	std	Y+1, r1	; 0x01
		}
		return Local_u8ErrorStatus;
    1634:	89 81       	ldd	r24, Y+1	; 0x01
	}
    1636:	27 96       	adiw	r28, 0x07	; 7
    1638:	0f b6       	in	r0, 0x3f	; 63
    163a:	f8 94       	cli
    163c:	de bf       	out	0x3e, r29	; 62
    163e:	0f be       	out	0x3f, r0	; 63
    1640:	cd bf       	out	0x3d, r28	; 61
    1642:	cf 91       	pop	r28
    1644:	df 91       	pop	r29
    1646:	08 95       	ret

00001648 <DIO_u8SetPortDirection>:

	u8 DIO_u8SetPortDirection	(u8 Copy_u8PortId , u8 Copy_u8PortDirection)
	{
    1648:	df 93       	push	r29
    164a:	cf 93       	push	r28
    164c:	cd b7       	in	r28, 0x3d	; 61
    164e:	de b7       	in	r29, 0x3e	; 62
    1650:	2d 97       	sbiw	r28, 0x0d	; 13
    1652:	0f b6       	in	r0, 0x3f	; 63
    1654:	f8 94       	cli
    1656:	de bf       	out	0x3e, r29	; 62
    1658:	0f be       	out	0x3f, r0	; 63
    165a:	cd bf       	out	0x3d, r28	; 61
    165c:	8a 83       	std	Y+2, r24	; 0x02
    165e:	6b 83       	std	Y+3, r22	; 0x03
		u8 Local_u8ErrorStatus = STD_TYPES_OK;
    1660:	81 e0       	ldi	r24, 0x01	; 1
    1662:	89 83       	std	Y+1, r24	; 0x01
		if((Copy_u8PortId <= DIO_u8_PORTD) && ((Copy_u8PortDirection == DIO_u8_INPUT) || (Copy_u8PortDirection == DIO_u8_OUTPUT)))
    1664:	8a 81       	ldd	r24, Y+2	; 0x02
    1666:	84 30       	cpi	r24, 0x04	; 4
    1668:	08 f0       	brcs	.+2      	; 0x166c <DIO_u8SetPortDirection+0x24>
    166a:	87 c0       	rjmp	.+270    	; 0x177a <DIO_u8SetPortDirection+0x132>
    166c:	8b 81       	ldd	r24, Y+3	; 0x03
    166e:	88 23       	and	r24, r24
    1670:	21 f0       	breq	.+8      	; 0x167a <DIO_u8SetPortDirection+0x32>
    1672:	8b 81       	ldd	r24, Y+3	; 0x03
    1674:	81 30       	cpi	r24, 0x01	; 1
    1676:	09 f0       	breq	.+2      	; 0x167a <DIO_u8SetPortDirection+0x32>
    1678:	80 c0       	rjmp	.+256    	; 0x177a <DIO_u8SetPortDirection+0x132>
		{
			switch(Copy_u8PortId)
    167a:	8a 81       	ldd	r24, Y+2	; 0x02
    167c:	28 2f       	mov	r18, r24
    167e:	30 e0       	ldi	r19, 0x00	; 0
    1680:	3d 87       	std	Y+13, r19	; 0x0d
    1682:	2c 87       	std	Y+12, r18	; 0x0c
    1684:	8c 85       	ldd	r24, Y+12	; 0x0c
    1686:	9d 85       	ldd	r25, Y+13	; 0x0d
    1688:	81 30       	cpi	r24, 0x01	; 1
    168a:	91 05       	cpc	r25, r1
    168c:	71 f1       	breq	.+92     	; 0x16ea <DIO_u8SetPortDirection+0xa2>
    168e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1690:	3d 85       	ldd	r19, Y+13	; 0x0d
    1692:	22 30       	cpi	r18, 0x02	; 2
    1694:	31 05       	cpc	r19, r1
    1696:	2c f4       	brge	.+10     	; 0x16a2 <DIO_u8SetPortDirection+0x5a>
    1698:	8c 85       	ldd	r24, Y+12	; 0x0c
    169a:	9d 85       	ldd	r25, Y+13	; 0x0d
    169c:	00 97       	sbiw	r24, 0x00	; 0
    169e:	69 f0       	breq	.+26     	; 0x16ba <DIO_u8SetPortDirection+0x72>
    16a0:	6d c0       	rjmp	.+218    	; 0x177c <DIO_u8SetPortDirection+0x134>
    16a2:	2c 85       	ldd	r18, Y+12	; 0x0c
    16a4:	3d 85       	ldd	r19, Y+13	; 0x0d
    16a6:	22 30       	cpi	r18, 0x02	; 2
    16a8:	31 05       	cpc	r19, r1
    16aa:	b9 f1       	breq	.+110    	; 0x171a <DIO_u8SetPortDirection+0xd2>
    16ac:	8c 85       	ldd	r24, Y+12	; 0x0c
    16ae:	9d 85       	ldd	r25, Y+13	; 0x0d
    16b0:	83 30       	cpi	r24, 0x03	; 3
    16b2:	91 05       	cpc	r25, r1
    16b4:	09 f4       	brne	.+2      	; 0x16b8 <DIO_u8SetPortDirection+0x70>
    16b6:	49 c0       	rjmp	.+146    	; 0x174a <DIO_u8SetPortDirection+0x102>
    16b8:	61 c0       	rjmp	.+194    	; 0x177c <DIO_u8SetPortDirection+0x134>
			{
			case DIO_u8_PORTA:
				switch(Copy_u8PortDirection)
    16ba:	8b 81       	ldd	r24, Y+3	; 0x03
    16bc:	28 2f       	mov	r18, r24
    16be:	30 e0       	ldi	r19, 0x00	; 0
    16c0:	3b 87       	std	Y+11, r19	; 0x0b
    16c2:	2a 87       	std	Y+10, r18	; 0x0a
    16c4:	8a 85       	ldd	r24, Y+10	; 0x0a
    16c6:	9b 85       	ldd	r25, Y+11	; 0x0b
    16c8:	00 97       	sbiw	r24, 0x00	; 0
    16ca:	31 f0       	breq	.+12     	; 0x16d8 <DIO_u8SetPortDirection+0x90>
    16cc:	2a 85       	ldd	r18, Y+10	; 0x0a
    16ce:	3b 85       	ldd	r19, Y+11	; 0x0b
    16d0:	21 30       	cpi	r18, 0x01	; 1
    16d2:	31 05       	cpc	r19, r1
    16d4:	29 f0       	breq	.+10     	; 0x16e0 <DIO_u8SetPortDirection+0x98>
    16d6:	52 c0       	rjmp	.+164    	; 0x177c <DIO_u8SetPortDirection+0x134>
				{
				case DIO_u8_INPUT:
					DDRA_u8_REG = 0x00;
    16d8:	ea e3       	ldi	r30, 0x3A	; 58
    16da:	f0 e0       	ldi	r31, 0x00	; 0
    16dc:	10 82       	st	Z, r1
    16de:	4e c0       	rjmp	.+156    	; 0x177c <DIO_u8SetPortDirection+0x134>
					break;
				case DIO_u8_OUTPUT:
					DDRA_u8_REG = 0xFF;
    16e0:	ea e3       	ldi	r30, 0x3A	; 58
    16e2:	f0 e0       	ldi	r31, 0x00	; 0
    16e4:	8f ef       	ldi	r24, 0xFF	; 255
    16e6:	80 83       	st	Z, r24
    16e8:	49 c0       	rjmp	.+146    	; 0x177c <DIO_u8SetPortDirection+0x134>
					break;
				}
				break;
				case DIO_u8_PORTB:
					switch(Copy_u8PortDirection)
    16ea:	8b 81       	ldd	r24, Y+3	; 0x03
    16ec:	28 2f       	mov	r18, r24
    16ee:	30 e0       	ldi	r19, 0x00	; 0
    16f0:	39 87       	std	Y+9, r19	; 0x09
    16f2:	28 87       	std	Y+8, r18	; 0x08
    16f4:	88 85       	ldd	r24, Y+8	; 0x08
    16f6:	99 85       	ldd	r25, Y+9	; 0x09
    16f8:	00 97       	sbiw	r24, 0x00	; 0
    16fa:	31 f0       	breq	.+12     	; 0x1708 <DIO_u8SetPortDirection+0xc0>
    16fc:	28 85       	ldd	r18, Y+8	; 0x08
    16fe:	39 85       	ldd	r19, Y+9	; 0x09
    1700:	21 30       	cpi	r18, 0x01	; 1
    1702:	31 05       	cpc	r19, r1
    1704:	29 f0       	breq	.+10     	; 0x1710 <DIO_u8SetPortDirection+0xc8>
    1706:	3a c0       	rjmp	.+116    	; 0x177c <DIO_u8SetPortDirection+0x134>
					{
					case DIO_u8_INPUT:
						DDRB_u8_REG = 0x00;
    1708:	e7 e3       	ldi	r30, 0x37	; 55
    170a:	f0 e0       	ldi	r31, 0x00	; 0
    170c:	10 82       	st	Z, r1
    170e:	36 c0       	rjmp	.+108    	; 0x177c <DIO_u8SetPortDirection+0x134>
						break;
					case DIO_u8_OUTPUT:
						DDRB_u8_REG = 0xFF;
    1710:	e7 e3       	ldi	r30, 0x37	; 55
    1712:	f0 e0       	ldi	r31, 0x00	; 0
    1714:	8f ef       	ldi	r24, 0xFF	; 255
    1716:	80 83       	st	Z, r24
    1718:	31 c0       	rjmp	.+98     	; 0x177c <DIO_u8SetPortDirection+0x134>
						break;
					}
					break;
					case DIO_u8_PORTC:
						switch(Copy_u8PortDirection)
    171a:	8b 81       	ldd	r24, Y+3	; 0x03
    171c:	28 2f       	mov	r18, r24
    171e:	30 e0       	ldi	r19, 0x00	; 0
    1720:	3f 83       	std	Y+7, r19	; 0x07
    1722:	2e 83       	std	Y+6, r18	; 0x06
    1724:	8e 81       	ldd	r24, Y+6	; 0x06
    1726:	9f 81       	ldd	r25, Y+7	; 0x07
    1728:	00 97       	sbiw	r24, 0x00	; 0
    172a:	31 f0       	breq	.+12     	; 0x1738 <DIO_u8SetPortDirection+0xf0>
    172c:	2e 81       	ldd	r18, Y+6	; 0x06
    172e:	3f 81       	ldd	r19, Y+7	; 0x07
    1730:	21 30       	cpi	r18, 0x01	; 1
    1732:	31 05       	cpc	r19, r1
    1734:	29 f0       	breq	.+10     	; 0x1740 <DIO_u8SetPortDirection+0xf8>
    1736:	22 c0       	rjmp	.+68     	; 0x177c <DIO_u8SetPortDirection+0x134>
						{
						case DIO_u8_INPUT:
							DDRC_u8_REG = 0x00;
    1738:	e4 e3       	ldi	r30, 0x34	; 52
    173a:	f0 e0       	ldi	r31, 0x00	; 0
    173c:	10 82       	st	Z, r1
    173e:	1e c0       	rjmp	.+60     	; 0x177c <DIO_u8SetPortDirection+0x134>
							break;
						case DIO_u8_OUTPUT:
							DDRC_u8_REG = 0xFF;
    1740:	e4 e3       	ldi	r30, 0x34	; 52
    1742:	f0 e0       	ldi	r31, 0x00	; 0
    1744:	8f ef       	ldi	r24, 0xFF	; 255
    1746:	80 83       	st	Z, r24
    1748:	19 c0       	rjmp	.+50     	; 0x177c <DIO_u8SetPortDirection+0x134>
							break;
						}
						break;
						case DIO_u8_PORTD:
							switch(Copy_u8PortDirection)
    174a:	8b 81       	ldd	r24, Y+3	; 0x03
    174c:	28 2f       	mov	r18, r24
    174e:	30 e0       	ldi	r19, 0x00	; 0
    1750:	3d 83       	std	Y+5, r19	; 0x05
    1752:	2c 83       	std	Y+4, r18	; 0x04
    1754:	8c 81       	ldd	r24, Y+4	; 0x04
    1756:	9d 81       	ldd	r25, Y+5	; 0x05
    1758:	00 97       	sbiw	r24, 0x00	; 0
    175a:	31 f0       	breq	.+12     	; 0x1768 <DIO_u8SetPortDirection+0x120>
    175c:	2c 81       	ldd	r18, Y+4	; 0x04
    175e:	3d 81       	ldd	r19, Y+5	; 0x05
    1760:	21 30       	cpi	r18, 0x01	; 1
    1762:	31 05       	cpc	r19, r1
    1764:	29 f0       	breq	.+10     	; 0x1770 <DIO_u8SetPortDirection+0x128>
    1766:	0a c0       	rjmp	.+20     	; 0x177c <DIO_u8SetPortDirection+0x134>
							{
							case DIO_u8_INPUT:
								DDRD_u8_REG = 0x00;
    1768:	e1 e3       	ldi	r30, 0x31	; 49
    176a:	f0 e0       	ldi	r31, 0x00	; 0
    176c:	10 82       	st	Z, r1
    176e:	06 c0       	rjmp	.+12     	; 0x177c <DIO_u8SetPortDirection+0x134>
								break;
							case DIO_u8_OUTPUT:
								DDRD_u8_REG = 0xFF;
    1770:	e1 e3       	ldi	r30, 0x31	; 49
    1772:	f0 e0       	ldi	r31, 0x00	; 0
    1774:	8f ef       	ldi	r24, 0xFF	; 255
    1776:	80 83       	st	Z, r24
    1778:	01 c0       	rjmp	.+2      	; 0x177c <DIO_u8SetPortDirection+0x134>

			}
		}
		else
		{
			Local_u8ErrorStatus = STD_TYPES_NOK;
    177a:	19 82       	std	Y+1, r1	; 0x01
		}
		return Local_u8ErrorStatus;
    177c:	89 81       	ldd	r24, Y+1	; 0x01
	}
    177e:	2d 96       	adiw	r28, 0x0d	; 13
    1780:	0f b6       	in	r0, 0x3f	; 63
    1782:	f8 94       	cli
    1784:	de bf       	out	0x3e, r29	; 62
    1786:	0f be       	out	0x3f, r0	; 63
    1788:	cd bf       	out	0x3d, r28	; 61
    178a:	cf 91       	pop	r28
    178c:	df 91       	pop	r29
    178e:	08 95       	ret

00001790 <DIO_u8SetPortValue>:

	u8 DIO_u8SetPortValue		(u8 Copy_u8PortId , u8 Copy_u8PortValue     ) 
	{
    1790:	df 93       	push	r29
    1792:	cf 93       	push	r28
    1794:	00 d0       	rcall	.+0      	; 0x1796 <DIO_u8SetPortValue+0x6>
    1796:	00 d0       	rcall	.+0      	; 0x1798 <DIO_u8SetPortValue+0x8>
    1798:	0f 92       	push	r0
    179a:	cd b7       	in	r28, 0x3d	; 61
    179c:	de b7       	in	r29, 0x3e	; 62
    179e:	8a 83       	std	Y+2, r24	; 0x02
    17a0:	6b 83       	std	Y+3, r22	; 0x03
		u8 Local_u8ErrorStatus = STD_TYPES_OK;
    17a2:	81 e0       	ldi	r24, 0x01	; 1
    17a4:	89 83       	std	Y+1, r24	; 0x01

		switch(Copy_u8PortId)
    17a6:	8a 81       	ldd	r24, Y+2	; 0x02
    17a8:	28 2f       	mov	r18, r24
    17aa:	30 e0       	ldi	r19, 0x00	; 0
    17ac:	3d 83       	std	Y+5, r19	; 0x05
    17ae:	2c 83       	std	Y+4, r18	; 0x04
    17b0:	8c 81       	ldd	r24, Y+4	; 0x04
    17b2:	9d 81       	ldd	r25, Y+5	; 0x05
    17b4:	81 30       	cpi	r24, 0x01	; 1
    17b6:	91 05       	cpc	r25, r1
    17b8:	d1 f0       	breq	.+52     	; 0x17ee <DIO_u8SetPortValue+0x5e>
    17ba:	2c 81       	ldd	r18, Y+4	; 0x04
    17bc:	3d 81       	ldd	r19, Y+5	; 0x05
    17be:	22 30       	cpi	r18, 0x02	; 2
    17c0:	31 05       	cpc	r19, r1
    17c2:	2c f4       	brge	.+10     	; 0x17ce <DIO_u8SetPortValue+0x3e>
    17c4:	8c 81       	ldd	r24, Y+4	; 0x04
    17c6:	9d 81       	ldd	r25, Y+5	; 0x05
    17c8:	00 97       	sbiw	r24, 0x00	; 0
    17ca:	61 f0       	breq	.+24     	; 0x17e4 <DIO_u8SetPortValue+0x54>
    17cc:	1f c0       	rjmp	.+62     	; 0x180c <DIO_u8SetPortValue+0x7c>
    17ce:	2c 81       	ldd	r18, Y+4	; 0x04
    17d0:	3d 81       	ldd	r19, Y+5	; 0x05
    17d2:	22 30       	cpi	r18, 0x02	; 2
    17d4:	31 05       	cpc	r19, r1
    17d6:	81 f0       	breq	.+32     	; 0x17f8 <DIO_u8SetPortValue+0x68>
    17d8:	8c 81       	ldd	r24, Y+4	; 0x04
    17da:	9d 81       	ldd	r25, Y+5	; 0x05
    17dc:	83 30       	cpi	r24, 0x03	; 3
    17de:	91 05       	cpc	r25, r1
    17e0:	81 f0       	breq	.+32     	; 0x1802 <DIO_u8SetPortValue+0x72>
    17e2:	14 c0       	rjmp	.+40     	; 0x180c <DIO_u8SetPortValue+0x7c>
		{
		case DIO_u8_PORTA:
			PORTA_u8_REG = Copy_u8PortValue;
    17e4:	eb e3       	ldi	r30, 0x3B	; 59
    17e6:	f0 e0       	ldi	r31, 0x00	; 0
    17e8:	8b 81       	ldd	r24, Y+3	; 0x03
    17ea:	80 83       	st	Z, r24
    17ec:	10 c0       	rjmp	.+32     	; 0x180e <DIO_u8SetPortValue+0x7e>
			break;
		case DIO_u8_PORTB:
			PORTB_u8_REG = Copy_u8PortValue;
    17ee:	e8 e3       	ldi	r30, 0x38	; 56
    17f0:	f0 e0       	ldi	r31, 0x00	; 0
    17f2:	8b 81       	ldd	r24, Y+3	; 0x03
    17f4:	80 83       	st	Z, r24
    17f6:	0b c0       	rjmp	.+22     	; 0x180e <DIO_u8SetPortValue+0x7e>
			break;
		case DIO_u8_PORTC:
			PORTC_u8_REG = Copy_u8PortValue;
    17f8:	e5 e3       	ldi	r30, 0x35	; 53
    17fa:	f0 e0       	ldi	r31, 0x00	; 0
    17fc:	8b 81       	ldd	r24, Y+3	; 0x03
    17fe:	80 83       	st	Z, r24
    1800:	06 c0       	rjmp	.+12     	; 0x180e <DIO_u8SetPortValue+0x7e>
			break;
		case DIO_u8_PORTD:
			PORTD_u8_REG = Copy_u8PortValue;
    1802:	e2 e3       	ldi	r30, 0x32	; 50
    1804:	f0 e0       	ldi	r31, 0x00	; 0
    1806:	8b 81       	ldd	r24, Y+3	; 0x03
    1808:	80 83       	st	Z, r24
    180a:	01 c0       	rjmp	.+2      	; 0x180e <DIO_u8SetPortValue+0x7e>
			break;

		default:
			Local_u8ErrorStatus = STD_TYPES_NOK;
    180c:	19 82       	std	Y+1, r1	; 0x01
			break;
		}
		return Local_u8ErrorStatus;
    180e:	89 81       	ldd	r24, Y+1	; 0x01
	}
    1810:	0f 90       	pop	r0
    1812:	0f 90       	pop	r0
    1814:	0f 90       	pop	r0
    1816:	0f 90       	pop	r0
    1818:	0f 90       	pop	r0
    181a:	cf 91       	pop	r28
    181c:	df 91       	pop	r29
    181e:	08 95       	ret

00001820 <DIO_u8GetPortValue>:

	u8 DIO_u8GetPortValue		(u8 Copy_u8PortId , u8 *Copy_pu8ReturnedPortValue)
	{
    1820:	df 93       	push	r29
    1822:	cf 93       	push	r28
    1824:	00 d0       	rcall	.+0      	; 0x1826 <DIO_u8GetPortValue+0x6>
    1826:	00 d0       	rcall	.+0      	; 0x1828 <DIO_u8GetPortValue+0x8>
    1828:	00 d0       	rcall	.+0      	; 0x182a <DIO_u8GetPortValue+0xa>
    182a:	cd b7       	in	r28, 0x3d	; 61
    182c:	de b7       	in	r29, 0x3e	; 62
    182e:	8a 83       	std	Y+2, r24	; 0x02
    1830:	7c 83       	std	Y+4, r23	; 0x04
    1832:	6b 83       	std	Y+3, r22	; 0x03
		u8 Local_u8ErrorStatus = STD_TYPES_OK;
    1834:	81 e0       	ldi	r24, 0x01	; 1
    1836:	89 83       	std	Y+1, r24	; 0x01

		if(Copy_pu8ReturnedPortValue != NULL)
    1838:	8b 81       	ldd	r24, Y+3	; 0x03
    183a:	9c 81       	ldd	r25, Y+4	; 0x04
    183c:	00 97       	sbiw	r24, 0x00	; 0
    183e:	e9 f1       	breq	.+122    	; 0x18ba <DIO_u8GetPortValue+0x9a>
		{
			switch(Copy_u8PortId)
    1840:	8a 81       	ldd	r24, Y+2	; 0x02
    1842:	28 2f       	mov	r18, r24
    1844:	30 e0       	ldi	r19, 0x00	; 0
    1846:	3e 83       	std	Y+6, r19	; 0x06
    1848:	2d 83       	std	Y+5, r18	; 0x05
    184a:	8d 81       	ldd	r24, Y+5	; 0x05
    184c:	9e 81       	ldd	r25, Y+6	; 0x06
    184e:	81 30       	cpi	r24, 0x01	; 1
    1850:	91 05       	cpc	r25, r1
    1852:	e1 f0       	breq	.+56     	; 0x188c <DIO_u8GetPortValue+0x6c>
    1854:	2d 81       	ldd	r18, Y+5	; 0x05
    1856:	3e 81       	ldd	r19, Y+6	; 0x06
    1858:	22 30       	cpi	r18, 0x02	; 2
    185a:	31 05       	cpc	r19, r1
    185c:	2c f4       	brge	.+10     	; 0x1868 <DIO_u8GetPortValue+0x48>
    185e:	8d 81       	ldd	r24, Y+5	; 0x05
    1860:	9e 81       	ldd	r25, Y+6	; 0x06
    1862:	00 97       	sbiw	r24, 0x00	; 0
    1864:	61 f0       	breq	.+24     	; 0x187e <DIO_u8GetPortValue+0x5e>
    1866:	27 c0       	rjmp	.+78     	; 0x18b6 <DIO_u8GetPortValue+0x96>
    1868:	2d 81       	ldd	r18, Y+5	; 0x05
    186a:	3e 81       	ldd	r19, Y+6	; 0x06
    186c:	22 30       	cpi	r18, 0x02	; 2
    186e:	31 05       	cpc	r19, r1
    1870:	a1 f0       	breq	.+40     	; 0x189a <DIO_u8GetPortValue+0x7a>
    1872:	8d 81       	ldd	r24, Y+5	; 0x05
    1874:	9e 81       	ldd	r25, Y+6	; 0x06
    1876:	83 30       	cpi	r24, 0x03	; 3
    1878:	91 05       	cpc	r25, r1
    187a:	b1 f0       	breq	.+44     	; 0x18a8 <DIO_u8GetPortValue+0x88>
    187c:	1c c0       	rjmp	.+56     	; 0x18b6 <DIO_u8GetPortValue+0x96>
			{
			case DIO_u8_PORTA:
				*Copy_pu8ReturnedPortValue = PINA_u8_REG;
    187e:	e9 e3       	ldi	r30, 0x39	; 57
    1880:	f0 e0       	ldi	r31, 0x00	; 0
    1882:	80 81       	ld	r24, Z
    1884:	eb 81       	ldd	r30, Y+3	; 0x03
    1886:	fc 81       	ldd	r31, Y+4	; 0x04
    1888:	80 83       	st	Z, r24
    188a:	18 c0       	rjmp	.+48     	; 0x18bc <DIO_u8GetPortValue+0x9c>
				break;
			case DIO_u8_PORTB:
				*Copy_pu8ReturnedPortValue = PINB_u8_REG;
    188c:	e6 e3       	ldi	r30, 0x36	; 54
    188e:	f0 e0       	ldi	r31, 0x00	; 0
    1890:	80 81       	ld	r24, Z
    1892:	eb 81       	ldd	r30, Y+3	; 0x03
    1894:	fc 81       	ldd	r31, Y+4	; 0x04
    1896:	80 83       	st	Z, r24
    1898:	11 c0       	rjmp	.+34     	; 0x18bc <DIO_u8GetPortValue+0x9c>
				break;
			case DIO_u8_PORTC:
				*Copy_pu8ReturnedPortValue = PINC_u8_REG;
    189a:	e3 e3       	ldi	r30, 0x33	; 51
    189c:	f0 e0       	ldi	r31, 0x00	; 0
    189e:	80 81       	ld	r24, Z
    18a0:	eb 81       	ldd	r30, Y+3	; 0x03
    18a2:	fc 81       	ldd	r31, Y+4	; 0x04
    18a4:	80 83       	st	Z, r24
    18a6:	0a c0       	rjmp	.+20     	; 0x18bc <DIO_u8GetPortValue+0x9c>
				break;
			case DIO_u8_PORTD:
				*Copy_pu8ReturnedPortValue = PIND_u8_REG;
    18a8:	e0 e3       	ldi	r30, 0x30	; 48
    18aa:	f0 e0       	ldi	r31, 0x00	; 0
    18ac:	80 81       	ld	r24, Z
    18ae:	eb 81       	ldd	r30, Y+3	; 0x03
    18b0:	fc 81       	ldd	r31, Y+4	; 0x04
    18b2:	80 83       	st	Z, r24
    18b4:	03 c0       	rjmp	.+6      	; 0x18bc <DIO_u8GetPortValue+0x9c>
				break;

			default:
				Local_u8ErrorStatus = STD_TYPES_NOK;
    18b6:	19 82       	std	Y+1, r1	; 0x01
    18b8:	01 c0       	rjmp	.+2      	; 0x18bc <DIO_u8GetPortValue+0x9c>
				break;
			}
		}
		else
		{
			Local_u8ErrorStatus = STD_TYPES_NOK;
    18ba:	19 82       	std	Y+1, r1	; 0x01
		}

		return Local_u8ErrorStatus ;
    18bc:	89 81       	ldd	r24, Y+1	; 0x01
	}
    18be:	26 96       	adiw	r28, 0x06	; 6
    18c0:	0f b6       	in	r0, 0x3f	; 63
    18c2:	f8 94       	cli
    18c4:	de bf       	out	0x3e, r29	; 62
    18c6:	0f be       	out	0x3f, r0	; 63
    18c8:	cd bf       	out	0x3d, r28	; 61
    18ca:	cf 91       	pop	r28
    18cc:	df 91       	pop	r29
    18ce:	08 95       	ret

000018d0 <LCD_voidInit>:
#include "LCD_interface.h"
#include "LCD_config.h"
#include "LCD_private.h"

void LCD_voidInit(void)
{
    18d0:	0f 93       	push	r16
    18d2:	1f 93       	push	r17
    18d4:	df 93       	push	r29
    18d6:	cf 93       	push	r28
    18d8:	cd b7       	in	r28, 0x3d	; 61
    18da:	de b7       	in	r29, 0x3e	; 62
    18dc:	cc 54       	subi	r28, 0x4C	; 76
    18de:	d0 40       	sbci	r29, 0x00	; 0
    18e0:	0f b6       	in	r0, 0x3f	; 63
    18e2:	f8 94       	cli
    18e4:	de bf       	out	0x3e, r29	; 62
    18e6:	0f be       	out	0x3f, r0	; 63
    18e8:	cd bf       	out	0x3d, r28	; 61
    18ea:	fe 01       	movw	r30, r28
    18ec:	e7 5b       	subi	r30, 0xB7	; 183
    18ee:	ff 4f       	sbci	r31, 0xFF	; 255
    18f0:	80 e0       	ldi	r24, 0x00	; 0
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	ac e0       	ldi	r26, 0x0C	; 12
    18f6:	b2 e4       	ldi	r27, 0x42	; 66
    18f8:	80 83       	st	Z, r24
    18fa:	91 83       	std	Z+1, r25	; 0x01
    18fc:	a2 83       	std	Z+2, r26	; 0x02
    18fe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1900:	8e 01       	movw	r16, r28
    1902:	0b 5b       	subi	r16, 0xBB	; 187
    1904:	1f 4f       	sbci	r17, 0xFF	; 255
    1906:	fe 01       	movw	r30, r28
    1908:	e7 5b       	subi	r30, 0xB7	; 183
    190a:	ff 4f       	sbci	r31, 0xFF	; 255
    190c:	60 81       	ld	r22, Z
    190e:	71 81       	ldd	r23, Z+1	; 0x01
    1910:	82 81       	ldd	r24, Z+2	; 0x02
    1912:	93 81       	ldd	r25, Z+3	; 0x03
    1914:	20 e0       	ldi	r18, 0x00	; 0
    1916:	30 e0       	ldi	r19, 0x00	; 0
    1918:	4a ef       	ldi	r20, 0xFA	; 250
    191a:	54 e4       	ldi	r21, 0x44	; 68
    191c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1920:	dc 01       	movw	r26, r24
    1922:	cb 01       	movw	r24, r22
    1924:	f8 01       	movw	r30, r16
    1926:	80 83       	st	Z, r24
    1928:	91 83       	std	Z+1, r25	; 0x01
    192a:	a2 83       	std	Z+2, r26	; 0x02
    192c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    192e:	fe 01       	movw	r30, r28
    1930:	eb 5b       	subi	r30, 0xBB	; 187
    1932:	ff 4f       	sbci	r31, 0xFF	; 255
    1934:	60 81       	ld	r22, Z
    1936:	71 81       	ldd	r23, Z+1	; 0x01
    1938:	82 81       	ldd	r24, Z+2	; 0x02
    193a:	93 81       	ldd	r25, Z+3	; 0x03
    193c:	20 e0       	ldi	r18, 0x00	; 0
    193e:	30 e0       	ldi	r19, 0x00	; 0
    1940:	40 e8       	ldi	r20, 0x80	; 128
    1942:	5f e3       	ldi	r21, 0x3F	; 63
    1944:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1948:	88 23       	and	r24, r24
    194a:	44 f4       	brge	.+16     	; 0x195c <LCD_voidInit+0x8c>
		__ticks = 1;
    194c:	fe 01       	movw	r30, r28
    194e:	ed 5b       	subi	r30, 0xBD	; 189
    1950:	ff 4f       	sbci	r31, 0xFF	; 255
    1952:	81 e0       	ldi	r24, 0x01	; 1
    1954:	90 e0       	ldi	r25, 0x00	; 0
    1956:	91 83       	std	Z+1, r25	; 0x01
    1958:	80 83       	st	Z, r24
    195a:	64 c0       	rjmp	.+200    	; 0x1a24 <LCD_voidInit+0x154>
	else if (__tmp > 65535)
    195c:	fe 01       	movw	r30, r28
    195e:	eb 5b       	subi	r30, 0xBB	; 187
    1960:	ff 4f       	sbci	r31, 0xFF	; 255
    1962:	60 81       	ld	r22, Z
    1964:	71 81       	ldd	r23, Z+1	; 0x01
    1966:	82 81       	ldd	r24, Z+2	; 0x02
    1968:	93 81       	ldd	r25, Z+3	; 0x03
    196a:	20 e0       	ldi	r18, 0x00	; 0
    196c:	3f ef       	ldi	r19, 0xFF	; 255
    196e:	4f e7       	ldi	r20, 0x7F	; 127
    1970:	57 e4       	ldi	r21, 0x47	; 71
    1972:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1976:	18 16       	cp	r1, r24
    1978:	0c f0       	brlt	.+2      	; 0x197c <LCD_voidInit+0xac>
    197a:	43 c0       	rjmp	.+134    	; 0x1a02 <LCD_voidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    197c:	fe 01       	movw	r30, r28
    197e:	e7 5b       	subi	r30, 0xB7	; 183
    1980:	ff 4f       	sbci	r31, 0xFF	; 255
    1982:	60 81       	ld	r22, Z
    1984:	71 81       	ldd	r23, Z+1	; 0x01
    1986:	82 81       	ldd	r24, Z+2	; 0x02
    1988:	93 81       	ldd	r25, Z+3	; 0x03
    198a:	20 e0       	ldi	r18, 0x00	; 0
    198c:	30 e0       	ldi	r19, 0x00	; 0
    198e:	40 e2       	ldi	r20, 0x20	; 32
    1990:	51 e4       	ldi	r21, 0x41	; 65
    1992:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1996:	dc 01       	movw	r26, r24
    1998:	cb 01       	movw	r24, r22
    199a:	8e 01       	movw	r16, r28
    199c:	0d 5b       	subi	r16, 0xBD	; 189
    199e:	1f 4f       	sbci	r17, 0xFF	; 255
    19a0:	bc 01       	movw	r22, r24
    19a2:	cd 01       	movw	r24, r26
    19a4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19a8:	dc 01       	movw	r26, r24
    19aa:	cb 01       	movw	r24, r22
    19ac:	f8 01       	movw	r30, r16
    19ae:	91 83       	std	Z+1, r25	; 0x01
    19b0:	80 83       	st	Z, r24
    19b2:	1f c0       	rjmp	.+62     	; 0x19f2 <LCD_voidInit+0x122>
    19b4:	fe 01       	movw	r30, r28
    19b6:	ef 5b       	subi	r30, 0xBF	; 191
    19b8:	ff 4f       	sbci	r31, 0xFF	; 255
    19ba:	88 ec       	ldi	r24, 0xC8	; 200
    19bc:	90 e0       	ldi	r25, 0x00	; 0
    19be:	91 83       	std	Z+1, r25	; 0x01
    19c0:	80 83       	st	Z, r24
    19c2:	fe 01       	movw	r30, r28
    19c4:	ef 5b       	subi	r30, 0xBF	; 191
    19c6:	ff 4f       	sbci	r31, 0xFF	; 255
    19c8:	80 81       	ld	r24, Z
    19ca:	91 81       	ldd	r25, Z+1	; 0x01
    19cc:	01 97       	sbiw	r24, 0x01	; 1
    19ce:	f1 f7       	brne	.-4      	; 0x19cc <LCD_voidInit+0xfc>
    19d0:	fe 01       	movw	r30, r28
    19d2:	ef 5b       	subi	r30, 0xBF	; 191
    19d4:	ff 4f       	sbci	r31, 0xFF	; 255
    19d6:	91 83       	std	Z+1, r25	; 0x01
    19d8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19da:	de 01       	movw	r26, r28
    19dc:	ad 5b       	subi	r26, 0xBD	; 189
    19de:	bf 4f       	sbci	r27, 0xFF	; 255
    19e0:	fe 01       	movw	r30, r28
    19e2:	ed 5b       	subi	r30, 0xBD	; 189
    19e4:	ff 4f       	sbci	r31, 0xFF	; 255
    19e6:	80 81       	ld	r24, Z
    19e8:	91 81       	ldd	r25, Z+1	; 0x01
    19ea:	01 97       	sbiw	r24, 0x01	; 1
    19ec:	11 96       	adiw	r26, 0x01	; 1
    19ee:	9c 93       	st	X, r25
    19f0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19f2:	fe 01       	movw	r30, r28
    19f4:	ed 5b       	subi	r30, 0xBD	; 189
    19f6:	ff 4f       	sbci	r31, 0xFF	; 255
    19f8:	80 81       	ld	r24, Z
    19fa:	91 81       	ldd	r25, Z+1	; 0x01
    19fc:	00 97       	sbiw	r24, 0x00	; 0
    19fe:	d1 f6       	brne	.-76     	; 0x19b4 <LCD_voidInit+0xe4>
    1a00:	24 c0       	rjmp	.+72     	; 0x1a4a <LCD_voidInit+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a02:	8e 01       	movw	r16, r28
    1a04:	0d 5b       	subi	r16, 0xBD	; 189
    1a06:	1f 4f       	sbci	r17, 0xFF	; 255
    1a08:	fe 01       	movw	r30, r28
    1a0a:	eb 5b       	subi	r30, 0xBB	; 187
    1a0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a0e:	60 81       	ld	r22, Z
    1a10:	71 81       	ldd	r23, Z+1	; 0x01
    1a12:	82 81       	ldd	r24, Z+2	; 0x02
    1a14:	93 81       	ldd	r25, Z+3	; 0x03
    1a16:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a1a:	dc 01       	movw	r26, r24
    1a1c:	cb 01       	movw	r24, r22
    1a1e:	f8 01       	movw	r30, r16
    1a20:	91 83       	std	Z+1, r25	; 0x01
    1a22:	80 83       	st	Z, r24
    1a24:	fe 01       	movw	r30, r28
    1a26:	ed 5b       	subi	r30, 0xBD	; 189
    1a28:	ff 4f       	sbci	r31, 0xFF	; 255
    1a2a:	80 81       	ld	r24, Z
    1a2c:	91 81       	ldd	r25, Z+1	; 0x01
    1a2e:	fe 01       	movw	r30, r28
    1a30:	ff 96       	adiw	r30, 0x3f	; 63
    1a32:	91 83       	std	Z+1, r25	; 0x01
    1a34:	80 83       	st	Z, r24
    1a36:	fe 01       	movw	r30, r28
    1a38:	ff 96       	adiw	r30, 0x3f	; 63
    1a3a:	80 81       	ld	r24, Z
    1a3c:	91 81       	ldd	r25, Z+1	; 0x01
    1a3e:	01 97       	sbiw	r24, 0x01	; 1
    1a40:	f1 f7       	brne	.-4      	; 0x1a3e <LCD_voidInit+0x16e>
    1a42:	fe 01       	movw	r30, r28
    1a44:	ff 96       	adiw	r30, 0x3f	; 63
    1a46:	91 83       	std	Z+1, r25	; 0x01
    1a48:	80 83       	st	Z, r24
	_delay_ms(35);
	LCD_voidSendCmd(0b00111000);//functionset
    1a4a:	88 e3       	ldi	r24, 0x38	; 56
    1a4c:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <LCD_voidSendCmd>
    1a50:	80 e0       	ldi	r24, 0x00	; 0
    1a52:	90 e0       	ldi	r25, 0x00	; 0
    1a54:	a0 e2       	ldi	r26, 0x20	; 32
    1a56:	b2 e4       	ldi	r27, 0x42	; 66
    1a58:	8b af       	std	Y+59, r24	; 0x3b
    1a5a:	9c af       	std	Y+60, r25	; 0x3c
    1a5c:	ad af       	std	Y+61, r26	; 0x3d
    1a5e:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1a60:	6b ad       	ldd	r22, Y+59	; 0x3b
    1a62:	7c ad       	ldd	r23, Y+60	; 0x3c
    1a64:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a66:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a68:	2b ea       	ldi	r18, 0xAB	; 171
    1a6a:	3a ea       	ldi	r19, 0xAA	; 170
    1a6c:	4a e2       	ldi	r20, 0x2A	; 42
    1a6e:	50 e4       	ldi	r21, 0x40	; 64
    1a70:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a74:	dc 01       	movw	r26, r24
    1a76:	cb 01       	movw	r24, r22
    1a78:	8f ab       	std	Y+55, r24	; 0x37
    1a7a:	98 af       	std	Y+56, r25	; 0x38
    1a7c:	a9 af       	std	Y+57, r26	; 0x39
    1a7e:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1a80:	6f a9       	ldd	r22, Y+55	; 0x37
    1a82:	78 ad       	ldd	r23, Y+56	; 0x38
    1a84:	89 ad       	ldd	r24, Y+57	; 0x39
    1a86:	9a ad       	ldd	r25, Y+58	; 0x3a
    1a88:	20 e0       	ldi	r18, 0x00	; 0
    1a8a:	30 e0       	ldi	r19, 0x00	; 0
    1a8c:	40 e8       	ldi	r20, 0x80	; 128
    1a8e:	5f e3       	ldi	r21, 0x3F	; 63
    1a90:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1a94:	88 23       	and	r24, r24
    1a96:	1c f4       	brge	.+6      	; 0x1a9e <LCD_voidInit+0x1ce>
		__ticks = 1;
    1a98:	81 e0       	ldi	r24, 0x01	; 1
    1a9a:	8e ab       	std	Y+54, r24	; 0x36
    1a9c:	91 c0       	rjmp	.+290    	; 0x1bc0 <LCD_voidInit+0x2f0>
	else if (__tmp > 255)
    1a9e:	6f a9       	ldd	r22, Y+55	; 0x37
    1aa0:	78 ad       	ldd	r23, Y+56	; 0x38
    1aa2:	89 ad       	ldd	r24, Y+57	; 0x39
    1aa4:	9a ad       	ldd	r25, Y+58	; 0x3a
    1aa6:	20 e0       	ldi	r18, 0x00	; 0
    1aa8:	30 e0       	ldi	r19, 0x00	; 0
    1aaa:	4f e7       	ldi	r20, 0x7F	; 127
    1aac:	53 e4       	ldi	r21, 0x43	; 67
    1aae:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1ab2:	18 16       	cp	r1, r24
    1ab4:	0c f0       	brlt	.+2      	; 0x1ab8 <LCD_voidInit+0x1e8>
    1ab6:	7b c0       	rjmp	.+246    	; 0x1bae <LCD_voidInit+0x2de>
	{
		_delay_ms(__us / 1000.0);
    1ab8:	6b ad       	ldd	r22, Y+59	; 0x3b
    1aba:	7c ad       	ldd	r23, Y+60	; 0x3c
    1abc:	8d ad       	ldd	r24, Y+61	; 0x3d
    1abe:	9e ad       	ldd	r25, Y+62	; 0x3e
    1ac0:	20 e0       	ldi	r18, 0x00	; 0
    1ac2:	30 e0       	ldi	r19, 0x00	; 0
    1ac4:	4a e7       	ldi	r20, 0x7A	; 122
    1ac6:	54 e4       	ldi	r21, 0x44	; 68
    1ac8:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1acc:	dc 01       	movw	r26, r24
    1ace:	cb 01       	movw	r24, r22
    1ad0:	8a ab       	std	Y+50, r24	; 0x32
    1ad2:	9b ab       	std	Y+51, r25	; 0x33
    1ad4:	ac ab       	std	Y+52, r26	; 0x34
    1ad6:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ad8:	6a a9       	ldd	r22, Y+50	; 0x32
    1ada:	7b a9       	ldd	r23, Y+51	; 0x33
    1adc:	8c a9       	ldd	r24, Y+52	; 0x34
    1ade:	9d a9       	ldd	r25, Y+53	; 0x35
    1ae0:	20 e0       	ldi	r18, 0x00	; 0
    1ae2:	30 e0       	ldi	r19, 0x00	; 0
    1ae4:	4a ef       	ldi	r20, 0xFA	; 250
    1ae6:	54 e4       	ldi	r21, 0x44	; 68
    1ae8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1aec:	dc 01       	movw	r26, r24
    1aee:	cb 01       	movw	r24, r22
    1af0:	8e a7       	std	Y+46, r24	; 0x2e
    1af2:	9f a7       	std	Y+47, r25	; 0x2f
    1af4:	a8 ab       	std	Y+48, r26	; 0x30
    1af6:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    1af8:	6e a5       	ldd	r22, Y+46	; 0x2e
    1afa:	7f a5       	ldd	r23, Y+47	; 0x2f
    1afc:	88 a9       	ldd	r24, Y+48	; 0x30
    1afe:	99 a9       	ldd	r25, Y+49	; 0x31
    1b00:	20 e0       	ldi	r18, 0x00	; 0
    1b02:	30 e0       	ldi	r19, 0x00	; 0
    1b04:	40 e8       	ldi	r20, 0x80	; 128
    1b06:	5f e3       	ldi	r21, 0x3F	; 63
    1b08:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1b0c:	88 23       	and	r24, r24
    1b0e:	2c f4       	brge	.+10     	; 0x1b1a <LCD_voidInit+0x24a>
		__ticks = 1;
    1b10:	81 e0       	ldi	r24, 0x01	; 1
    1b12:	90 e0       	ldi	r25, 0x00	; 0
    1b14:	9d a7       	std	Y+45, r25	; 0x2d
    1b16:	8c a7       	std	Y+44, r24	; 0x2c
    1b18:	3f c0       	rjmp	.+126    	; 0x1b98 <LCD_voidInit+0x2c8>
	else if (__tmp > 65535)
    1b1a:	6e a5       	ldd	r22, Y+46	; 0x2e
    1b1c:	7f a5       	ldd	r23, Y+47	; 0x2f
    1b1e:	88 a9       	ldd	r24, Y+48	; 0x30
    1b20:	99 a9       	ldd	r25, Y+49	; 0x31
    1b22:	20 e0       	ldi	r18, 0x00	; 0
    1b24:	3f ef       	ldi	r19, 0xFF	; 255
    1b26:	4f e7       	ldi	r20, 0x7F	; 127
    1b28:	57 e4       	ldi	r21, 0x47	; 71
    1b2a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1b2e:	18 16       	cp	r1, r24
    1b30:	4c f5       	brge	.+82     	; 0x1b84 <LCD_voidInit+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b32:	6a a9       	ldd	r22, Y+50	; 0x32
    1b34:	7b a9       	ldd	r23, Y+51	; 0x33
    1b36:	8c a9       	ldd	r24, Y+52	; 0x34
    1b38:	9d a9       	ldd	r25, Y+53	; 0x35
    1b3a:	20 e0       	ldi	r18, 0x00	; 0
    1b3c:	30 e0       	ldi	r19, 0x00	; 0
    1b3e:	40 e2       	ldi	r20, 0x20	; 32
    1b40:	51 e4       	ldi	r21, 0x41	; 65
    1b42:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b46:	dc 01       	movw	r26, r24
    1b48:	cb 01       	movw	r24, r22
    1b4a:	bc 01       	movw	r22, r24
    1b4c:	cd 01       	movw	r24, r26
    1b4e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b52:	dc 01       	movw	r26, r24
    1b54:	cb 01       	movw	r24, r22
    1b56:	9d a7       	std	Y+45, r25	; 0x2d
    1b58:	8c a7       	std	Y+44, r24	; 0x2c
    1b5a:	0f c0       	rjmp	.+30     	; 0x1b7a <LCD_voidInit+0x2aa>
    1b5c:	88 ec       	ldi	r24, 0xC8	; 200
    1b5e:	90 e0       	ldi	r25, 0x00	; 0
    1b60:	9b a7       	std	Y+43, r25	; 0x2b
    1b62:	8a a7       	std	Y+42, r24	; 0x2a
    1b64:	8a a5       	ldd	r24, Y+42	; 0x2a
    1b66:	9b a5       	ldd	r25, Y+43	; 0x2b
    1b68:	01 97       	sbiw	r24, 0x01	; 1
    1b6a:	f1 f7       	brne	.-4      	; 0x1b68 <LCD_voidInit+0x298>
    1b6c:	9b a7       	std	Y+43, r25	; 0x2b
    1b6e:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b70:	8c a5       	ldd	r24, Y+44	; 0x2c
    1b72:	9d a5       	ldd	r25, Y+45	; 0x2d
    1b74:	01 97       	sbiw	r24, 0x01	; 1
    1b76:	9d a7       	std	Y+45, r25	; 0x2d
    1b78:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b7a:	8c a5       	ldd	r24, Y+44	; 0x2c
    1b7c:	9d a5       	ldd	r25, Y+45	; 0x2d
    1b7e:	00 97       	sbiw	r24, 0x00	; 0
    1b80:	69 f7       	brne	.-38     	; 0x1b5c <LCD_voidInit+0x28c>
    1b82:	24 c0       	rjmp	.+72     	; 0x1bcc <LCD_voidInit+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b84:	6e a5       	ldd	r22, Y+46	; 0x2e
    1b86:	7f a5       	ldd	r23, Y+47	; 0x2f
    1b88:	88 a9       	ldd	r24, Y+48	; 0x30
    1b8a:	99 a9       	ldd	r25, Y+49	; 0x31
    1b8c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b90:	dc 01       	movw	r26, r24
    1b92:	cb 01       	movw	r24, r22
    1b94:	9d a7       	std	Y+45, r25	; 0x2d
    1b96:	8c a7       	std	Y+44, r24	; 0x2c
    1b98:	8c a5       	ldd	r24, Y+44	; 0x2c
    1b9a:	9d a5       	ldd	r25, Y+45	; 0x2d
    1b9c:	99 a7       	std	Y+41, r25	; 0x29
    1b9e:	88 a7       	std	Y+40, r24	; 0x28
    1ba0:	88 a5       	ldd	r24, Y+40	; 0x28
    1ba2:	99 a5       	ldd	r25, Y+41	; 0x29
    1ba4:	01 97       	sbiw	r24, 0x01	; 1
    1ba6:	f1 f7       	brne	.-4      	; 0x1ba4 <LCD_voidInit+0x2d4>
    1ba8:	99 a7       	std	Y+41, r25	; 0x29
    1baa:	88 a7       	std	Y+40, r24	; 0x28
    1bac:	0f c0       	rjmp	.+30     	; 0x1bcc <LCD_voidInit+0x2fc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1bae:	6f a9       	ldd	r22, Y+55	; 0x37
    1bb0:	78 ad       	ldd	r23, Y+56	; 0x38
    1bb2:	89 ad       	ldd	r24, Y+57	; 0x39
    1bb4:	9a ad       	ldd	r25, Y+58	; 0x3a
    1bb6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bba:	dc 01       	movw	r26, r24
    1bbc:	cb 01       	movw	r24, r22
    1bbe:	8e ab       	std	Y+54, r24	; 0x36
    1bc0:	8e a9       	ldd	r24, Y+54	; 0x36
    1bc2:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1bc4:	8f a1       	ldd	r24, Y+39	; 0x27
    1bc6:	8a 95       	dec	r24
    1bc8:	f1 f7       	brne	.-4      	; 0x1bc6 <LCD_voidInit+0x2f6>
    1bca:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(40);
	LCD_voidSendCmd(0b00001100);//display
    1bcc:	8c e0       	ldi	r24, 0x0C	; 12
    1bce:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <LCD_voidSendCmd>
    1bd2:	80 e0       	ldi	r24, 0x00	; 0
    1bd4:	90 e0       	ldi	r25, 0x00	; 0
    1bd6:	a0 e2       	ldi	r26, 0x20	; 32
    1bd8:	b2 e4       	ldi	r27, 0x42	; 66
    1bda:	8b a3       	std	Y+35, r24	; 0x23
    1bdc:	9c a3       	std	Y+36, r25	; 0x24
    1bde:	ad a3       	std	Y+37, r26	; 0x25
    1be0:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1be2:	6b a1       	ldd	r22, Y+35	; 0x23
    1be4:	7c a1       	ldd	r23, Y+36	; 0x24
    1be6:	8d a1       	ldd	r24, Y+37	; 0x25
    1be8:	9e a1       	ldd	r25, Y+38	; 0x26
    1bea:	2b ea       	ldi	r18, 0xAB	; 171
    1bec:	3a ea       	ldi	r19, 0xAA	; 170
    1bee:	4a e2       	ldi	r20, 0x2A	; 42
    1bf0:	50 e4       	ldi	r21, 0x40	; 64
    1bf2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bf6:	dc 01       	movw	r26, r24
    1bf8:	cb 01       	movw	r24, r22
    1bfa:	8f 8f       	std	Y+31, r24	; 0x1f
    1bfc:	98 a3       	std	Y+32, r25	; 0x20
    1bfe:	a9 a3       	std	Y+33, r26	; 0x21
    1c00:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1c02:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1c04:	78 a1       	ldd	r23, Y+32	; 0x20
    1c06:	89 a1       	ldd	r24, Y+33	; 0x21
    1c08:	9a a1       	ldd	r25, Y+34	; 0x22
    1c0a:	20 e0       	ldi	r18, 0x00	; 0
    1c0c:	30 e0       	ldi	r19, 0x00	; 0
    1c0e:	40 e8       	ldi	r20, 0x80	; 128
    1c10:	5f e3       	ldi	r21, 0x3F	; 63
    1c12:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1c16:	88 23       	and	r24, r24
    1c18:	1c f4       	brge	.+6      	; 0x1c20 <LCD_voidInit+0x350>
		__ticks = 1;
    1c1a:	81 e0       	ldi	r24, 0x01	; 1
    1c1c:	8e 8f       	std	Y+30, r24	; 0x1e
    1c1e:	91 c0       	rjmp	.+290    	; 0x1d42 <LCD_voidInit+0x472>
	else if (__tmp > 255)
    1c20:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1c22:	78 a1       	ldd	r23, Y+32	; 0x20
    1c24:	89 a1       	ldd	r24, Y+33	; 0x21
    1c26:	9a a1       	ldd	r25, Y+34	; 0x22
    1c28:	20 e0       	ldi	r18, 0x00	; 0
    1c2a:	30 e0       	ldi	r19, 0x00	; 0
    1c2c:	4f e7       	ldi	r20, 0x7F	; 127
    1c2e:	53 e4       	ldi	r21, 0x43	; 67
    1c30:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1c34:	18 16       	cp	r1, r24
    1c36:	0c f0       	brlt	.+2      	; 0x1c3a <LCD_voidInit+0x36a>
    1c38:	7b c0       	rjmp	.+246    	; 0x1d30 <LCD_voidInit+0x460>
	{
		_delay_ms(__us / 1000.0);
    1c3a:	6b a1       	ldd	r22, Y+35	; 0x23
    1c3c:	7c a1       	ldd	r23, Y+36	; 0x24
    1c3e:	8d a1       	ldd	r24, Y+37	; 0x25
    1c40:	9e a1       	ldd	r25, Y+38	; 0x26
    1c42:	20 e0       	ldi	r18, 0x00	; 0
    1c44:	30 e0       	ldi	r19, 0x00	; 0
    1c46:	4a e7       	ldi	r20, 0x7A	; 122
    1c48:	54 e4       	ldi	r21, 0x44	; 68
    1c4a:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1c4e:	dc 01       	movw	r26, r24
    1c50:	cb 01       	movw	r24, r22
    1c52:	8a 8f       	std	Y+26, r24	; 0x1a
    1c54:	9b 8f       	std	Y+27, r25	; 0x1b
    1c56:	ac 8f       	std	Y+28, r26	; 0x1c
    1c58:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c5a:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1c5c:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1c5e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1c60:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1c62:	20 e0       	ldi	r18, 0x00	; 0
    1c64:	30 e0       	ldi	r19, 0x00	; 0
    1c66:	4a ef       	ldi	r20, 0xFA	; 250
    1c68:	54 e4       	ldi	r21, 0x44	; 68
    1c6a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c6e:	dc 01       	movw	r26, r24
    1c70:	cb 01       	movw	r24, r22
    1c72:	8e 8b       	std	Y+22, r24	; 0x16
    1c74:	9f 8b       	std	Y+23, r25	; 0x17
    1c76:	a8 8f       	std	Y+24, r26	; 0x18
    1c78:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1c7a:	6e 89       	ldd	r22, Y+22	; 0x16
    1c7c:	7f 89       	ldd	r23, Y+23	; 0x17
    1c7e:	88 8d       	ldd	r24, Y+24	; 0x18
    1c80:	99 8d       	ldd	r25, Y+25	; 0x19
    1c82:	20 e0       	ldi	r18, 0x00	; 0
    1c84:	30 e0       	ldi	r19, 0x00	; 0
    1c86:	40 e8       	ldi	r20, 0x80	; 128
    1c88:	5f e3       	ldi	r21, 0x3F	; 63
    1c8a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1c8e:	88 23       	and	r24, r24
    1c90:	2c f4       	brge	.+10     	; 0x1c9c <LCD_voidInit+0x3cc>
		__ticks = 1;
    1c92:	81 e0       	ldi	r24, 0x01	; 1
    1c94:	90 e0       	ldi	r25, 0x00	; 0
    1c96:	9d 8b       	std	Y+21, r25	; 0x15
    1c98:	8c 8b       	std	Y+20, r24	; 0x14
    1c9a:	3f c0       	rjmp	.+126    	; 0x1d1a <LCD_voidInit+0x44a>
	else if (__tmp > 65535)
    1c9c:	6e 89       	ldd	r22, Y+22	; 0x16
    1c9e:	7f 89       	ldd	r23, Y+23	; 0x17
    1ca0:	88 8d       	ldd	r24, Y+24	; 0x18
    1ca2:	99 8d       	ldd	r25, Y+25	; 0x19
    1ca4:	20 e0       	ldi	r18, 0x00	; 0
    1ca6:	3f ef       	ldi	r19, 0xFF	; 255
    1ca8:	4f e7       	ldi	r20, 0x7F	; 127
    1caa:	57 e4       	ldi	r21, 0x47	; 71
    1cac:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1cb0:	18 16       	cp	r1, r24
    1cb2:	4c f5       	brge	.+82     	; 0x1d06 <LCD_voidInit+0x436>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cb4:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1cb6:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1cb8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1cba:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1cbc:	20 e0       	ldi	r18, 0x00	; 0
    1cbe:	30 e0       	ldi	r19, 0x00	; 0
    1cc0:	40 e2       	ldi	r20, 0x20	; 32
    1cc2:	51 e4       	ldi	r21, 0x41	; 65
    1cc4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cc8:	dc 01       	movw	r26, r24
    1cca:	cb 01       	movw	r24, r22
    1ccc:	bc 01       	movw	r22, r24
    1cce:	cd 01       	movw	r24, r26
    1cd0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cd4:	dc 01       	movw	r26, r24
    1cd6:	cb 01       	movw	r24, r22
    1cd8:	9d 8b       	std	Y+21, r25	; 0x15
    1cda:	8c 8b       	std	Y+20, r24	; 0x14
    1cdc:	0f c0       	rjmp	.+30     	; 0x1cfc <LCD_voidInit+0x42c>
    1cde:	88 ec       	ldi	r24, 0xC8	; 200
    1ce0:	90 e0       	ldi	r25, 0x00	; 0
    1ce2:	9b 8b       	std	Y+19, r25	; 0x13
    1ce4:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ce6:	8a 89       	ldd	r24, Y+18	; 0x12
    1ce8:	9b 89       	ldd	r25, Y+19	; 0x13
    1cea:	01 97       	sbiw	r24, 0x01	; 1
    1cec:	f1 f7       	brne	.-4      	; 0x1cea <LCD_voidInit+0x41a>
    1cee:	9b 8b       	std	Y+19, r25	; 0x13
    1cf0:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cf2:	8c 89       	ldd	r24, Y+20	; 0x14
    1cf4:	9d 89       	ldd	r25, Y+21	; 0x15
    1cf6:	01 97       	sbiw	r24, 0x01	; 1
    1cf8:	9d 8b       	std	Y+21, r25	; 0x15
    1cfa:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cfc:	8c 89       	ldd	r24, Y+20	; 0x14
    1cfe:	9d 89       	ldd	r25, Y+21	; 0x15
    1d00:	00 97       	sbiw	r24, 0x00	; 0
    1d02:	69 f7       	brne	.-38     	; 0x1cde <LCD_voidInit+0x40e>
    1d04:	24 c0       	rjmp	.+72     	; 0x1d4e <LCD_voidInit+0x47e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d06:	6e 89       	ldd	r22, Y+22	; 0x16
    1d08:	7f 89       	ldd	r23, Y+23	; 0x17
    1d0a:	88 8d       	ldd	r24, Y+24	; 0x18
    1d0c:	99 8d       	ldd	r25, Y+25	; 0x19
    1d0e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d12:	dc 01       	movw	r26, r24
    1d14:	cb 01       	movw	r24, r22
    1d16:	9d 8b       	std	Y+21, r25	; 0x15
    1d18:	8c 8b       	std	Y+20, r24	; 0x14
    1d1a:	8c 89       	ldd	r24, Y+20	; 0x14
    1d1c:	9d 89       	ldd	r25, Y+21	; 0x15
    1d1e:	99 8b       	std	Y+17, r25	; 0x11
    1d20:	88 8b       	std	Y+16, r24	; 0x10
    1d22:	88 89       	ldd	r24, Y+16	; 0x10
    1d24:	99 89       	ldd	r25, Y+17	; 0x11
    1d26:	01 97       	sbiw	r24, 0x01	; 1
    1d28:	f1 f7       	brne	.-4      	; 0x1d26 <LCD_voidInit+0x456>
    1d2a:	99 8b       	std	Y+17, r25	; 0x11
    1d2c:	88 8b       	std	Y+16, r24	; 0x10
    1d2e:	0f c0       	rjmp	.+30     	; 0x1d4e <LCD_voidInit+0x47e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1d30:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1d32:	78 a1       	ldd	r23, Y+32	; 0x20
    1d34:	89 a1       	ldd	r24, Y+33	; 0x21
    1d36:	9a a1       	ldd	r25, Y+34	; 0x22
    1d38:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d3c:	dc 01       	movw	r26, r24
    1d3e:	cb 01       	movw	r24, r22
    1d40:	8e 8f       	std	Y+30, r24	; 0x1e
    1d42:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1d44:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1d46:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d48:	8a 95       	dec	r24
    1d4a:	f1 f7       	brne	.-4      	; 0x1d48 <LCD_voidInit+0x478>
    1d4c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(40);
	LCD_voidSendCmd(0b00000001);//clr
    1d4e:	81 e0       	ldi	r24, 0x01	; 1
    1d50:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <LCD_voidSendCmd>
    1d54:	80 e0       	ldi	r24, 0x00	; 0
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	a0 e0       	ldi	r26, 0x00	; 0
    1d5a:	b0 e4       	ldi	r27, 0x40	; 64
    1d5c:	8b 87       	std	Y+11, r24	; 0x0b
    1d5e:	9c 87       	std	Y+12, r25	; 0x0c
    1d60:	ad 87       	std	Y+13, r26	; 0x0d
    1d62:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d64:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d66:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d68:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d6a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d6c:	20 e0       	ldi	r18, 0x00	; 0
    1d6e:	30 e0       	ldi	r19, 0x00	; 0
    1d70:	4a ef       	ldi	r20, 0xFA	; 250
    1d72:	54 e4       	ldi	r21, 0x44	; 68
    1d74:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d78:	dc 01       	movw	r26, r24
    1d7a:	cb 01       	movw	r24, r22
    1d7c:	8f 83       	std	Y+7, r24	; 0x07
    1d7e:	98 87       	std	Y+8, r25	; 0x08
    1d80:	a9 87       	std	Y+9, r26	; 0x09
    1d82:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d84:	6f 81       	ldd	r22, Y+7	; 0x07
    1d86:	78 85       	ldd	r23, Y+8	; 0x08
    1d88:	89 85       	ldd	r24, Y+9	; 0x09
    1d8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d8c:	20 e0       	ldi	r18, 0x00	; 0
    1d8e:	30 e0       	ldi	r19, 0x00	; 0
    1d90:	40 e8       	ldi	r20, 0x80	; 128
    1d92:	5f e3       	ldi	r21, 0x3F	; 63
    1d94:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1d98:	88 23       	and	r24, r24
    1d9a:	2c f4       	brge	.+10     	; 0x1da6 <LCD_voidInit+0x4d6>
		__ticks = 1;
    1d9c:	81 e0       	ldi	r24, 0x01	; 1
    1d9e:	90 e0       	ldi	r25, 0x00	; 0
    1da0:	9e 83       	std	Y+6, r25	; 0x06
    1da2:	8d 83       	std	Y+5, r24	; 0x05
    1da4:	3f c0       	rjmp	.+126    	; 0x1e24 <LCD_voidInit+0x554>
	else if (__tmp > 65535)
    1da6:	6f 81       	ldd	r22, Y+7	; 0x07
    1da8:	78 85       	ldd	r23, Y+8	; 0x08
    1daa:	89 85       	ldd	r24, Y+9	; 0x09
    1dac:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dae:	20 e0       	ldi	r18, 0x00	; 0
    1db0:	3f ef       	ldi	r19, 0xFF	; 255
    1db2:	4f e7       	ldi	r20, 0x7F	; 127
    1db4:	57 e4       	ldi	r21, 0x47	; 71
    1db6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1dba:	18 16       	cp	r1, r24
    1dbc:	4c f5       	brge	.+82     	; 0x1e10 <LCD_voidInit+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dbe:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dc0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dc2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dc4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dc6:	20 e0       	ldi	r18, 0x00	; 0
    1dc8:	30 e0       	ldi	r19, 0x00	; 0
    1dca:	40 e2       	ldi	r20, 0x20	; 32
    1dcc:	51 e4       	ldi	r21, 0x41	; 65
    1dce:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dd2:	dc 01       	movw	r26, r24
    1dd4:	cb 01       	movw	r24, r22
    1dd6:	bc 01       	movw	r22, r24
    1dd8:	cd 01       	movw	r24, r26
    1dda:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1dde:	dc 01       	movw	r26, r24
    1de0:	cb 01       	movw	r24, r22
    1de2:	9e 83       	std	Y+6, r25	; 0x06
    1de4:	8d 83       	std	Y+5, r24	; 0x05
    1de6:	0f c0       	rjmp	.+30     	; 0x1e06 <LCD_voidInit+0x536>
    1de8:	88 ec       	ldi	r24, 0xC8	; 200
    1dea:	90 e0       	ldi	r25, 0x00	; 0
    1dec:	9c 83       	std	Y+4, r25	; 0x04
    1dee:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1df0:	8b 81       	ldd	r24, Y+3	; 0x03
    1df2:	9c 81       	ldd	r25, Y+4	; 0x04
    1df4:	01 97       	sbiw	r24, 0x01	; 1
    1df6:	f1 f7       	brne	.-4      	; 0x1df4 <LCD_voidInit+0x524>
    1df8:	9c 83       	std	Y+4, r25	; 0x04
    1dfa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dfc:	8d 81       	ldd	r24, Y+5	; 0x05
    1dfe:	9e 81       	ldd	r25, Y+6	; 0x06
    1e00:	01 97       	sbiw	r24, 0x01	; 1
    1e02:	9e 83       	std	Y+6, r25	; 0x06
    1e04:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e06:	8d 81       	ldd	r24, Y+5	; 0x05
    1e08:	9e 81       	ldd	r25, Y+6	; 0x06
    1e0a:	00 97       	sbiw	r24, 0x00	; 0
    1e0c:	69 f7       	brne	.-38     	; 0x1de8 <LCD_voidInit+0x518>
    1e0e:	14 c0       	rjmp	.+40     	; 0x1e38 <LCD_voidInit+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e10:	6f 81       	ldd	r22, Y+7	; 0x07
    1e12:	78 85       	ldd	r23, Y+8	; 0x08
    1e14:	89 85       	ldd	r24, Y+9	; 0x09
    1e16:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e18:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e1c:	dc 01       	movw	r26, r24
    1e1e:	cb 01       	movw	r24, r22
    1e20:	9e 83       	std	Y+6, r25	; 0x06
    1e22:	8d 83       	std	Y+5, r24	; 0x05
    1e24:	8d 81       	ldd	r24, Y+5	; 0x05
    1e26:	9e 81       	ldd	r25, Y+6	; 0x06
    1e28:	9a 83       	std	Y+2, r25	; 0x02
    1e2a:	89 83       	std	Y+1, r24	; 0x01
    1e2c:	89 81       	ldd	r24, Y+1	; 0x01
    1e2e:	9a 81       	ldd	r25, Y+2	; 0x02
    1e30:	01 97       	sbiw	r24, 0x01	; 1
    1e32:	f1 f7       	brne	.-4      	; 0x1e30 <LCD_voidInit+0x560>
    1e34:	9a 83       	std	Y+2, r25	; 0x02
    1e36:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_voidSendCmd(0b00001110);//entry mode set
    1e38:	8e e0       	ldi	r24, 0x0E	; 14
    1e3a:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <LCD_voidSendCmd>

}
    1e3e:	c4 5b       	subi	r28, 0xB4	; 180
    1e40:	df 4f       	sbci	r29, 0xFF	; 255
    1e42:	0f b6       	in	r0, 0x3f	; 63
    1e44:	f8 94       	cli
    1e46:	de bf       	out	0x3e, r29	; 62
    1e48:	0f be       	out	0x3f, r0	; 63
    1e4a:	cd bf       	out	0x3d, r28	; 61
    1e4c:	cf 91       	pop	r28
    1e4e:	df 91       	pop	r29
    1e50:	1f 91       	pop	r17
    1e52:	0f 91       	pop	r16
    1e54:	08 95       	ret

00001e56 <LCD_voidSendCmd>:
void LCD_voidSendCmd(u8 Copy_u8Cmd)
{
    1e56:	df 93       	push	r29
    1e58:	cf 93       	push	r28
    1e5a:	cd b7       	in	r28, 0x3d	; 61
    1e5c:	de b7       	in	r29, 0x3e	; 62
    1e5e:	e1 97       	sbiw	r28, 0x31	; 49
    1e60:	0f b6       	in	r0, 0x3f	; 63
    1e62:	f8 94       	cli
    1e64:	de bf       	out	0x3e, r29	; 62
    1e66:	0f be       	out	0x3f, r0	; 63
    1e68:	cd bf       	out	0x3d, r28	; 61
    1e6a:	89 ab       	std	Y+49, r24	; 0x31
	//rs=0
	DIO_u8SetPinValue(CONTROL_PORT,RS_PIN,DIO_u8_LOW);
    1e6c:	82 e0       	ldi	r24, 0x02	; 2
    1e6e:	60 e0       	ldi	r22, 0x00	; 0
    1e70:	40 e0       	ldi	r20, 0x00	; 0
    1e72:	0e 94 3f 09 	call	0x127e	; 0x127e <DIO_u8SetPinValue>
	//rw=0
	DIO_u8SetPinValue(CONTROL_PORT,RW_PIN,DIO_u8_LOW);
    1e76:	82 e0       	ldi	r24, 0x02	; 2
    1e78:	61 e0       	ldi	r22, 0x01	; 1
    1e7a:	40 e0       	ldi	r20, 0x00	; 0
    1e7c:	0e 94 3f 09 	call	0x127e	; 0x127e <DIO_u8SetPinValue>
	//send cmd byte to the data pins of LCD
	DIO_u8SetPortValue(DATA_PORT,Copy_u8Cmd);
    1e80:	83 e0       	ldi	r24, 0x03	; 3
    1e82:	69 a9       	ldd	r22, Y+49	; 0x31
    1e84:	0e 94 c8 0b 	call	0x1790	; 0x1790 <DIO_u8SetPortValue>
	//enable pulse e=1,e=0
	DIO_u8SetPinValue(CONTROL_PORT,E_PIN,DIO_u8_HIGH);
    1e88:	82 e0       	ldi	r24, 0x02	; 2
    1e8a:	62 e0       	ldi	r22, 0x02	; 2
    1e8c:	41 e0       	ldi	r20, 0x01	; 1
    1e8e:	0e 94 3f 09 	call	0x127e	; 0x127e <DIO_u8SetPinValue>
    1e92:	80 e0       	ldi	r24, 0x00	; 0
    1e94:	90 e0       	ldi	r25, 0x00	; 0
    1e96:	a0 e8       	ldi	r26, 0x80	; 128
    1e98:	bf e3       	ldi	r27, 0x3F	; 63
    1e9a:	8d a7       	std	Y+45, r24	; 0x2d
    1e9c:	9e a7       	std	Y+46, r25	; 0x2e
    1e9e:	af a7       	std	Y+47, r26	; 0x2f
    1ea0:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1ea2:	6d a5       	ldd	r22, Y+45	; 0x2d
    1ea4:	7e a5       	ldd	r23, Y+46	; 0x2e
    1ea6:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ea8:	98 a9       	ldd	r25, Y+48	; 0x30
    1eaa:	2b ea       	ldi	r18, 0xAB	; 171
    1eac:	3a ea       	ldi	r19, 0xAA	; 170
    1eae:	4a e2       	ldi	r20, 0x2A	; 42
    1eb0:	50 e4       	ldi	r21, 0x40	; 64
    1eb2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1eb6:	dc 01       	movw	r26, r24
    1eb8:	cb 01       	movw	r24, r22
    1eba:	89 a7       	std	Y+41, r24	; 0x29
    1ebc:	9a a7       	std	Y+42, r25	; 0x2a
    1ebe:	ab a7       	std	Y+43, r26	; 0x2b
    1ec0:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1ec2:	69 a5       	ldd	r22, Y+41	; 0x29
    1ec4:	7a a5       	ldd	r23, Y+42	; 0x2a
    1ec6:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ec8:	9c a5       	ldd	r25, Y+44	; 0x2c
    1eca:	20 e0       	ldi	r18, 0x00	; 0
    1ecc:	30 e0       	ldi	r19, 0x00	; 0
    1ece:	40 e8       	ldi	r20, 0x80	; 128
    1ed0:	5f e3       	ldi	r21, 0x3F	; 63
    1ed2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1ed6:	88 23       	and	r24, r24
    1ed8:	1c f4       	brge	.+6      	; 0x1ee0 <LCD_voidSendCmd+0x8a>
		__ticks = 1;
    1eda:	81 e0       	ldi	r24, 0x01	; 1
    1edc:	88 a7       	std	Y+40, r24	; 0x28
    1ede:	91 c0       	rjmp	.+290    	; 0x2002 <LCD_voidSendCmd+0x1ac>
	else if (__tmp > 255)
    1ee0:	69 a5       	ldd	r22, Y+41	; 0x29
    1ee2:	7a a5       	ldd	r23, Y+42	; 0x2a
    1ee4:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ee6:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ee8:	20 e0       	ldi	r18, 0x00	; 0
    1eea:	30 e0       	ldi	r19, 0x00	; 0
    1eec:	4f e7       	ldi	r20, 0x7F	; 127
    1eee:	53 e4       	ldi	r21, 0x43	; 67
    1ef0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1ef4:	18 16       	cp	r1, r24
    1ef6:	0c f0       	brlt	.+2      	; 0x1efa <LCD_voidSendCmd+0xa4>
    1ef8:	7b c0       	rjmp	.+246    	; 0x1ff0 <LCD_voidSendCmd+0x19a>
	{
		_delay_ms(__us / 1000.0);
    1efa:	6d a5       	ldd	r22, Y+45	; 0x2d
    1efc:	7e a5       	ldd	r23, Y+46	; 0x2e
    1efe:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f00:	98 a9       	ldd	r25, Y+48	; 0x30
    1f02:	20 e0       	ldi	r18, 0x00	; 0
    1f04:	30 e0       	ldi	r19, 0x00	; 0
    1f06:	4a e7       	ldi	r20, 0x7A	; 122
    1f08:	54 e4       	ldi	r21, 0x44	; 68
    1f0a:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1f0e:	dc 01       	movw	r26, r24
    1f10:	cb 01       	movw	r24, r22
    1f12:	8c a3       	std	Y+36, r24	; 0x24
    1f14:	9d a3       	std	Y+37, r25	; 0x25
    1f16:	ae a3       	std	Y+38, r26	; 0x26
    1f18:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f1a:	6c a1       	ldd	r22, Y+36	; 0x24
    1f1c:	7d a1       	ldd	r23, Y+37	; 0x25
    1f1e:	8e a1       	ldd	r24, Y+38	; 0x26
    1f20:	9f a1       	ldd	r25, Y+39	; 0x27
    1f22:	20 e0       	ldi	r18, 0x00	; 0
    1f24:	30 e0       	ldi	r19, 0x00	; 0
    1f26:	4a ef       	ldi	r20, 0xFA	; 250
    1f28:	54 e4       	ldi	r21, 0x44	; 68
    1f2a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f2e:	dc 01       	movw	r26, r24
    1f30:	cb 01       	movw	r24, r22
    1f32:	88 a3       	std	Y+32, r24	; 0x20
    1f34:	99 a3       	std	Y+33, r25	; 0x21
    1f36:	aa a3       	std	Y+34, r26	; 0x22
    1f38:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1f3a:	68 a1       	ldd	r22, Y+32	; 0x20
    1f3c:	79 a1       	ldd	r23, Y+33	; 0x21
    1f3e:	8a a1       	ldd	r24, Y+34	; 0x22
    1f40:	9b a1       	ldd	r25, Y+35	; 0x23
    1f42:	20 e0       	ldi	r18, 0x00	; 0
    1f44:	30 e0       	ldi	r19, 0x00	; 0
    1f46:	40 e8       	ldi	r20, 0x80	; 128
    1f48:	5f e3       	ldi	r21, 0x3F	; 63
    1f4a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1f4e:	88 23       	and	r24, r24
    1f50:	2c f4       	brge	.+10     	; 0x1f5c <LCD_voidSendCmd+0x106>
		__ticks = 1;
    1f52:	81 e0       	ldi	r24, 0x01	; 1
    1f54:	90 e0       	ldi	r25, 0x00	; 0
    1f56:	9f 8f       	std	Y+31, r25	; 0x1f
    1f58:	8e 8f       	std	Y+30, r24	; 0x1e
    1f5a:	3f c0       	rjmp	.+126    	; 0x1fda <LCD_voidSendCmd+0x184>
	else if (__tmp > 65535)
    1f5c:	68 a1       	ldd	r22, Y+32	; 0x20
    1f5e:	79 a1       	ldd	r23, Y+33	; 0x21
    1f60:	8a a1       	ldd	r24, Y+34	; 0x22
    1f62:	9b a1       	ldd	r25, Y+35	; 0x23
    1f64:	20 e0       	ldi	r18, 0x00	; 0
    1f66:	3f ef       	ldi	r19, 0xFF	; 255
    1f68:	4f e7       	ldi	r20, 0x7F	; 127
    1f6a:	57 e4       	ldi	r21, 0x47	; 71
    1f6c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1f70:	18 16       	cp	r1, r24
    1f72:	4c f5       	brge	.+82     	; 0x1fc6 <LCD_voidSendCmd+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f74:	6c a1       	ldd	r22, Y+36	; 0x24
    1f76:	7d a1       	ldd	r23, Y+37	; 0x25
    1f78:	8e a1       	ldd	r24, Y+38	; 0x26
    1f7a:	9f a1       	ldd	r25, Y+39	; 0x27
    1f7c:	20 e0       	ldi	r18, 0x00	; 0
    1f7e:	30 e0       	ldi	r19, 0x00	; 0
    1f80:	40 e2       	ldi	r20, 0x20	; 32
    1f82:	51 e4       	ldi	r21, 0x41	; 65
    1f84:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f88:	dc 01       	movw	r26, r24
    1f8a:	cb 01       	movw	r24, r22
    1f8c:	bc 01       	movw	r22, r24
    1f8e:	cd 01       	movw	r24, r26
    1f90:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f94:	dc 01       	movw	r26, r24
    1f96:	cb 01       	movw	r24, r22
    1f98:	9f 8f       	std	Y+31, r25	; 0x1f
    1f9a:	8e 8f       	std	Y+30, r24	; 0x1e
    1f9c:	0f c0       	rjmp	.+30     	; 0x1fbc <LCD_voidSendCmd+0x166>
    1f9e:	88 ec       	ldi	r24, 0xC8	; 200
    1fa0:	90 e0       	ldi	r25, 0x00	; 0
    1fa2:	9d 8f       	std	Y+29, r25	; 0x1d
    1fa4:	8c 8f       	std	Y+28, r24	; 0x1c
    1fa6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1fa8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1faa:	01 97       	sbiw	r24, 0x01	; 1
    1fac:	f1 f7       	brne	.-4      	; 0x1faa <LCD_voidSendCmd+0x154>
    1fae:	9d 8f       	std	Y+29, r25	; 0x1d
    1fb0:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fb2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1fb4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1fb6:	01 97       	sbiw	r24, 0x01	; 1
    1fb8:	9f 8f       	std	Y+31, r25	; 0x1f
    1fba:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fbc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1fbe:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1fc0:	00 97       	sbiw	r24, 0x00	; 0
    1fc2:	69 f7       	brne	.-38     	; 0x1f9e <LCD_voidSendCmd+0x148>
    1fc4:	24 c0       	rjmp	.+72     	; 0x200e <LCD_voidSendCmd+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fc6:	68 a1       	ldd	r22, Y+32	; 0x20
    1fc8:	79 a1       	ldd	r23, Y+33	; 0x21
    1fca:	8a a1       	ldd	r24, Y+34	; 0x22
    1fcc:	9b a1       	ldd	r25, Y+35	; 0x23
    1fce:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fd2:	dc 01       	movw	r26, r24
    1fd4:	cb 01       	movw	r24, r22
    1fd6:	9f 8f       	std	Y+31, r25	; 0x1f
    1fd8:	8e 8f       	std	Y+30, r24	; 0x1e
    1fda:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1fdc:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1fde:	9b 8f       	std	Y+27, r25	; 0x1b
    1fe0:	8a 8f       	std	Y+26, r24	; 0x1a
    1fe2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1fe4:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1fe6:	01 97       	sbiw	r24, 0x01	; 1
    1fe8:	f1 f7       	brne	.-4      	; 0x1fe6 <LCD_voidSendCmd+0x190>
    1fea:	9b 8f       	std	Y+27, r25	; 0x1b
    1fec:	8a 8f       	std	Y+26, r24	; 0x1a
    1fee:	0f c0       	rjmp	.+30     	; 0x200e <LCD_voidSendCmd+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1ff0:	69 a5       	ldd	r22, Y+41	; 0x29
    1ff2:	7a a5       	ldd	r23, Y+42	; 0x2a
    1ff4:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ff6:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ff8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ffc:	dc 01       	movw	r26, r24
    1ffe:	cb 01       	movw	r24, r22
    2000:	88 a7       	std	Y+40, r24	; 0x28
    2002:	88 a5       	ldd	r24, Y+40	; 0x28
    2004:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2006:	89 8d       	ldd	r24, Y+25	; 0x19
    2008:	8a 95       	dec	r24
    200a:	f1 f7       	brne	.-4      	; 0x2008 <LCD_voidSendCmd+0x1b2>
    200c:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1);
	DIO_u8SetPinValue(CONTROL_PORT,E_PIN,DIO_u8_LOW);
    200e:	82 e0       	ldi	r24, 0x02	; 2
    2010:	62 e0       	ldi	r22, 0x02	; 2
    2012:	40 e0       	ldi	r20, 0x00	; 0
    2014:	0e 94 3f 09 	call	0x127e	; 0x127e <DIO_u8SetPinValue>
    2018:	80 e0       	ldi	r24, 0x00	; 0
    201a:	90 e0       	ldi	r25, 0x00	; 0
    201c:	a0 e8       	ldi	r26, 0x80	; 128
    201e:	bf e3       	ldi	r27, 0x3F	; 63
    2020:	8d 8b       	std	Y+21, r24	; 0x15
    2022:	9e 8b       	std	Y+22, r25	; 0x16
    2024:	af 8b       	std	Y+23, r26	; 0x17
    2026:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2028:	6d 89       	ldd	r22, Y+21	; 0x15
    202a:	7e 89       	ldd	r23, Y+22	; 0x16
    202c:	8f 89       	ldd	r24, Y+23	; 0x17
    202e:	98 8d       	ldd	r25, Y+24	; 0x18
    2030:	2b ea       	ldi	r18, 0xAB	; 171
    2032:	3a ea       	ldi	r19, 0xAA	; 170
    2034:	4a e2       	ldi	r20, 0x2A	; 42
    2036:	50 e4       	ldi	r21, 0x40	; 64
    2038:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    203c:	dc 01       	movw	r26, r24
    203e:	cb 01       	movw	r24, r22
    2040:	89 8b       	std	Y+17, r24	; 0x11
    2042:	9a 8b       	std	Y+18, r25	; 0x12
    2044:	ab 8b       	std	Y+19, r26	; 0x13
    2046:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2048:	69 89       	ldd	r22, Y+17	; 0x11
    204a:	7a 89       	ldd	r23, Y+18	; 0x12
    204c:	8b 89       	ldd	r24, Y+19	; 0x13
    204e:	9c 89       	ldd	r25, Y+20	; 0x14
    2050:	20 e0       	ldi	r18, 0x00	; 0
    2052:	30 e0       	ldi	r19, 0x00	; 0
    2054:	40 e8       	ldi	r20, 0x80	; 128
    2056:	5f e3       	ldi	r21, 0x3F	; 63
    2058:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    205c:	88 23       	and	r24, r24
    205e:	1c f4       	brge	.+6      	; 0x2066 <LCD_voidSendCmd+0x210>
		__ticks = 1;
    2060:	81 e0       	ldi	r24, 0x01	; 1
    2062:	88 8b       	std	Y+16, r24	; 0x10
    2064:	91 c0       	rjmp	.+290    	; 0x2188 <LCD_voidSendCmd+0x332>
	else if (__tmp > 255)
    2066:	69 89       	ldd	r22, Y+17	; 0x11
    2068:	7a 89       	ldd	r23, Y+18	; 0x12
    206a:	8b 89       	ldd	r24, Y+19	; 0x13
    206c:	9c 89       	ldd	r25, Y+20	; 0x14
    206e:	20 e0       	ldi	r18, 0x00	; 0
    2070:	30 e0       	ldi	r19, 0x00	; 0
    2072:	4f e7       	ldi	r20, 0x7F	; 127
    2074:	53 e4       	ldi	r21, 0x43	; 67
    2076:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    207a:	18 16       	cp	r1, r24
    207c:	0c f0       	brlt	.+2      	; 0x2080 <LCD_voidSendCmd+0x22a>
    207e:	7b c0       	rjmp	.+246    	; 0x2176 <LCD_voidSendCmd+0x320>
	{
		_delay_ms(__us / 1000.0);
    2080:	6d 89       	ldd	r22, Y+21	; 0x15
    2082:	7e 89       	ldd	r23, Y+22	; 0x16
    2084:	8f 89       	ldd	r24, Y+23	; 0x17
    2086:	98 8d       	ldd	r25, Y+24	; 0x18
    2088:	20 e0       	ldi	r18, 0x00	; 0
    208a:	30 e0       	ldi	r19, 0x00	; 0
    208c:	4a e7       	ldi	r20, 0x7A	; 122
    208e:	54 e4       	ldi	r21, 0x44	; 68
    2090:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2094:	dc 01       	movw	r26, r24
    2096:	cb 01       	movw	r24, r22
    2098:	8c 87       	std	Y+12, r24	; 0x0c
    209a:	9d 87       	std	Y+13, r25	; 0x0d
    209c:	ae 87       	std	Y+14, r26	; 0x0e
    209e:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20a0:	6c 85       	ldd	r22, Y+12	; 0x0c
    20a2:	7d 85       	ldd	r23, Y+13	; 0x0d
    20a4:	8e 85       	ldd	r24, Y+14	; 0x0e
    20a6:	9f 85       	ldd	r25, Y+15	; 0x0f
    20a8:	20 e0       	ldi	r18, 0x00	; 0
    20aa:	30 e0       	ldi	r19, 0x00	; 0
    20ac:	4a ef       	ldi	r20, 0xFA	; 250
    20ae:	54 e4       	ldi	r21, 0x44	; 68
    20b0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20b4:	dc 01       	movw	r26, r24
    20b6:	cb 01       	movw	r24, r22
    20b8:	88 87       	std	Y+8, r24	; 0x08
    20ba:	99 87       	std	Y+9, r25	; 0x09
    20bc:	aa 87       	std	Y+10, r26	; 0x0a
    20be:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    20c0:	68 85       	ldd	r22, Y+8	; 0x08
    20c2:	79 85       	ldd	r23, Y+9	; 0x09
    20c4:	8a 85       	ldd	r24, Y+10	; 0x0a
    20c6:	9b 85       	ldd	r25, Y+11	; 0x0b
    20c8:	20 e0       	ldi	r18, 0x00	; 0
    20ca:	30 e0       	ldi	r19, 0x00	; 0
    20cc:	40 e8       	ldi	r20, 0x80	; 128
    20ce:	5f e3       	ldi	r21, 0x3F	; 63
    20d0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    20d4:	88 23       	and	r24, r24
    20d6:	2c f4       	brge	.+10     	; 0x20e2 <LCD_voidSendCmd+0x28c>
		__ticks = 1;
    20d8:	81 e0       	ldi	r24, 0x01	; 1
    20da:	90 e0       	ldi	r25, 0x00	; 0
    20dc:	9f 83       	std	Y+7, r25	; 0x07
    20de:	8e 83       	std	Y+6, r24	; 0x06
    20e0:	3f c0       	rjmp	.+126    	; 0x2160 <LCD_voidSendCmd+0x30a>
	else if (__tmp > 65535)
    20e2:	68 85       	ldd	r22, Y+8	; 0x08
    20e4:	79 85       	ldd	r23, Y+9	; 0x09
    20e6:	8a 85       	ldd	r24, Y+10	; 0x0a
    20e8:	9b 85       	ldd	r25, Y+11	; 0x0b
    20ea:	20 e0       	ldi	r18, 0x00	; 0
    20ec:	3f ef       	ldi	r19, 0xFF	; 255
    20ee:	4f e7       	ldi	r20, 0x7F	; 127
    20f0:	57 e4       	ldi	r21, 0x47	; 71
    20f2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    20f6:	18 16       	cp	r1, r24
    20f8:	4c f5       	brge	.+82     	; 0x214c <LCD_voidSendCmd+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20fa:	6c 85       	ldd	r22, Y+12	; 0x0c
    20fc:	7d 85       	ldd	r23, Y+13	; 0x0d
    20fe:	8e 85       	ldd	r24, Y+14	; 0x0e
    2100:	9f 85       	ldd	r25, Y+15	; 0x0f
    2102:	20 e0       	ldi	r18, 0x00	; 0
    2104:	30 e0       	ldi	r19, 0x00	; 0
    2106:	40 e2       	ldi	r20, 0x20	; 32
    2108:	51 e4       	ldi	r21, 0x41	; 65
    210a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    210e:	dc 01       	movw	r26, r24
    2110:	cb 01       	movw	r24, r22
    2112:	bc 01       	movw	r22, r24
    2114:	cd 01       	movw	r24, r26
    2116:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    211a:	dc 01       	movw	r26, r24
    211c:	cb 01       	movw	r24, r22
    211e:	9f 83       	std	Y+7, r25	; 0x07
    2120:	8e 83       	std	Y+6, r24	; 0x06
    2122:	0f c0       	rjmp	.+30     	; 0x2142 <LCD_voidSendCmd+0x2ec>
    2124:	88 ec       	ldi	r24, 0xC8	; 200
    2126:	90 e0       	ldi	r25, 0x00	; 0
    2128:	9d 83       	std	Y+5, r25	; 0x05
    212a:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    212c:	8c 81       	ldd	r24, Y+4	; 0x04
    212e:	9d 81       	ldd	r25, Y+5	; 0x05
    2130:	01 97       	sbiw	r24, 0x01	; 1
    2132:	f1 f7       	brne	.-4      	; 0x2130 <LCD_voidSendCmd+0x2da>
    2134:	9d 83       	std	Y+5, r25	; 0x05
    2136:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2138:	8e 81       	ldd	r24, Y+6	; 0x06
    213a:	9f 81       	ldd	r25, Y+7	; 0x07
    213c:	01 97       	sbiw	r24, 0x01	; 1
    213e:	9f 83       	std	Y+7, r25	; 0x07
    2140:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2142:	8e 81       	ldd	r24, Y+6	; 0x06
    2144:	9f 81       	ldd	r25, Y+7	; 0x07
    2146:	00 97       	sbiw	r24, 0x00	; 0
    2148:	69 f7       	brne	.-38     	; 0x2124 <LCD_voidSendCmd+0x2ce>
    214a:	24 c0       	rjmp	.+72     	; 0x2194 <LCD_voidSendCmd+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    214c:	68 85       	ldd	r22, Y+8	; 0x08
    214e:	79 85       	ldd	r23, Y+9	; 0x09
    2150:	8a 85       	ldd	r24, Y+10	; 0x0a
    2152:	9b 85       	ldd	r25, Y+11	; 0x0b
    2154:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2158:	dc 01       	movw	r26, r24
    215a:	cb 01       	movw	r24, r22
    215c:	9f 83       	std	Y+7, r25	; 0x07
    215e:	8e 83       	std	Y+6, r24	; 0x06
    2160:	8e 81       	ldd	r24, Y+6	; 0x06
    2162:	9f 81       	ldd	r25, Y+7	; 0x07
    2164:	9b 83       	std	Y+3, r25	; 0x03
    2166:	8a 83       	std	Y+2, r24	; 0x02
    2168:	8a 81       	ldd	r24, Y+2	; 0x02
    216a:	9b 81       	ldd	r25, Y+3	; 0x03
    216c:	01 97       	sbiw	r24, 0x01	; 1
    216e:	f1 f7       	brne	.-4      	; 0x216c <LCD_voidSendCmd+0x316>
    2170:	9b 83       	std	Y+3, r25	; 0x03
    2172:	8a 83       	std	Y+2, r24	; 0x02
    2174:	0f c0       	rjmp	.+30     	; 0x2194 <LCD_voidSendCmd+0x33e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2176:	69 89       	ldd	r22, Y+17	; 0x11
    2178:	7a 89       	ldd	r23, Y+18	; 0x12
    217a:	8b 89       	ldd	r24, Y+19	; 0x13
    217c:	9c 89       	ldd	r25, Y+20	; 0x14
    217e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2182:	dc 01       	movw	r26, r24
    2184:	cb 01       	movw	r24, r22
    2186:	88 8b       	std	Y+16, r24	; 0x10
    2188:	88 89       	ldd	r24, Y+16	; 0x10
    218a:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    218c:	89 81       	ldd	r24, Y+1	; 0x01
    218e:	8a 95       	dec	r24
    2190:	f1 f7       	brne	.-4      	; 0x218e <LCD_voidSendCmd+0x338>
    2192:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
}
    2194:	e1 96       	adiw	r28, 0x31	; 49
    2196:	0f b6       	in	r0, 0x3f	; 63
    2198:	f8 94       	cli
    219a:	de bf       	out	0x3e, r29	; 62
    219c:	0f be       	out	0x3f, r0	; 63
    219e:	cd bf       	out	0x3d, r28	; 61
    21a0:	cf 91       	pop	r28
    21a2:	df 91       	pop	r29
    21a4:	08 95       	ret

000021a6 <LCD_voidSendChar>:
void LCD_voidSendChar(u8 Copy_u8Char)
{
    21a6:	df 93       	push	r29
    21a8:	cf 93       	push	r28
    21aa:	cd b7       	in	r28, 0x3d	; 61
    21ac:	de b7       	in	r29, 0x3e	; 62
    21ae:	e1 97       	sbiw	r28, 0x31	; 49
    21b0:	0f b6       	in	r0, 0x3f	; 63
    21b2:	f8 94       	cli
    21b4:	de bf       	out	0x3e, r29	; 62
    21b6:	0f be       	out	0x3f, r0	; 63
    21b8:	cd bf       	out	0x3d, r28	; 61
    21ba:	89 ab       	std	Y+49, r24	; 0x31
	//rs=1
	DIO_u8SetPinValue(CONTROL_PORT,RS_PIN,DIO_u8_HIGH);
    21bc:	82 e0       	ldi	r24, 0x02	; 2
    21be:	60 e0       	ldi	r22, 0x00	; 0
    21c0:	41 e0       	ldi	r20, 0x01	; 1
    21c2:	0e 94 3f 09 	call	0x127e	; 0x127e <DIO_u8SetPinValue>
	//rw=0
	DIO_u8SetPinValue(CONTROL_PORT,RW_PIN,DIO_u8_LOW);
    21c6:	82 e0       	ldi	r24, 0x02	; 2
    21c8:	61 e0       	ldi	r22, 0x01	; 1
    21ca:	40 e0       	ldi	r20, 0x00	; 0
    21cc:	0e 94 3f 09 	call	0x127e	; 0x127e <DIO_u8SetPinValue>
	//send cmd byte to the data pins of LCD
	DIO_u8SetPortValue(DATA_PORT,Copy_u8Char);
    21d0:	83 e0       	ldi	r24, 0x03	; 3
    21d2:	69 a9       	ldd	r22, Y+49	; 0x31
    21d4:	0e 94 c8 0b 	call	0x1790	; 0x1790 <DIO_u8SetPortValue>
	//enable pulse e=1,e=0
	DIO_u8SetPinValue(CONTROL_PORT,E_PIN,DIO_u8_HIGH);
    21d8:	82 e0       	ldi	r24, 0x02	; 2
    21da:	62 e0       	ldi	r22, 0x02	; 2
    21dc:	41 e0       	ldi	r20, 0x01	; 1
    21de:	0e 94 3f 09 	call	0x127e	; 0x127e <DIO_u8SetPinValue>
    21e2:	80 e0       	ldi	r24, 0x00	; 0
    21e4:	90 e0       	ldi	r25, 0x00	; 0
    21e6:	a0 e8       	ldi	r26, 0x80	; 128
    21e8:	bf e3       	ldi	r27, 0x3F	; 63
    21ea:	8d a7       	std	Y+45, r24	; 0x2d
    21ec:	9e a7       	std	Y+46, r25	; 0x2e
    21ee:	af a7       	std	Y+47, r26	; 0x2f
    21f0:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    21f2:	6d a5       	ldd	r22, Y+45	; 0x2d
    21f4:	7e a5       	ldd	r23, Y+46	; 0x2e
    21f6:	8f a5       	ldd	r24, Y+47	; 0x2f
    21f8:	98 a9       	ldd	r25, Y+48	; 0x30
    21fa:	2b ea       	ldi	r18, 0xAB	; 171
    21fc:	3a ea       	ldi	r19, 0xAA	; 170
    21fe:	4a e2       	ldi	r20, 0x2A	; 42
    2200:	50 e4       	ldi	r21, 0x40	; 64
    2202:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2206:	dc 01       	movw	r26, r24
    2208:	cb 01       	movw	r24, r22
    220a:	89 a7       	std	Y+41, r24	; 0x29
    220c:	9a a7       	std	Y+42, r25	; 0x2a
    220e:	ab a7       	std	Y+43, r26	; 0x2b
    2210:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2212:	69 a5       	ldd	r22, Y+41	; 0x29
    2214:	7a a5       	ldd	r23, Y+42	; 0x2a
    2216:	8b a5       	ldd	r24, Y+43	; 0x2b
    2218:	9c a5       	ldd	r25, Y+44	; 0x2c
    221a:	20 e0       	ldi	r18, 0x00	; 0
    221c:	30 e0       	ldi	r19, 0x00	; 0
    221e:	40 e8       	ldi	r20, 0x80	; 128
    2220:	5f e3       	ldi	r21, 0x3F	; 63
    2222:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2226:	88 23       	and	r24, r24
    2228:	1c f4       	brge	.+6      	; 0x2230 <LCD_voidSendChar+0x8a>
		__ticks = 1;
    222a:	81 e0       	ldi	r24, 0x01	; 1
    222c:	88 a7       	std	Y+40, r24	; 0x28
    222e:	91 c0       	rjmp	.+290    	; 0x2352 <LCD_voidSendChar+0x1ac>
	else if (__tmp > 255)
    2230:	69 a5       	ldd	r22, Y+41	; 0x29
    2232:	7a a5       	ldd	r23, Y+42	; 0x2a
    2234:	8b a5       	ldd	r24, Y+43	; 0x2b
    2236:	9c a5       	ldd	r25, Y+44	; 0x2c
    2238:	20 e0       	ldi	r18, 0x00	; 0
    223a:	30 e0       	ldi	r19, 0x00	; 0
    223c:	4f e7       	ldi	r20, 0x7F	; 127
    223e:	53 e4       	ldi	r21, 0x43	; 67
    2240:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2244:	18 16       	cp	r1, r24
    2246:	0c f0       	brlt	.+2      	; 0x224a <LCD_voidSendChar+0xa4>
    2248:	7b c0       	rjmp	.+246    	; 0x2340 <LCD_voidSendChar+0x19a>
	{
		_delay_ms(__us / 1000.0);
    224a:	6d a5       	ldd	r22, Y+45	; 0x2d
    224c:	7e a5       	ldd	r23, Y+46	; 0x2e
    224e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2250:	98 a9       	ldd	r25, Y+48	; 0x30
    2252:	20 e0       	ldi	r18, 0x00	; 0
    2254:	30 e0       	ldi	r19, 0x00	; 0
    2256:	4a e7       	ldi	r20, 0x7A	; 122
    2258:	54 e4       	ldi	r21, 0x44	; 68
    225a:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    225e:	dc 01       	movw	r26, r24
    2260:	cb 01       	movw	r24, r22
    2262:	8c a3       	std	Y+36, r24	; 0x24
    2264:	9d a3       	std	Y+37, r25	; 0x25
    2266:	ae a3       	std	Y+38, r26	; 0x26
    2268:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    226a:	6c a1       	ldd	r22, Y+36	; 0x24
    226c:	7d a1       	ldd	r23, Y+37	; 0x25
    226e:	8e a1       	ldd	r24, Y+38	; 0x26
    2270:	9f a1       	ldd	r25, Y+39	; 0x27
    2272:	20 e0       	ldi	r18, 0x00	; 0
    2274:	30 e0       	ldi	r19, 0x00	; 0
    2276:	4a ef       	ldi	r20, 0xFA	; 250
    2278:	54 e4       	ldi	r21, 0x44	; 68
    227a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    227e:	dc 01       	movw	r26, r24
    2280:	cb 01       	movw	r24, r22
    2282:	88 a3       	std	Y+32, r24	; 0x20
    2284:	99 a3       	std	Y+33, r25	; 0x21
    2286:	aa a3       	std	Y+34, r26	; 0x22
    2288:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    228a:	68 a1       	ldd	r22, Y+32	; 0x20
    228c:	79 a1       	ldd	r23, Y+33	; 0x21
    228e:	8a a1       	ldd	r24, Y+34	; 0x22
    2290:	9b a1       	ldd	r25, Y+35	; 0x23
    2292:	20 e0       	ldi	r18, 0x00	; 0
    2294:	30 e0       	ldi	r19, 0x00	; 0
    2296:	40 e8       	ldi	r20, 0x80	; 128
    2298:	5f e3       	ldi	r21, 0x3F	; 63
    229a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    229e:	88 23       	and	r24, r24
    22a0:	2c f4       	brge	.+10     	; 0x22ac <LCD_voidSendChar+0x106>
		__ticks = 1;
    22a2:	81 e0       	ldi	r24, 0x01	; 1
    22a4:	90 e0       	ldi	r25, 0x00	; 0
    22a6:	9f 8f       	std	Y+31, r25	; 0x1f
    22a8:	8e 8f       	std	Y+30, r24	; 0x1e
    22aa:	3f c0       	rjmp	.+126    	; 0x232a <LCD_voidSendChar+0x184>
	else if (__tmp > 65535)
    22ac:	68 a1       	ldd	r22, Y+32	; 0x20
    22ae:	79 a1       	ldd	r23, Y+33	; 0x21
    22b0:	8a a1       	ldd	r24, Y+34	; 0x22
    22b2:	9b a1       	ldd	r25, Y+35	; 0x23
    22b4:	20 e0       	ldi	r18, 0x00	; 0
    22b6:	3f ef       	ldi	r19, 0xFF	; 255
    22b8:	4f e7       	ldi	r20, 0x7F	; 127
    22ba:	57 e4       	ldi	r21, 0x47	; 71
    22bc:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    22c0:	18 16       	cp	r1, r24
    22c2:	4c f5       	brge	.+82     	; 0x2316 <LCD_voidSendChar+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22c4:	6c a1       	ldd	r22, Y+36	; 0x24
    22c6:	7d a1       	ldd	r23, Y+37	; 0x25
    22c8:	8e a1       	ldd	r24, Y+38	; 0x26
    22ca:	9f a1       	ldd	r25, Y+39	; 0x27
    22cc:	20 e0       	ldi	r18, 0x00	; 0
    22ce:	30 e0       	ldi	r19, 0x00	; 0
    22d0:	40 e2       	ldi	r20, 0x20	; 32
    22d2:	51 e4       	ldi	r21, 0x41	; 65
    22d4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22d8:	dc 01       	movw	r26, r24
    22da:	cb 01       	movw	r24, r22
    22dc:	bc 01       	movw	r22, r24
    22de:	cd 01       	movw	r24, r26
    22e0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22e4:	dc 01       	movw	r26, r24
    22e6:	cb 01       	movw	r24, r22
    22e8:	9f 8f       	std	Y+31, r25	; 0x1f
    22ea:	8e 8f       	std	Y+30, r24	; 0x1e
    22ec:	0f c0       	rjmp	.+30     	; 0x230c <LCD_voidSendChar+0x166>
    22ee:	88 ec       	ldi	r24, 0xC8	; 200
    22f0:	90 e0       	ldi	r25, 0x00	; 0
    22f2:	9d 8f       	std	Y+29, r25	; 0x1d
    22f4:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    22f6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    22f8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    22fa:	01 97       	sbiw	r24, 0x01	; 1
    22fc:	f1 f7       	brne	.-4      	; 0x22fa <LCD_voidSendChar+0x154>
    22fe:	9d 8f       	std	Y+29, r25	; 0x1d
    2300:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2302:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2304:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2306:	01 97       	sbiw	r24, 0x01	; 1
    2308:	9f 8f       	std	Y+31, r25	; 0x1f
    230a:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    230c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    230e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2310:	00 97       	sbiw	r24, 0x00	; 0
    2312:	69 f7       	brne	.-38     	; 0x22ee <LCD_voidSendChar+0x148>
    2314:	24 c0       	rjmp	.+72     	; 0x235e <LCD_voidSendChar+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2316:	68 a1       	ldd	r22, Y+32	; 0x20
    2318:	79 a1       	ldd	r23, Y+33	; 0x21
    231a:	8a a1       	ldd	r24, Y+34	; 0x22
    231c:	9b a1       	ldd	r25, Y+35	; 0x23
    231e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2322:	dc 01       	movw	r26, r24
    2324:	cb 01       	movw	r24, r22
    2326:	9f 8f       	std	Y+31, r25	; 0x1f
    2328:	8e 8f       	std	Y+30, r24	; 0x1e
    232a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    232c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    232e:	9b 8f       	std	Y+27, r25	; 0x1b
    2330:	8a 8f       	std	Y+26, r24	; 0x1a
    2332:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2334:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2336:	01 97       	sbiw	r24, 0x01	; 1
    2338:	f1 f7       	brne	.-4      	; 0x2336 <LCD_voidSendChar+0x190>
    233a:	9b 8f       	std	Y+27, r25	; 0x1b
    233c:	8a 8f       	std	Y+26, r24	; 0x1a
    233e:	0f c0       	rjmp	.+30     	; 0x235e <LCD_voidSendChar+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2340:	69 a5       	ldd	r22, Y+41	; 0x29
    2342:	7a a5       	ldd	r23, Y+42	; 0x2a
    2344:	8b a5       	ldd	r24, Y+43	; 0x2b
    2346:	9c a5       	ldd	r25, Y+44	; 0x2c
    2348:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    234c:	dc 01       	movw	r26, r24
    234e:	cb 01       	movw	r24, r22
    2350:	88 a7       	std	Y+40, r24	; 0x28
    2352:	88 a5       	ldd	r24, Y+40	; 0x28
    2354:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2356:	89 8d       	ldd	r24, Y+25	; 0x19
    2358:	8a 95       	dec	r24
    235a:	f1 f7       	brne	.-4      	; 0x2358 <LCD_voidSendChar+0x1b2>
    235c:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1);
	DIO_u8SetPinValue(CONTROL_PORT,E_PIN,DIO_u8_LOW);
    235e:	82 e0       	ldi	r24, 0x02	; 2
    2360:	62 e0       	ldi	r22, 0x02	; 2
    2362:	40 e0       	ldi	r20, 0x00	; 0
    2364:	0e 94 3f 09 	call	0x127e	; 0x127e <DIO_u8SetPinValue>
    2368:	80 e0       	ldi	r24, 0x00	; 0
    236a:	90 e0       	ldi	r25, 0x00	; 0
    236c:	a0 e8       	ldi	r26, 0x80	; 128
    236e:	bf e3       	ldi	r27, 0x3F	; 63
    2370:	8d 8b       	std	Y+21, r24	; 0x15
    2372:	9e 8b       	std	Y+22, r25	; 0x16
    2374:	af 8b       	std	Y+23, r26	; 0x17
    2376:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2378:	6d 89       	ldd	r22, Y+21	; 0x15
    237a:	7e 89       	ldd	r23, Y+22	; 0x16
    237c:	8f 89       	ldd	r24, Y+23	; 0x17
    237e:	98 8d       	ldd	r25, Y+24	; 0x18
    2380:	2b ea       	ldi	r18, 0xAB	; 171
    2382:	3a ea       	ldi	r19, 0xAA	; 170
    2384:	4a e2       	ldi	r20, 0x2A	; 42
    2386:	50 e4       	ldi	r21, 0x40	; 64
    2388:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    238c:	dc 01       	movw	r26, r24
    238e:	cb 01       	movw	r24, r22
    2390:	89 8b       	std	Y+17, r24	; 0x11
    2392:	9a 8b       	std	Y+18, r25	; 0x12
    2394:	ab 8b       	std	Y+19, r26	; 0x13
    2396:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2398:	69 89       	ldd	r22, Y+17	; 0x11
    239a:	7a 89       	ldd	r23, Y+18	; 0x12
    239c:	8b 89       	ldd	r24, Y+19	; 0x13
    239e:	9c 89       	ldd	r25, Y+20	; 0x14
    23a0:	20 e0       	ldi	r18, 0x00	; 0
    23a2:	30 e0       	ldi	r19, 0x00	; 0
    23a4:	40 e8       	ldi	r20, 0x80	; 128
    23a6:	5f e3       	ldi	r21, 0x3F	; 63
    23a8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    23ac:	88 23       	and	r24, r24
    23ae:	1c f4       	brge	.+6      	; 0x23b6 <LCD_voidSendChar+0x210>
		__ticks = 1;
    23b0:	81 e0       	ldi	r24, 0x01	; 1
    23b2:	88 8b       	std	Y+16, r24	; 0x10
    23b4:	91 c0       	rjmp	.+290    	; 0x24d8 <LCD_voidSendChar+0x332>
	else if (__tmp > 255)
    23b6:	69 89       	ldd	r22, Y+17	; 0x11
    23b8:	7a 89       	ldd	r23, Y+18	; 0x12
    23ba:	8b 89       	ldd	r24, Y+19	; 0x13
    23bc:	9c 89       	ldd	r25, Y+20	; 0x14
    23be:	20 e0       	ldi	r18, 0x00	; 0
    23c0:	30 e0       	ldi	r19, 0x00	; 0
    23c2:	4f e7       	ldi	r20, 0x7F	; 127
    23c4:	53 e4       	ldi	r21, 0x43	; 67
    23c6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    23ca:	18 16       	cp	r1, r24
    23cc:	0c f0       	brlt	.+2      	; 0x23d0 <LCD_voidSendChar+0x22a>
    23ce:	7b c0       	rjmp	.+246    	; 0x24c6 <LCD_voidSendChar+0x320>
	{
		_delay_ms(__us / 1000.0);
    23d0:	6d 89       	ldd	r22, Y+21	; 0x15
    23d2:	7e 89       	ldd	r23, Y+22	; 0x16
    23d4:	8f 89       	ldd	r24, Y+23	; 0x17
    23d6:	98 8d       	ldd	r25, Y+24	; 0x18
    23d8:	20 e0       	ldi	r18, 0x00	; 0
    23da:	30 e0       	ldi	r19, 0x00	; 0
    23dc:	4a e7       	ldi	r20, 0x7A	; 122
    23de:	54 e4       	ldi	r21, 0x44	; 68
    23e0:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    23e4:	dc 01       	movw	r26, r24
    23e6:	cb 01       	movw	r24, r22
    23e8:	8c 87       	std	Y+12, r24	; 0x0c
    23ea:	9d 87       	std	Y+13, r25	; 0x0d
    23ec:	ae 87       	std	Y+14, r26	; 0x0e
    23ee:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23f0:	6c 85       	ldd	r22, Y+12	; 0x0c
    23f2:	7d 85       	ldd	r23, Y+13	; 0x0d
    23f4:	8e 85       	ldd	r24, Y+14	; 0x0e
    23f6:	9f 85       	ldd	r25, Y+15	; 0x0f
    23f8:	20 e0       	ldi	r18, 0x00	; 0
    23fa:	30 e0       	ldi	r19, 0x00	; 0
    23fc:	4a ef       	ldi	r20, 0xFA	; 250
    23fe:	54 e4       	ldi	r21, 0x44	; 68
    2400:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2404:	dc 01       	movw	r26, r24
    2406:	cb 01       	movw	r24, r22
    2408:	88 87       	std	Y+8, r24	; 0x08
    240a:	99 87       	std	Y+9, r25	; 0x09
    240c:	aa 87       	std	Y+10, r26	; 0x0a
    240e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2410:	68 85       	ldd	r22, Y+8	; 0x08
    2412:	79 85       	ldd	r23, Y+9	; 0x09
    2414:	8a 85       	ldd	r24, Y+10	; 0x0a
    2416:	9b 85       	ldd	r25, Y+11	; 0x0b
    2418:	20 e0       	ldi	r18, 0x00	; 0
    241a:	30 e0       	ldi	r19, 0x00	; 0
    241c:	40 e8       	ldi	r20, 0x80	; 128
    241e:	5f e3       	ldi	r21, 0x3F	; 63
    2420:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2424:	88 23       	and	r24, r24
    2426:	2c f4       	brge	.+10     	; 0x2432 <LCD_voidSendChar+0x28c>
		__ticks = 1;
    2428:	81 e0       	ldi	r24, 0x01	; 1
    242a:	90 e0       	ldi	r25, 0x00	; 0
    242c:	9f 83       	std	Y+7, r25	; 0x07
    242e:	8e 83       	std	Y+6, r24	; 0x06
    2430:	3f c0       	rjmp	.+126    	; 0x24b0 <LCD_voidSendChar+0x30a>
	else if (__tmp > 65535)
    2432:	68 85       	ldd	r22, Y+8	; 0x08
    2434:	79 85       	ldd	r23, Y+9	; 0x09
    2436:	8a 85       	ldd	r24, Y+10	; 0x0a
    2438:	9b 85       	ldd	r25, Y+11	; 0x0b
    243a:	20 e0       	ldi	r18, 0x00	; 0
    243c:	3f ef       	ldi	r19, 0xFF	; 255
    243e:	4f e7       	ldi	r20, 0x7F	; 127
    2440:	57 e4       	ldi	r21, 0x47	; 71
    2442:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2446:	18 16       	cp	r1, r24
    2448:	4c f5       	brge	.+82     	; 0x249c <LCD_voidSendChar+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    244a:	6c 85       	ldd	r22, Y+12	; 0x0c
    244c:	7d 85       	ldd	r23, Y+13	; 0x0d
    244e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2450:	9f 85       	ldd	r25, Y+15	; 0x0f
    2452:	20 e0       	ldi	r18, 0x00	; 0
    2454:	30 e0       	ldi	r19, 0x00	; 0
    2456:	40 e2       	ldi	r20, 0x20	; 32
    2458:	51 e4       	ldi	r21, 0x41	; 65
    245a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    245e:	dc 01       	movw	r26, r24
    2460:	cb 01       	movw	r24, r22
    2462:	bc 01       	movw	r22, r24
    2464:	cd 01       	movw	r24, r26
    2466:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    246a:	dc 01       	movw	r26, r24
    246c:	cb 01       	movw	r24, r22
    246e:	9f 83       	std	Y+7, r25	; 0x07
    2470:	8e 83       	std	Y+6, r24	; 0x06
    2472:	0f c0       	rjmp	.+30     	; 0x2492 <LCD_voidSendChar+0x2ec>
    2474:	88 ec       	ldi	r24, 0xC8	; 200
    2476:	90 e0       	ldi	r25, 0x00	; 0
    2478:	9d 83       	std	Y+5, r25	; 0x05
    247a:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    247c:	8c 81       	ldd	r24, Y+4	; 0x04
    247e:	9d 81       	ldd	r25, Y+5	; 0x05
    2480:	01 97       	sbiw	r24, 0x01	; 1
    2482:	f1 f7       	brne	.-4      	; 0x2480 <LCD_voidSendChar+0x2da>
    2484:	9d 83       	std	Y+5, r25	; 0x05
    2486:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2488:	8e 81       	ldd	r24, Y+6	; 0x06
    248a:	9f 81       	ldd	r25, Y+7	; 0x07
    248c:	01 97       	sbiw	r24, 0x01	; 1
    248e:	9f 83       	std	Y+7, r25	; 0x07
    2490:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2492:	8e 81       	ldd	r24, Y+6	; 0x06
    2494:	9f 81       	ldd	r25, Y+7	; 0x07
    2496:	00 97       	sbiw	r24, 0x00	; 0
    2498:	69 f7       	brne	.-38     	; 0x2474 <LCD_voidSendChar+0x2ce>
    249a:	24 c0       	rjmp	.+72     	; 0x24e4 <LCD_voidSendChar+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    249c:	68 85       	ldd	r22, Y+8	; 0x08
    249e:	79 85       	ldd	r23, Y+9	; 0x09
    24a0:	8a 85       	ldd	r24, Y+10	; 0x0a
    24a2:	9b 85       	ldd	r25, Y+11	; 0x0b
    24a4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24a8:	dc 01       	movw	r26, r24
    24aa:	cb 01       	movw	r24, r22
    24ac:	9f 83       	std	Y+7, r25	; 0x07
    24ae:	8e 83       	std	Y+6, r24	; 0x06
    24b0:	8e 81       	ldd	r24, Y+6	; 0x06
    24b2:	9f 81       	ldd	r25, Y+7	; 0x07
    24b4:	9b 83       	std	Y+3, r25	; 0x03
    24b6:	8a 83       	std	Y+2, r24	; 0x02
    24b8:	8a 81       	ldd	r24, Y+2	; 0x02
    24ba:	9b 81       	ldd	r25, Y+3	; 0x03
    24bc:	01 97       	sbiw	r24, 0x01	; 1
    24be:	f1 f7       	brne	.-4      	; 0x24bc <LCD_voidSendChar+0x316>
    24c0:	9b 83       	std	Y+3, r25	; 0x03
    24c2:	8a 83       	std	Y+2, r24	; 0x02
    24c4:	0f c0       	rjmp	.+30     	; 0x24e4 <LCD_voidSendChar+0x33e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    24c6:	69 89       	ldd	r22, Y+17	; 0x11
    24c8:	7a 89       	ldd	r23, Y+18	; 0x12
    24ca:	8b 89       	ldd	r24, Y+19	; 0x13
    24cc:	9c 89       	ldd	r25, Y+20	; 0x14
    24ce:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24d2:	dc 01       	movw	r26, r24
    24d4:	cb 01       	movw	r24, r22
    24d6:	88 8b       	std	Y+16, r24	; 0x10
    24d8:	88 89       	ldd	r24, Y+16	; 0x10
    24da:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    24dc:	89 81       	ldd	r24, Y+1	; 0x01
    24de:	8a 95       	dec	r24
    24e0:	f1 f7       	brne	.-4      	; 0x24de <LCD_voidSendChar+0x338>
    24e2:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
}
    24e4:	e1 96       	adiw	r28, 0x31	; 49
    24e6:	0f b6       	in	r0, 0x3f	; 63
    24e8:	f8 94       	cli
    24ea:	de bf       	out	0x3e, r29	; 62
    24ec:	0f be       	out	0x3f, r0	; 63
    24ee:	cd bf       	out	0x3d, r28	; 61
    24f0:	cf 91       	pop	r28
    24f2:	df 91       	pop	r29
    24f4:	08 95       	ret

000024f6 <LCD_voidSendString>:
void LCD_voidSendString(u8 *Copy_up8Arr)
{
    24f6:	df 93       	push	r29
    24f8:	cf 93       	push	r28
    24fa:	00 d0       	rcall	.+0      	; 0x24fc <LCD_voidSendString+0x6>
    24fc:	00 d0       	rcall	.+0      	; 0x24fe <LCD_voidSendString+0x8>
    24fe:	cd b7       	in	r28, 0x3d	; 61
    2500:	de b7       	in	r29, 0x3e	; 62
    2502:	9c 83       	std	Y+4, r25	; 0x04
    2504:	8b 83       	std	Y+3, r24	; 0x03
	int i=0;
    2506:	1a 82       	std	Y+2, r1	; 0x02
    2508:	19 82       	std	Y+1, r1	; 0x01
    250a:	0f c0       	rjmp	.+30     	; 0x252a <LCD_voidSendString+0x34>
	while (Copy_up8Arr[i]!=0)
	{
		LCD_voidSendChar(Copy_up8Arr[i]);
    250c:	29 81       	ldd	r18, Y+1	; 0x01
    250e:	3a 81       	ldd	r19, Y+2	; 0x02
    2510:	8b 81       	ldd	r24, Y+3	; 0x03
    2512:	9c 81       	ldd	r25, Y+4	; 0x04
    2514:	fc 01       	movw	r30, r24
    2516:	e2 0f       	add	r30, r18
    2518:	f3 1f       	adc	r31, r19
    251a:	80 81       	ld	r24, Z
    251c:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <LCD_voidSendChar>
		i++;
    2520:	89 81       	ldd	r24, Y+1	; 0x01
    2522:	9a 81       	ldd	r25, Y+2	; 0x02
    2524:	01 96       	adiw	r24, 0x01	; 1
    2526:	9a 83       	std	Y+2, r25	; 0x02
    2528:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
}
void LCD_voidSendString(u8 *Copy_up8Arr)
{
	int i=0;
	while (Copy_up8Arr[i]!=0)
    252a:	29 81       	ldd	r18, Y+1	; 0x01
    252c:	3a 81       	ldd	r19, Y+2	; 0x02
    252e:	8b 81       	ldd	r24, Y+3	; 0x03
    2530:	9c 81       	ldd	r25, Y+4	; 0x04
    2532:	fc 01       	movw	r30, r24
    2534:	e2 0f       	add	r30, r18
    2536:	f3 1f       	adc	r31, r19
    2538:	80 81       	ld	r24, Z
    253a:	88 23       	and	r24, r24
    253c:	39 f7       	brne	.-50     	; 0x250c <LCD_voidSendString+0x16>
		i++;

	}


}
    253e:	0f 90       	pop	r0
    2540:	0f 90       	pop	r0
    2542:	0f 90       	pop	r0
    2544:	0f 90       	pop	r0
    2546:	cf 91       	pop	r28
    2548:	df 91       	pop	r29
    254a:	08 95       	ret

0000254c <LCD_voidClear>:
void LCD_voidClear(void)
{
    254c:	df 93       	push	r29
    254e:	cf 93       	push	r28
    2550:	cd b7       	in	r28, 0x3d	; 61
    2552:	de b7       	in	r29, 0x3e	; 62
	LCD_voidSendCmd(0b0000000001);
    2554:	81 e0       	ldi	r24, 0x01	; 1
    2556:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <LCD_voidSendCmd>
}
    255a:	cf 91       	pop	r28
    255c:	df 91       	pop	r29
    255e:	08 95       	ret

00002560 <LCD_voidGoToRowColumn>:
void LCD_voidGoToRowColumn(u8 Copy_u8Row,u8 Copy_u8Column)
{
    2560:	df 93       	push	r29
    2562:	cf 93       	push	r28
    2564:	00 d0       	rcall	.+0      	; 0x2566 <LCD_voidGoToRowColumn+0x6>
    2566:	00 d0       	rcall	.+0      	; 0x2568 <LCD_voidGoToRowColumn+0x8>
    2568:	cd b7       	in	r28, 0x3d	; 61
    256a:	de b7       	in	r29, 0x3e	; 62
    256c:	89 83       	std	Y+1, r24	; 0x01
    256e:	6a 83       	std	Y+2, r22	; 0x02
	if((Copy_u8Row <= ROW2) && (Copy_u8Column < 39))
    2570:	89 81       	ldd	r24, Y+1	; 0x01
    2572:	82 30       	cpi	r24, 0x02	; 2
    2574:	d8 f4       	brcc	.+54     	; 0x25ac <LCD_voidGoToRowColumn+0x4c>
    2576:	8a 81       	ldd	r24, Y+2	; 0x02
    2578:	87 32       	cpi	r24, 0x27	; 39
    257a:	c0 f4       	brcc	.+48     	; 0x25ac <LCD_voidGoToRowColumn+0x4c>
	{
		switch(Copy_u8Row)
    257c:	89 81       	ldd	r24, Y+1	; 0x01
    257e:	28 2f       	mov	r18, r24
    2580:	30 e0       	ldi	r19, 0x00	; 0
    2582:	3c 83       	std	Y+4, r19	; 0x04
    2584:	2b 83       	std	Y+3, r18	; 0x03
    2586:	8b 81       	ldd	r24, Y+3	; 0x03
    2588:	9c 81       	ldd	r25, Y+4	; 0x04
    258a:	00 97       	sbiw	r24, 0x00	; 0
    258c:	31 f0       	breq	.+12     	; 0x259a <LCD_voidGoToRowColumn+0x3a>
    258e:	2b 81       	ldd	r18, Y+3	; 0x03
    2590:	3c 81       	ldd	r19, Y+4	; 0x04
    2592:	21 30       	cpi	r18, 0x01	; 1
    2594:	31 05       	cpc	r19, r1
    2596:	31 f0       	breq	.+12     	; 0x25a4 <LCD_voidGoToRowColumn+0x44>
    2598:	09 c0       	rjmp	.+18     	; 0x25ac <LCD_voidGoToRowColumn+0x4c>
		{
		case ROW1:{LCD_voidSendCmd(0x80+Copy_u8Column);break;}
    259a:	8a 81       	ldd	r24, Y+2	; 0x02
    259c:	80 58       	subi	r24, 0x80	; 128
    259e:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <LCD_voidSendCmd>
    25a2:	04 c0       	rjmp	.+8      	; 0x25ac <LCD_voidGoToRowColumn+0x4c>
		case ROW2:{LCD_voidSendCmd(0xC0+Copy_u8Column);break;}
    25a4:	8a 81       	ldd	r24, Y+2	; 0x02
    25a6:	80 54       	subi	r24, 0x40	; 64
    25a8:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <LCD_voidSendCmd>
		}
	}
}
    25ac:	0f 90       	pop	r0
    25ae:	0f 90       	pop	r0
    25b0:	0f 90       	pop	r0
    25b2:	0f 90       	pop	r0
    25b4:	cf 91       	pop	r28
    25b6:	df 91       	pop	r29
    25b8:	08 95       	ret

000025ba <LCD_voidSendSpecialChar>:
{
	  Array[i]=num%10;
	  Array[i+1]=int(num/10);
}*/
void LCD_voidSendSpecialChar(u8 Copy_u8Index,u8* Copy_pu8SpecialChar,u8 Copy_u8Row,u8 Copy_u8Column)
{
    25ba:	df 93       	push	r29
    25bc:	cf 93       	push	r28
    25be:	cd b7       	in	r28, 0x3d	; 61
    25c0:	de b7       	in	r29, 0x3e	; 62
    25c2:	28 97       	sbiw	r28, 0x08	; 8
    25c4:	0f b6       	in	r0, 0x3f	; 63
    25c6:	f8 94       	cli
    25c8:	de bf       	out	0x3e, r29	; 62
    25ca:	0f be       	out	0x3f, r0	; 63
    25cc:	cd bf       	out	0x3d, r28	; 61
    25ce:	8c 83       	std	Y+4, r24	; 0x04
    25d0:	7e 83       	std	Y+6, r23	; 0x06
    25d2:	6d 83       	std	Y+5, r22	; 0x05
    25d4:	4f 83       	std	Y+7, r20	; 0x07
    25d6:	28 87       	std	Y+8, r18	; 0x08
	u8 Local;
	Local=Copy_u8Index*8;
    25d8:	8c 81       	ldd	r24, Y+4	; 0x04
    25da:	88 2f       	mov	r24, r24
    25dc:	90 e0       	ldi	r25, 0x00	; 0
    25de:	88 0f       	add	r24, r24
    25e0:	99 1f       	adc	r25, r25
    25e2:	88 0f       	add	r24, r24
    25e4:	99 1f       	adc	r25, r25
    25e6:	88 0f       	add	r24, r24
    25e8:	99 1f       	adc	r25, r25
    25ea:	8b 83       	std	Y+3, r24	; 0x03
	LCD_voidSendCmd(0b01000000+Local);//access CGRAM character 0
    25ec:	8b 81       	ldd	r24, Y+3	; 0x03
    25ee:	80 5c       	subi	r24, 0xC0	; 192
    25f0:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <LCD_voidSendCmd>
	for(int i=0;i<=8;i++)
    25f4:	1a 82       	std	Y+2, r1	; 0x02
    25f6:	19 82       	std	Y+1, r1	; 0x01
    25f8:	0f c0       	rjmp	.+30     	; 0x2618 <LCD_voidSendSpecialChar+0x5e>
	{
     LCD_voidSendChar(Copy_pu8SpecialChar[i]);
    25fa:	29 81       	ldd	r18, Y+1	; 0x01
    25fc:	3a 81       	ldd	r19, Y+2	; 0x02
    25fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2600:	9e 81       	ldd	r25, Y+6	; 0x06
    2602:	fc 01       	movw	r30, r24
    2604:	e2 0f       	add	r30, r18
    2606:	f3 1f       	adc	r31, r19
    2608:	80 81       	ld	r24, Z
    260a:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <LCD_voidSendChar>
void LCD_voidSendSpecialChar(u8 Copy_u8Index,u8* Copy_pu8SpecialChar,u8 Copy_u8Row,u8 Copy_u8Column)
{
	u8 Local;
	Local=Copy_u8Index*8;
	LCD_voidSendCmd(0b01000000+Local);//access CGRAM character 0
	for(int i=0;i<=8;i++)
    260e:	89 81       	ldd	r24, Y+1	; 0x01
    2610:	9a 81       	ldd	r25, Y+2	; 0x02
    2612:	01 96       	adiw	r24, 0x01	; 1
    2614:	9a 83       	std	Y+2, r25	; 0x02
    2616:	89 83       	std	Y+1, r24	; 0x01
    2618:	89 81       	ldd	r24, Y+1	; 0x01
    261a:	9a 81       	ldd	r25, Y+2	; 0x02
    261c:	89 30       	cpi	r24, 0x09	; 9
    261e:	91 05       	cpc	r25, r1
    2620:	64 f3       	brlt	.-40     	; 0x25fa <LCD_voidSendSpecialChar+0x40>
	{
     LCD_voidSendChar(Copy_pu8SpecialChar[i]);
	}

	LCD_voidGoToRowColumn(Copy_u8Row,Copy_u8Column);//access DDRAM
    2622:	8f 81       	ldd	r24, Y+7	; 0x07
    2624:	68 85       	ldd	r22, Y+8	; 0x08
    2626:	0e 94 b0 12 	call	0x2560	; 0x2560 <LCD_voidGoToRowColumn>
	LCD_voidSendChar(Copy_u8Index);
    262a:	8c 81       	ldd	r24, Y+4	; 0x04
    262c:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <LCD_voidSendChar>

}
    2630:	28 96       	adiw	r28, 0x08	; 8
    2632:	0f b6       	in	r0, 0x3f	; 63
    2634:	f8 94       	cli
    2636:	de bf       	out	0x3e, r29	; 62
    2638:	0f be       	out	0x3f, r0	; 63
    263a:	cd bf       	out	0x3d, r28	; 61
    263c:	cf 91       	pop	r28
    263e:	df 91       	pop	r29
    2640:	08 95       	ret

00002642 <LCD_voidSendNum>:
void LCD_voidSendNum(u32 Copy_u32Num)
{
    2642:	df 93       	push	r29
    2644:	cf 93       	push	r28
    2646:	cd b7       	in	r28, 0x3d	; 61
    2648:	de b7       	in	r29, 0x3e	; 62
    264a:	2e 97       	sbiw	r28, 0x0e	; 14
    264c:	0f b6       	in	r0, 0x3f	; 63
    264e:	f8 94       	cli
    2650:	de bf       	out	0x3e, r29	; 62
    2652:	0f be       	out	0x3f, r0	; 63
    2654:	cd bf       	out	0x3d, r28	; 61
    2656:	9e 87       	std	Y+14, r25	; 0x0e
    2658:	8d 87       	std	Y+13, r24	; 0x0d
	u8 l=0;u8 Arr[10];
    265a:	1a 82       	std	Y+2, r1	; 0x02
    265c:	1d c0       	rjmp	.+58     	; 0x2698 <LCD_voidSendNum+0x56>
	while(Copy_u32Num!=0)
	{
		Arr[l]=Copy_u32Num%10;
    265e:	8a 81       	ldd	r24, Y+2	; 0x02
    2660:	e8 2f       	mov	r30, r24
    2662:	f0 e0       	ldi	r31, 0x00	; 0
    2664:	8d 85       	ldd	r24, Y+13	; 0x0d
    2666:	9e 85       	ldd	r25, Y+14	; 0x0e
    2668:	2a e0       	ldi	r18, 0x0A	; 10
    266a:	30 e0       	ldi	r19, 0x00	; 0
    266c:	b9 01       	movw	r22, r18
    266e:	0e 94 90 13 	call	0x2720	; 0x2720 <__udivmodhi4>
    2672:	28 2f       	mov	r18, r24
    2674:	ce 01       	movw	r24, r28
    2676:	03 96       	adiw	r24, 0x03	; 3
    2678:	e8 0f       	add	r30, r24
    267a:	f9 1f       	adc	r31, r25
    267c:	20 83       	st	Z, r18
	    Copy_u32Num=(Copy_u32Num/10);
    267e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2680:	9e 85       	ldd	r25, Y+14	; 0x0e
    2682:	2a e0       	ldi	r18, 0x0A	; 10
    2684:	30 e0       	ldi	r19, 0x00	; 0
    2686:	b9 01       	movw	r22, r18
    2688:	0e 94 90 13 	call	0x2720	; 0x2720 <__udivmodhi4>
    268c:	cb 01       	movw	r24, r22
    268e:	9e 87       	std	Y+14, r25	; 0x0e
    2690:	8d 87       	std	Y+13, r24	; 0x0d
	    l++;
    2692:	8a 81       	ldd	r24, Y+2	; 0x02
    2694:	8f 5f       	subi	r24, 0xFF	; 255
    2696:	8a 83       	std	Y+2, r24	; 0x02

}
void LCD_voidSendNum(u32 Copy_u32Num)
{
	u8 l=0;u8 Arr[10];
	while(Copy_u32Num!=0)
    2698:	8d 85       	ldd	r24, Y+13	; 0x0d
    269a:	9e 85       	ldd	r25, Y+14	; 0x0e
    269c:	00 97       	sbiw	r24, 0x00	; 0
    269e:	f9 f6       	brne	.-66     	; 0x265e <LCD_voidSendNum+0x1c>
	{
		Arr[l]=Copy_u32Num%10;
	    Copy_u32Num=(Copy_u32Num/10);
	    l++;
	}
	for(s8 i=l-1;i>=0;i--)
    26a0:	8a 81       	ldd	r24, Y+2	; 0x02
    26a2:	81 50       	subi	r24, 0x01	; 1
    26a4:	89 83       	std	Y+1, r24	; 0x01
    26a6:	11 c0       	rjmp	.+34     	; 0x26ca <LCD_voidSendNum+0x88>
	{
		LCD_voidSendChar(Arr[i]+48);
    26a8:	89 81       	ldd	r24, Y+1	; 0x01
    26aa:	28 2f       	mov	r18, r24
    26ac:	33 27       	eor	r19, r19
    26ae:	27 fd       	sbrc	r18, 7
    26b0:	30 95       	com	r19
    26b2:	ce 01       	movw	r24, r28
    26b4:	03 96       	adiw	r24, 0x03	; 3
    26b6:	fc 01       	movw	r30, r24
    26b8:	e2 0f       	add	r30, r18
    26ba:	f3 1f       	adc	r31, r19
    26bc:	80 81       	ld	r24, Z
    26be:	80 5d       	subi	r24, 0xD0	; 208
    26c0:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <LCD_voidSendChar>
	{
		Arr[l]=Copy_u32Num%10;
	    Copy_u32Num=(Copy_u32Num/10);
	    l++;
	}
	for(s8 i=l-1;i>=0;i--)
    26c4:	89 81       	ldd	r24, Y+1	; 0x01
    26c6:	81 50       	subi	r24, 0x01	; 1
    26c8:	89 83       	std	Y+1, r24	; 0x01
    26ca:	89 81       	ldd	r24, Y+1	; 0x01
    26cc:	88 23       	and	r24, r24
    26ce:	64 f7       	brge	.-40     	; 0x26a8 <LCD_voidSendNum+0x66>
	{
		LCD_voidSendChar(Arr[i]+48);
    }
}
    26d0:	2e 96       	adiw	r28, 0x0e	; 14
    26d2:	0f b6       	in	r0, 0x3f	; 63
    26d4:	f8 94       	cli
    26d6:	de bf       	out	0x3e, r29	; 62
    26d8:	0f be       	out	0x3f, r0	; 63
    26da:	cd bf       	out	0x3d, r28	; 61
    26dc:	cf 91       	pop	r28
    26de:	df 91       	pop	r29
    26e0:	08 95       	ret

000026e2 <__mulsi3>:
    26e2:	62 9f       	mul	r22, r18
    26e4:	d0 01       	movw	r26, r0
    26e6:	73 9f       	mul	r23, r19
    26e8:	f0 01       	movw	r30, r0
    26ea:	82 9f       	mul	r24, r18
    26ec:	e0 0d       	add	r30, r0
    26ee:	f1 1d       	adc	r31, r1
    26f0:	64 9f       	mul	r22, r20
    26f2:	e0 0d       	add	r30, r0
    26f4:	f1 1d       	adc	r31, r1
    26f6:	92 9f       	mul	r25, r18
    26f8:	f0 0d       	add	r31, r0
    26fa:	83 9f       	mul	r24, r19
    26fc:	f0 0d       	add	r31, r0
    26fe:	74 9f       	mul	r23, r20
    2700:	f0 0d       	add	r31, r0
    2702:	65 9f       	mul	r22, r21
    2704:	f0 0d       	add	r31, r0
    2706:	99 27       	eor	r25, r25
    2708:	72 9f       	mul	r23, r18
    270a:	b0 0d       	add	r27, r0
    270c:	e1 1d       	adc	r30, r1
    270e:	f9 1f       	adc	r31, r25
    2710:	63 9f       	mul	r22, r19
    2712:	b0 0d       	add	r27, r0
    2714:	e1 1d       	adc	r30, r1
    2716:	f9 1f       	adc	r31, r25
    2718:	bd 01       	movw	r22, r26
    271a:	cf 01       	movw	r24, r30
    271c:	11 24       	eor	r1, r1
    271e:	08 95       	ret

00002720 <__udivmodhi4>:
    2720:	aa 1b       	sub	r26, r26
    2722:	bb 1b       	sub	r27, r27
    2724:	51 e1       	ldi	r21, 0x11	; 17
    2726:	07 c0       	rjmp	.+14     	; 0x2736 <__udivmodhi4_ep>

00002728 <__udivmodhi4_loop>:
    2728:	aa 1f       	adc	r26, r26
    272a:	bb 1f       	adc	r27, r27
    272c:	a6 17       	cp	r26, r22
    272e:	b7 07       	cpc	r27, r23
    2730:	10 f0       	brcs	.+4      	; 0x2736 <__udivmodhi4_ep>
    2732:	a6 1b       	sub	r26, r22
    2734:	b7 0b       	sbc	r27, r23

00002736 <__udivmodhi4_ep>:
    2736:	88 1f       	adc	r24, r24
    2738:	99 1f       	adc	r25, r25
    273a:	5a 95       	dec	r21
    273c:	a9 f7       	brne	.-22     	; 0x2728 <__udivmodhi4_loop>
    273e:	80 95       	com	r24
    2740:	90 95       	com	r25
    2742:	bc 01       	movw	r22, r24
    2744:	cd 01       	movw	r24, r26
    2746:	08 95       	ret

00002748 <__prologue_saves__>:
    2748:	2f 92       	push	r2
    274a:	3f 92       	push	r3
    274c:	4f 92       	push	r4
    274e:	5f 92       	push	r5
    2750:	6f 92       	push	r6
    2752:	7f 92       	push	r7
    2754:	8f 92       	push	r8
    2756:	9f 92       	push	r9
    2758:	af 92       	push	r10
    275a:	bf 92       	push	r11
    275c:	cf 92       	push	r12
    275e:	df 92       	push	r13
    2760:	ef 92       	push	r14
    2762:	ff 92       	push	r15
    2764:	0f 93       	push	r16
    2766:	1f 93       	push	r17
    2768:	cf 93       	push	r28
    276a:	df 93       	push	r29
    276c:	cd b7       	in	r28, 0x3d	; 61
    276e:	de b7       	in	r29, 0x3e	; 62
    2770:	ca 1b       	sub	r28, r26
    2772:	db 0b       	sbc	r29, r27
    2774:	0f b6       	in	r0, 0x3f	; 63
    2776:	f8 94       	cli
    2778:	de bf       	out	0x3e, r29	; 62
    277a:	0f be       	out	0x3f, r0	; 63
    277c:	cd bf       	out	0x3d, r28	; 61
    277e:	09 94       	ijmp

00002780 <__epilogue_restores__>:
    2780:	2a 88       	ldd	r2, Y+18	; 0x12
    2782:	39 88       	ldd	r3, Y+17	; 0x11
    2784:	48 88       	ldd	r4, Y+16	; 0x10
    2786:	5f 84       	ldd	r5, Y+15	; 0x0f
    2788:	6e 84       	ldd	r6, Y+14	; 0x0e
    278a:	7d 84       	ldd	r7, Y+13	; 0x0d
    278c:	8c 84       	ldd	r8, Y+12	; 0x0c
    278e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2790:	aa 84       	ldd	r10, Y+10	; 0x0a
    2792:	b9 84       	ldd	r11, Y+9	; 0x09
    2794:	c8 84       	ldd	r12, Y+8	; 0x08
    2796:	df 80       	ldd	r13, Y+7	; 0x07
    2798:	ee 80       	ldd	r14, Y+6	; 0x06
    279a:	fd 80       	ldd	r15, Y+5	; 0x05
    279c:	0c 81       	ldd	r16, Y+4	; 0x04
    279e:	1b 81       	ldd	r17, Y+3	; 0x03
    27a0:	aa 81       	ldd	r26, Y+2	; 0x02
    27a2:	b9 81       	ldd	r27, Y+1	; 0x01
    27a4:	ce 0f       	add	r28, r30
    27a6:	d1 1d       	adc	r29, r1
    27a8:	0f b6       	in	r0, 0x3f	; 63
    27aa:	f8 94       	cli
    27ac:	de bf       	out	0x3e, r29	; 62
    27ae:	0f be       	out	0x3f, r0	; 63
    27b0:	cd bf       	out	0x3d, r28	; 61
    27b2:	ed 01       	movw	r28, r26
    27b4:	08 95       	ret

000027b6 <_exit>:
    27b6:	f8 94       	cli

000027b8 <__stop_program>:
    27b8:	ff cf       	rjmp	.-2      	; 0x27b8 <__stop_program>
