
ADC2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002662  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00002662  000026d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001b78  00000000  00000000  000026e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000bce  00000000  00000000  00004258  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000160  00000000  00000000  00004e26  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000018f  00000000  00000000  00004f86  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002045  00000000  00000000  00005115  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001101  00000000  00000000  0000715a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f82  00000000  00000000  0000825b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  000091e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c2  00000000  00000000  00009360  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000088e  00000000  00000000  00009622  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00009eb0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e6       	ldi	r30, 0x62	; 98
      68:	f6 e2       	ldi	r31, 0x26	; 38
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 36       	cpi	r26, 0x68	; 104
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 47 06 	call	0xc8e	; 0xc8e <main>
      7a:	0c 94 2f 13 	jmp	0x265e	; 0x265e <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 f8 12 	jmp	0x25f0	; 0x25f0 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 14 13 	jmp	0x2628	; 0x2628 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 04 13 	jmp	0x2608	; 0x2608 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 20 13 	jmp	0x2640	; 0x2640 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 04 13 	jmp	0x2608	; 0x2608 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 20 13 	jmp	0x2640	; 0x2640 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 f8 12 	jmp	0x25f0	; 0x25f0 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 14 13 	jmp	0x2628	; 0x2628 <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 00 13 	jmp	0x2600	; 0x2600 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	60 e6       	ldi	r22, 0x60	; 96
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 1c 13 	jmp	0x2638	; 0x2638 <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 04 13 	jmp	0x2608	; 0x2608 <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 20 13 	jmp	0x2640	; 0x2640 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 04 13 	jmp	0x2608	; 0x2608 <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 20 13 	jmp	0x2640	; 0x2640 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 04 13 	jmp	0x2608	; 0x2608 <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 20 13 	jmp	0x2640	; 0x2640 <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 08 13 	jmp	0x2610	; 0x2610 <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 24 13 	jmp	0x2648	; 0x2648 <__epilogue_restores__+0x20>

00000942 <__pack_f>:
     942:	df 92       	push	r13
     944:	ef 92       	push	r14
     946:	ff 92       	push	r15
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
     94c:	fc 01       	movw	r30, r24
     94e:	e4 80       	ldd	r14, Z+4	; 0x04
     950:	f5 80       	ldd	r15, Z+5	; 0x05
     952:	06 81       	ldd	r16, Z+6	; 0x06
     954:	17 81       	ldd	r17, Z+7	; 0x07
     956:	d1 80       	ldd	r13, Z+1	; 0x01
     958:	80 81       	ld	r24, Z
     95a:	82 30       	cpi	r24, 0x02	; 2
     95c:	48 f4       	brcc	.+18     	; 0x970 <__pack_f+0x2e>
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	a0 e1       	ldi	r26, 0x10	; 16
     964:	b0 e0       	ldi	r27, 0x00	; 0
     966:	e8 2a       	or	r14, r24
     968:	f9 2a       	or	r15, r25
     96a:	0a 2b       	or	r16, r26
     96c:	1b 2b       	or	r17, r27
     96e:	a5 c0       	rjmp	.+330    	; 0xaba <__pack_f+0x178>
     970:	84 30       	cpi	r24, 0x04	; 4
     972:	09 f4       	brne	.+2      	; 0x976 <__pack_f+0x34>
     974:	9f c0       	rjmp	.+318    	; 0xab4 <__pack_f+0x172>
     976:	82 30       	cpi	r24, 0x02	; 2
     978:	21 f4       	brne	.+8      	; 0x982 <__pack_f+0x40>
     97a:	ee 24       	eor	r14, r14
     97c:	ff 24       	eor	r15, r15
     97e:	87 01       	movw	r16, r14
     980:	05 c0       	rjmp	.+10     	; 0x98c <__pack_f+0x4a>
     982:	e1 14       	cp	r14, r1
     984:	f1 04       	cpc	r15, r1
     986:	01 05       	cpc	r16, r1
     988:	11 05       	cpc	r17, r1
     98a:	19 f4       	brne	.+6      	; 0x992 <__pack_f+0x50>
     98c:	e0 e0       	ldi	r30, 0x00	; 0
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	96 c0       	rjmp	.+300    	; 0xabe <__pack_f+0x17c>
     992:	62 81       	ldd	r22, Z+2	; 0x02
     994:	73 81       	ldd	r23, Z+3	; 0x03
     996:	9f ef       	ldi	r25, 0xFF	; 255
     998:	62 38       	cpi	r22, 0x82	; 130
     99a:	79 07       	cpc	r23, r25
     99c:	0c f0       	brlt	.+2      	; 0x9a0 <__pack_f+0x5e>
     99e:	5b c0       	rjmp	.+182    	; 0xa56 <__pack_f+0x114>
     9a0:	22 e8       	ldi	r18, 0x82	; 130
     9a2:	3f ef       	ldi	r19, 0xFF	; 255
     9a4:	26 1b       	sub	r18, r22
     9a6:	37 0b       	sbc	r19, r23
     9a8:	2a 31       	cpi	r18, 0x1A	; 26
     9aa:	31 05       	cpc	r19, r1
     9ac:	2c f0       	brlt	.+10     	; 0x9b8 <__pack_f+0x76>
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	40 e0       	ldi	r20, 0x00	; 0
     9b4:	50 e0       	ldi	r21, 0x00	; 0
     9b6:	2a c0       	rjmp	.+84     	; 0xa0c <__pack_f+0xca>
     9b8:	b8 01       	movw	r22, r16
     9ba:	a7 01       	movw	r20, r14
     9bc:	02 2e       	mov	r0, r18
     9be:	04 c0       	rjmp	.+8      	; 0x9c8 <__pack_f+0x86>
     9c0:	76 95       	lsr	r23
     9c2:	67 95       	ror	r22
     9c4:	57 95       	ror	r21
     9c6:	47 95       	ror	r20
     9c8:	0a 94       	dec	r0
     9ca:	d2 f7       	brpl	.-12     	; 0x9c0 <__pack_f+0x7e>
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	a0 e0       	ldi	r26, 0x00	; 0
     9d2:	b0 e0       	ldi	r27, 0x00	; 0
     9d4:	04 c0       	rjmp	.+8      	; 0x9de <__pack_f+0x9c>
     9d6:	88 0f       	add	r24, r24
     9d8:	99 1f       	adc	r25, r25
     9da:	aa 1f       	adc	r26, r26
     9dc:	bb 1f       	adc	r27, r27
     9de:	2a 95       	dec	r18
     9e0:	d2 f7       	brpl	.-12     	; 0x9d6 <__pack_f+0x94>
     9e2:	01 97       	sbiw	r24, 0x01	; 1
     9e4:	a1 09       	sbc	r26, r1
     9e6:	b1 09       	sbc	r27, r1
     9e8:	8e 21       	and	r24, r14
     9ea:	9f 21       	and	r25, r15
     9ec:	a0 23       	and	r26, r16
     9ee:	b1 23       	and	r27, r17
     9f0:	00 97       	sbiw	r24, 0x00	; 0
     9f2:	a1 05       	cpc	r26, r1
     9f4:	b1 05       	cpc	r27, r1
     9f6:	21 f0       	breq	.+8      	; 0xa00 <__pack_f+0xbe>
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	a0 e0       	ldi	r26, 0x00	; 0
     9fe:	b0 e0       	ldi	r27, 0x00	; 0
     a00:	9a 01       	movw	r18, r20
     a02:	ab 01       	movw	r20, r22
     a04:	28 2b       	or	r18, r24
     a06:	39 2b       	or	r19, r25
     a08:	4a 2b       	or	r20, r26
     a0a:	5b 2b       	or	r21, r27
     a0c:	da 01       	movw	r26, r20
     a0e:	c9 01       	movw	r24, r18
     a10:	8f 77       	andi	r24, 0x7F	; 127
     a12:	90 70       	andi	r25, 0x00	; 0
     a14:	a0 70       	andi	r26, 0x00	; 0
     a16:	b0 70       	andi	r27, 0x00	; 0
     a18:	80 34       	cpi	r24, 0x40	; 64
     a1a:	91 05       	cpc	r25, r1
     a1c:	a1 05       	cpc	r26, r1
     a1e:	b1 05       	cpc	r27, r1
     a20:	39 f4       	brne	.+14     	; 0xa30 <__pack_f+0xee>
     a22:	27 ff       	sbrs	r18, 7
     a24:	09 c0       	rjmp	.+18     	; 0xa38 <__pack_f+0xf6>
     a26:	20 5c       	subi	r18, 0xC0	; 192
     a28:	3f 4f       	sbci	r19, 0xFF	; 255
     a2a:	4f 4f       	sbci	r20, 0xFF	; 255
     a2c:	5f 4f       	sbci	r21, 0xFF	; 255
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <__pack_f+0xf6>
     a30:	21 5c       	subi	r18, 0xC1	; 193
     a32:	3f 4f       	sbci	r19, 0xFF	; 255
     a34:	4f 4f       	sbci	r20, 0xFF	; 255
     a36:	5f 4f       	sbci	r21, 0xFF	; 255
     a38:	e0 e0       	ldi	r30, 0x00	; 0
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	20 30       	cpi	r18, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	3a 07       	cpc	r19, r26
     a42:	a0 e0       	ldi	r26, 0x00	; 0
     a44:	4a 07       	cpc	r20, r26
     a46:	a0 e4       	ldi	r26, 0x40	; 64
     a48:	5a 07       	cpc	r21, r26
     a4a:	10 f0       	brcs	.+4      	; 0xa50 <__pack_f+0x10e>
     a4c:	e1 e0       	ldi	r30, 0x01	; 1
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	79 01       	movw	r14, r18
     a52:	8a 01       	movw	r16, r20
     a54:	27 c0       	rjmp	.+78     	; 0xaa4 <__pack_f+0x162>
     a56:	60 38       	cpi	r22, 0x80	; 128
     a58:	71 05       	cpc	r23, r1
     a5a:	64 f5       	brge	.+88     	; 0xab4 <__pack_f+0x172>
     a5c:	fb 01       	movw	r30, r22
     a5e:	e1 58       	subi	r30, 0x81	; 129
     a60:	ff 4f       	sbci	r31, 0xFF	; 255
     a62:	d8 01       	movw	r26, r16
     a64:	c7 01       	movw	r24, r14
     a66:	8f 77       	andi	r24, 0x7F	; 127
     a68:	90 70       	andi	r25, 0x00	; 0
     a6a:	a0 70       	andi	r26, 0x00	; 0
     a6c:	b0 70       	andi	r27, 0x00	; 0
     a6e:	80 34       	cpi	r24, 0x40	; 64
     a70:	91 05       	cpc	r25, r1
     a72:	a1 05       	cpc	r26, r1
     a74:	b1 05       	cpc	r27, r1
     a76:	39 f4       	brne	.+14     	; 0xa86 <__pack_f+0x144>
     a78:	e7 fe       	sbrs	r14, 7
     a7a:	0d c0       	rjmp	.+26     	; 0xa96 <__pack_f+0x154>
     a7c:	80 e4       	ldi	r24, 0x40	; 64
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	a0 e0       	ldi	r26, 0x00	; 0
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <__pack_f+0x14c>
     a86:	8f e3       	ldi	r24, 0x3F	; 63
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	e8 0e       	add	r14, r24
     a90:	f9 1e       	adc	r15, r25
     a92:	0a 1f       	adc	r16, r26
     a94:	1b 1f       	adc	r17, r27
     a96:	17 ff       	sbrs	r17, 7
     a98:	05 c0       	rjmp	.+10     	; 0xaa4 <__pack_f+0x162>
     a9a:	16 95       	lsr	r17
     a9c:	07 95       	ror	r16
     a9e:	f7 94       	ror	r15
     aa0:	e7 94       	ror	r14
     aa2:	31 96       	adiw	r30, 0x01	; 1
     aa4:	87 e0       	ldi	r24, 0x07	; 7
     aa6:	16 95       	lsr	r17
     aa8:	07 95       	ror	r16
     aaa:	f7 94       	ror	r15
     aac:	e7 94       	ror	r14
     aae:	8a 95       	dec	r24
     ab0:	d1 f7       	brne	.-12     	; 0xaa6 <__pack_f+0x164>
     ab2:	05 c0       	rjmp	.+10     	; 0xabe <__pack_f+0x17c>
     ab4:	ee 24       	eor	r14, r14
     ab6:	ff 24       	eor	r15, r15
     ab8:	87 01       	movw	r16, r14
     aba:	ef ef       	ldi	r30, 0xFF	; 255
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	6e 2f       	mov	r22, r30
     ac0:	67 95       	ror	r22
     ac2:	66 27       	eor	r22, r22
     ac4:	67 95       	ror	r22
     ac6:	90 2f       	mov	r25, r16
     ac8:	9f 77       	andi	r25, 0x7F	; 127
     aca:	d7 94       	ror	r13
     acc:	dd 24       	eor	r13, r13
     ace:	d7 94       	ror	r13
     ad0:	8e 2f       	mov	r24, r30
     ad2:	86 95       	lsr	r24
     ad4:	49 2f       	mov	r20, r25
     ad6:	46 2b       	or	r20, r22
     ad8:	58 2f       	mov	r21, r24
     ada:	5d 29       	or	r21, r13
     adc:	b7 01       	movw	r22, r14
     ade:	ca 01       	movw	r24, r20
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	08 95       	ret

00000aec <__unpack_f>:
     aec:	fc 01       	movw	r30, r24
     aee:	db 01       	movw	r26, r22
     af0:	40 81       	ld	r20, Z
     af2:	51 81       	ldd	r21, Z+1	; 0x01
     af4:	22 81       	ldd	r18, Z+2	; 0x02
     af6:	62 2f       	mov	r22, r18
     af8:	6f 77       	andi	r22, 0x7F	; 127
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	22 1f       	adc	r18, r18
     afe:	22 27       	eor	r18, r18
     b00:	22 1f       	adc	r18, r18
     b02:	93 81       	ldd	r25, Z+3	; 0x03
     b04:	89 2f       	mov	r24, r25
     b06:	88 0f       	add	r24, r24
     b08:	82 2b       	or	r24, r18
     b0a:	28 2f       	mov	r18, r24
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	99 1f       	adc	r25, r25
     b10:	99 27       	eor	r25, r25
     b12:	99 1f       	adc	r25, r25
     b14:	11 96       	adiw	r26, 0x01	; 1
     b16:	9c 93       	st	X, r25
     b18:	11 97       	sbiw	r26, 0x01	; 1
     b1a:	21 15       	cp	r18, r1
     b1c:	31 05       	cpc	r19, r1
     b1e:	a9 f5       	brne	.+106    	; 0xb8a <__unpack_f+0x9e>
     b20:	41 15       	cp	r20, r1
     b22:	51 05       	cpc	r21, r1
     b24:	61 05       	cpc	r22, r1
     b26:	71 05       	cpc	r23, r1
     b28:	11 f4       	brne	.+4      	; 0xb2e <__unpack_f+0x42>
     b2a:	82 e0       	ldi	r24, 0x02	; 2
     b2c:	37 c0       	rjmp	.+110    	; 0xb9c <__unpack_f+0xb0>
     b2e:	82 e8       	ldi	r24, 0x82	; 130
     b30:	9f ef       	ldi	r25, 0xFF	; 255
     b32:	13 96       	adiw	r26, 0x03	; 3
     b34:	9c 93       	st	X, r25
     b36:	8e 93       	st	-X, r24
     b38:	12 97       	sbiw	r26, 0x02	; 2
     b3a:	9a 01       	movw	r18, r20
     b3c:	ab 01       	movw	r20, r22
     b3e:	67 e0       	ldi	r22, 0x07	; 7
     b40:	22 0f       	add	r18, r18
     b42:	33 1f       	adc	r19, r19
     b44:	44 1f       	adc	r20, r20
     b46:	55 1f       	adc	r21, r21
     b48:	6a 95       	dec	r22
     b4a:	d1 f7       	brne	.-12     	; 0xb40 <__unpack_f+0x54>
     b4c:	83 e0       	ldi	r24, 0x03	; 3
     b4e:	8c 93       	st	X, r24
     b50:	0d c0       	rjmp	.+26     	; 0xb6c <__unpack_f+0x80>
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	12 96       	adiw	r26, 0x02	; 2
     b5c:	8d 91       	ld	r24, X+
     b5e:	9c 91       	ld	r25, X
     b60:	13 97       	sbiw	r26, 0x03	; 3
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	13 96       	adiw	r26, 0x03	; 3
     b66:	9c 93       	st	X, r25
     b68:	8e 93       	st	-X, r24
     b6a:	12 97       	sbiw	r26, 0x02	; 2
     b6c:	20 30       	cpi	r18, 0x00	; 0
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	38 07       	cpc	r19, r24
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	48 07       	cpc	r20, r24
     b76:	80 e4       	ldi	r24, 0x40	; 64
     b78:	58 07       	cpc	r21, r24
     b7a:	58 f3       	brcs	.-42     	; 0xb52 <__unpack_f+0x66>
     b7c:	14 96       	adiw	r26, 0x04	; 4
     b7e:	2d 93       	st	X+, r18
     b80:	3d 93       	st	X+, r19
     b82:	4d 93       	st	X+, r20
     b84:	5c 93       	st	X, r21
     b86:	17 97       	sbiw	r26, 0x07	; 7
     b88:	08 95       	ret
     b8a:	2f 3f       	cpi	r18, 0xFF	; 255
     b8c:	31 05       	cpc	r19, r1
     b8e:	79 f4       	brne	.+30     	; 0xbae <__unpack_f+0xc2>
     b90:	41 15       	cp	r20, r1
     b92:	51 05       	cpc	r21, r1
     b94:	61 05       	cpc	r22, r1
     b96:	71 05       	cpc	r23, r1
     b98:	19 f4       	brne	.+6      	; 0xba0 <__unpack_f+0xb4>
     b9a:	84 e0       	ldi	r24, 0x04	; 4
     b9c:	8c 93       	st	X, r24
     b9e:	08 95       	ret
     ba0:	64 ff       	sbrs	r22, 4
     ba2:	03 c0       	rjmp	.+6      	; 0xbaa <__unpack_f+0xbe>
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	8c 93       	st	X, r24
     ba8:	12 c0       	rjmp	.+36     	; 0xbce <__unpack_f+0xe2>
     baa:	1c 92       	st	X, r1
     bac:	10 c0       	rjmp	.+32     	; 0xbce <__unpack_f+0xe2>
     bae:	2f 57       	subi	r18, 0x7F	; 127
     bb0:	30 40       	sbci	r19, 0x00	; 0
     bb2:	13 96       	adiw	r26, 0x03	; 3
     bb4:	3c 93       	st	X, r19
     bb6:	2e 93       	st	-X, r18
     bb8:	12 97       	sbiw	r26, 0x02	; 2
     bba:	83 e0       	ldi	r24, 0x03	; 3
     bbc:	8c 93       	st	X, r24
     bbe:	87 e0       	ldi	r24, 0x07	; 7
     bc0:	44 0f       	add	r20, r20
     bc2:	55 1f       	adc	r21, r21
     bc4:	66 1f       	adc	r22, r22
     bc6:	77 1f       	adc	r23, r23
     bc8:	8a 95       	dec	r24
     bca:	d1 f7       	brne	.-12     	; 0xbc0 <__unpack_f+0xd4>
     bcc:	70 64       	ori	r23, 0x40	; 64
     bce:	14 96       	adiw	r26, 0x04	; 4
     bd0:	4d 93       	st	X+, r20
     bd2:	5d 93       	st	X+, r21
     bd4:	6d 93       	st	X+, r22
     bd6:	7c 93       	st	X, r23
     bd8:	17 97       	sbiw	r26, 0x07	; 7
     bda:	08 95       	ret

00000bdc <__fpcmp_parts_f>:
     bdc:	1f 93       	push	r17
     bde:	dc 01       	movw	r26, r24
     be0:	fb 01       	movw	r30, r22
     be2:	9c 91       	ld	r25, X
     be4:	92 30       	cpi	r25, 0x02	; 2
     be6:	08 f4       	brcc	.+2      	; 0xbea <__fpcmp_parts_f+0xe>
     be8:	47 c0       	rjmp	.+142    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bea:	80 81       	ld	r24, Z
     bec:	82 30       	cpi	r24, 0x02	; 2
     bee:	08 f4       	brcc	.+2      	; 0xbf2 <__fpcmp_parts_f+0x16>
     bf0:	43 c0       	rjmp	.+134    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bf2:	94 30       	cpi	r25, 0x04	; 4
     bf4:	51 f4       	brne	.+20     	; 0xc0a <__fpcmp_parts_f+0x2e>
     bf6:	11 96       	adiw	r26, 0x01	; 1
     bf8:	1c 91       	ld	r17, X
     bfa:	84 30       	cpi	r24, 0x04	; 4
     bfc:	99 f5       	brne	.+102    	; 0xc64 <__fpcmp_parts_f+0x88>
     bfe:	81 81       	ldd	r24, Z+1	; 0x01
     c00:	68 2f       	mov	r22, r24
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	61 1b       	sub	r22, r17
     c06:	71 09       	sbc	r23, r1
     c08:	3f c0       	rjmp	.+126    	; 0xc88 <__fpcmp_parts_f+0xac>
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	21 f0       	breq	.+8      	; 0xc16 <__fpcmp_parts_f+0x3a>
     c0e:	92 30       	cpi	r25, 0x02	; 2
     c10:	31 f4       	brne	.+12     	; 0xc1e <__fpcmp_parts_f+0x42>
     c12:	82 30       	cpi	r24, 0x02	; 2
     c14:	b9 f1       	breq	.+110    	; 0xc84 <__fpcmp_parts_f+0xa8>
     c16:	81 81       	ldd	r24, Z+1	; 0x01
     c18:	88 23       	and	r24, r24
     c1a:	89 f1       	breq	.+98     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c1c:	2d c0       	rjmp	.+90     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c1e:	11 96       	adiw	r26, 0x01	; 1
     c20:	1c 91       	ld	r17, X
     c22:	11 97       	sbiw	r26, 0x01	; 1
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	f1 f0       	breq	.+60     	; 0xc64 <__fpcmp_parts_f+0x88>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	18 17       	cp	r17, r24
     c2c:	d9 f4       	brne	.+54     	; 0xc64 <__fpcmp_parts_f+0x88>
     c2e:	12 96       	adiw	r26, 0x02	; 2
     c30:	2d 91       	ld	r18, X+
     c32:	3c 91       	ld	r19, X
     c34:	13 97       	sbiw	r26, 0x03	; 3
     c36:	82 81       	ldd	r24, Z+2	; 0x02
     c38:	93 81       	ldd	r25, Z+3	; 0x03
     c3a:	82 17       	cp	r24, r18
     c3c:	93 07       	cpc	r25, r19
     c3e:	94 f0       	brlt	.+36     	; 0xc64 <__fpcmp_parts_f+0x88>
     c40:	28 17       	cp	r18, r24
     c42:	39 07       	cpc	r19, r25
     c44:	bc f0       	brlt	.+46     	; 0xc74 <__fpcmp_parts_f+0x98>
     c46:	14 96       	adiw	r26, 0x04	; 4
     c48:	8d 91       	ld	r24, X+
     c4a:	9d 91       	ld	r25, X+
     c4c:	0d 90       	ld	r0, X+
     c4e:	bc 91       	ld	r27, X
     c50:	a0 2d       	mov	r26, r0
     c52:	24 81       	ldd	r18, Z+4	; 0x04
     c54:	35 81       	ldd	r19, Z+5	; 0x05
     c56:	46 81       	ldd	r20, Z+6	; 0x06
     c58:	57 81       	ldd	r21, Z+7	; 0x07
     c5a:	28 17       	cp	r18, r24
     c5c:	39 07       	cpc	r19, r25
     c5e:	4a 07       	cpc	r20, r26
     c60:	5b 07       	cpc	r21, r27
     c62:	18 f4       	brcc	.+6      	; 0xc6a <__fpcmp_parts_f+0x8e>
     c64:	11 23       	and	r17, r17
     c66:	41 f0       	breq	.+16     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c68:	0a c0       	rjmp	.+20     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c6a:	82 17       	cp	r24, r18
     c6c:	93 07       	cpc	r25, r19
     c6e:	a4 07       	cpc	r26, r20
     c70:	b5 07       	cpc	r27, r21
     c72:	40 f4       	brcc	.+16     	; 0xc84 <__fpcmp_parts_f+0xa8>
     c74:	11 23       	and	r17, r17
     c76:	19 f0       	breq	.+6      	; 0xc7e <__fpcmp_parts_f+0xa2>
     c78:	61 e0       	ldi	r22, 0x01	; 1
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <__fpcmp_parts_f+0xac>
     c7e:	6f ef       	ldi	r22, 0xFF	; 255
     c80:	7f ef       	ldi	r23, 0xFF	; 255
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <__fpcmp_parts_f+0xac>
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	cb 01       	movw	r24, r22
     c8a:	1f 91       	pop	r17
     c8c:	08 95       	ret

00000c8e <main>:
#include"DIO_interface.h"
//HAL
#include"LCD_interface.h"

int main()
{
     c8e:	df 93       	push	r29
     c90:	cf 93       	push	r28
     c92:	00 d0       	rcall	.+0      	; 0xc94 <main+0x6>
     c94:	00 d0       	rcall	.+0      	; 0xc96 <main+0x8>
     c96:	cd b7       	in	r28, 0x3d	; 61
     c98:	de b7       	in	r29, 0x3e	; 62
	u16 Local_u16Digital,Local_u16AnalogValue;
	DIO_Init();
     c9a:	0e 94 46 07 	call	0xe8c	; 0xe8c <DIO_Init>
	ADC_voidInit();
     c9e:	0e 94 c2 06 	call	0xd84	; 0xd84 <ADC_voidInit>

	while(1)
	{
		//read digital value
		ADC_u8GetDigitalValue(ADC_u8_CHANNEL_0,&Local_u16Digital);
     ca2:	9e 01       	movw	r18, r28
     ca4:	2d 5f       	subi	r18, 0xFD	; 253
     ca6:	3f 4f       	sbci	r19, 0xFF	; 255
     ca8:	80 e0       	ldi	r24, 0x00	; 0
     caa:	b9 01       	movw	r22, r18
     cac:	0e 94 01 07 	call	0xe02	; 0xe02 <ADC_u8GetDigitalValue>
		//get analog value
		Local_u16AnalogValue=(Local_u16Digital*5000UL)/1024;
     cb0:	8b 81       	ldd	r24, Y+3	; 0x03
     cb2:	9c 81       	ldd	r25, Y+4	; 0x04
     cb4:	cc 01       	movw	r24, r24
     cb6:	a0 e0       	ldi	r26, 0x00	; 0
     cb8:	b0 e0       	ldi	r27, 0x00	; 0
     cba:	28 e8       	ldi	r18, 0x88	; 136
     cbc:	33 e1       	ldi	r19, 0x13	; 19
     cbe:	40 e0       	ldi	r20, 0x00	; 0
     cc0:	50 e0       	ldi	r21, 0x00	; 0
     cc2:	bc 01       	movw	r22, r24
     cc4:	cd 01       	movw	r24, r26
     cc6:	0e 94 c5 12 	call	0x258a	; 0x258a <__mulsi3>
     cca:	dc 01       	movw	r26, r24
     ccc:	cb 01       	movw	r24, r22
     cce:	07 2e       	mov	r0, r23
     cd0:	7a e0       	ldi	r23, 0x0A	; 10
     cd2:	b6 95       	lsr	r27
     cd4:	a7 95       	ror	r26
     cd6:	97 95       	ror	r25
     cd8:	87 95       	ror	r24
     cda:	7a 95       	dec	r23
     cdc:	d1 f7       	brne	.-12     	; 0xcd2 <main+0x44>
     cde:	70 2d       	mov	r23, r0
     ce0:	9a 83       	std	Y+2, r25	; 0x02
     ce2:	89 83       	std	Y+1, r24	; 0x01
		//turning on LED
		if (Local_u16AnalogValue<=1500)
     ce4:	89 81       	ldd	r24, Y+1	; 0x01
     ce6:	9a 81       	ldd	r25, Y+2	; 0x02
     ce8:	25 e0       	ldi	r18, 0x05	; 5
     cea:	8d 3d       	cpi	r24, 0xDD	; 221
     cec:	92 07       	cpc	r25, r18
     cee:	80 f4       	brcc	.+32     	; 0xd10 <main+0x82>
		{
			DIO_u8SetPinValue(DIO_u8_PORTC,DIO_u8_PIN0,DIO_u8_HIGH);
     cf0:	82 e0       	ldi	r24, 0x02	; 2
     cf2:	60 e0       	ldi	r22, 0x00	; 0
     cf4:	41 e0       	ldi	r20, 0x01	; 1
     cf6:	0e 94 93 08 	call	0x1126	; 0x1126 <DIO_u8SetPinValue>
			DIO_u8SetPinValue(DIO_u8_PORTC,DIO_u8_PIN1,DIO_u8_LOW);
     cfa:	82 e0       	ldi	r24, 0x02	; 2
     cfc:	61 e0       	ldi	r22, 0x01	; 1
     cfe:	40 e0       	ldi	r20, 0x00	; 0
     d00:	0e 94 93 08 	call	0x1126	; 0x1126 <DIO_u8SetPinValue>
			DIO_u8SetPinValue(DIO_u8_PORTC,DIO_u8_PIN2,DIO_u8_LOW);
     d04:	82 e0       	ldi	r24, 0x02	; 2
     d06:	62 e0       	ldi	r22, 0x02	; 2
     d08:	40 e0       	ldi	r20, 0x00	; 0
     d0a:	0e 94 93 08 	call	0x1126	; 0x1126 <DIO_u8SetPinValue>
     d0e:	c9 cf       	rjmp	.-110    	; 0xca2 <main+0x14>
		}
		else if ((1500<Local_u16AnalogValue)&&(Local_u16AnalogValue<=3000))
     d10:	89 81       	ldd	r24, Y+1	; 0x01
     d12:	9a 81       	ldd	r25, Y+2	; 0x02
     d14:	25 e0       	ldi	r18, 0x05	; 5
     d16:	8d 3d       	cpi	r24, 0xDD	; 221
     d18:	92 07       	cpc	r25, r18
     d1a:	b0 f0       	brcs	.+44     	; 0xd48 <main+0xba>
     d1c:	89 81       	ldd	r24, Y+1	; 0x01
     d1e:	9a 81       	ldd	r25, Y+2	; 0x02
     d20:	2b e0       	ldi	r18, 0x0B	; 11
     d22:	89 3b       	cpi	r24, 0xB9	; 185
     d24:	92 07       	cpc	r25, r18
     d26:	80 f4       	brcc	.+32     	; 0xd48 <main+0xba>
		{
			DIO_u8SetPinValue(DIO_u8_PORTC,DIO_u8_PIN1,DIO_u8_HIGH);
     d28:	82 e0       	ldi	r24, 0x02	; 2
     d2a:	61 e0       	ldi	r22, 0x01	; 1
     d2c:	41 e0       	ldi	r20, 0x01	; 1
     d2e:	0e 94 93 08 	call	0x1126	; 0x1126 <DIO_u8SetPinValue>
			DIO_u8SetPinValue(DIO_u8_PORTC,DIO_u8_PIN0,DIO_u8_LOW);
     d32:	82 e0       	ldi	r24, 0x02	; 2
     d34:	60 e0       	ldi	r22, 0x00	; 0
     d36:	40 e0       	ldi	r20, 0x00	; 0
     d38:	0e 94 93 08 	call	0x1126	; 0x1126 <DIO_u8SetPinValue>
			DIO_u8SetPinValue(DIO_u8_PORTC,DIO_u8_PIN2,DIO_u8_LOW);
     d3c:	82 e0       	ldi	r24, 0x02	; 2
     d3e:	62 e0       	ldi	r22, 0x02	; 2
     d40:	40 e0       	ldi	r20, 0x00	; 0
     d42:	0e 94 93 08 	call	0x1126	; 0x1126 <DIO_u8SetPinValue>
     d46:	ad cf       	rjmp	.-166    	; 0xca2 <main+0x14>
		}
		else if ((3000<Local_u16AnalogValue)&&(Local_u16AnalogValue<=5000))
     d48:	89 81       	ldd	r24, Y+1	; 0x01
     d4a:	9a 81       	ldd	r25, Y+2	; 0x02
     d4c:	2b e0       	ldi	r18, 0x0B	; 11
     d4e:	89 3b       	cpi	r24, 0xB9	; 185
     d50:	92 07       	cpc	r25, r18
     d52:	08 f4       	brcc	.+2      	; 0xd56 <main+0xc8>
     d54:	a6 cf       	rjmp	.-180    	; 0xca2 <main+0x14>
     d56:	89 81       	ldd	r24, Y+1	; 0x01
     d58:	9a 81       	ldd	r25, Y+2	; 0x02
     d5a:	23 e1       	ldi	r18, 0x13	; 19
     d5c:	89 38       	cpi	r24, 0x89	; 137
     d5e:	92 07       	cpc	r25, r18
     d60:	08 f0       	brcs	.+2      	; 0xd64 <main+0xd6>
     d62:	9f cf       	rjmp	.-194    	; 0xca2 <main+0x14>
		{
			DIO_u8SetPinValue(DIO_u8_PORTC,DIO_u8_PIN2,DIO_u8_HIGH);
     d64:	82 e0       	ldi	r24, 0x02	; 2
     d66:	62 e0       	ldi	r22, 0x02	; 2
     d68:	41 e0       	ldi	r20, 0x01	; 1
     d6a:	0e 94 93 08 	call	0x1126	; 0x1126 <DIO_u8SetPinValue>
			DIO_u8SetPinValue(DIO_u8_PORTC,DIO_u8_PIN0,DIO_u8_LOW);
     d6e:	82 e0       	ldi	r24, 0x02	; 2
     d70:	60 e0       	ldi	r22, 0x00	; 0
     d72:	40 e0       	ldi	r20, 0x00	; 0
     d74:	0e 94 93 08 	call	0x1126	; 0x1126 <DIO_u8SetPinValue>
			DIO_u8SetPinValue(DIO_u8_PORTC,DIO_u8_PIN1,DIO_u8_LOW);
     d78:	82 e0       	ldi	r24, 0x02	; 2
     d7a:	61 e0       	ldi	r22, 0x01	; 1
     d7c:	40 e0       	ldi	r20, 0x00	; 0
     d7e:	0e 94 93 08 	call	0x1126	; 0x1126 <DIO_u8SetPinValue>
     d82:	8f cf       	rjmp	.-226    	; 0xca2 <main+0x14>

00000d84 <ADC_voidInit>:
#include "ADC_private.h"
#include "ADC_config.h"


void ADC_voidInit(void)
{
     d84:	df 93       	push	r29
     d86:	cf 93       	push	r28
     d88:	cd b7       	in	r28, 0x3d	; 61
     d8a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADC_u8_ADMUX,6);
     d8c:	a7 e2       	ldi	r26, 0x27	; 39
     d8e:	b0 e0       	ldi	r27, 0x00	; 0
     d90:	e7 e2       	ldi	r30, 0x27	; 39
     d92:	f0 e0       	ldi	r31, 0x00	; 0
     d94:	80 81       	ld	r24, Z
     d96:	80 64       	ori	r24, 0x40	; 64
     d98:	8c 93       	st	X, r24
		CLR_BIT(ADC_u8_ADMUX,7);
     d9a:	a7 e2       	ldi	r26, 0x27	; 39
     d9c:	b0 e0       	ldi	r27, 0x00	; 0
     d9e:	e7 e2       	ldi	r30, 0x27	; 39
     da0:	f0 e0       	ldi	r31, 0x00	; 0
     da2:	80 81       	ld	r24, Z
     da4:	8f 77       	andi	r24, 0x7F	; 127
     da6:	8c 93       	st	X, r24


		//left or right adjust //right
		CLR_BIT(ADC_u8_ADMUX,5);
     da8:	a7 e2       	ldi	r26, 0x27	; 39
     daa:	b0 e0       	ldi	r27, 0x00	; 0
     dac:	e7 e2       	ldi	r30, 0x27	; 39
     dae:	f0 e0       	ldi	r31, 0x00	; 0
     db0:	80 81       	ld	r24, Z
     db2:	8f 7d       	andi	r24, 0xDF	; 223
     db4:	8c 93       	st	X, r24


		CLR_BIT(ADC_u8_ADCSRA,5);
     db6:	a6 e2       	ldi	r26, 0x26	; 38
     db8:	b0 e0       	ldi	r27, 0x00	; 0
     dba:	e6 e2       	ldi	r30, 0x26	; 38
     dbc:	f0 e0       	ldi	r31, 0x00	; 0
     dbe:	80 81       	ld	r24, Z
     dc0:	8f 7d       	andi	r24, 0xDF	; 223
     dc2:	8c 93       	st	X, r24


		SET_BIT( ADC_u8_ADCSRA,0);
     dc4:	a6 e2       	ldi	r26, 0x26	; 38
     dc6:	b0 e0       	ldi	r27, 0x00	; 0
     dc8:	e6 e2       	ldi	r30, 0x26	; 38
     dca:	f0 e0       	ldi	r31, 0x00	; 0
     dcc:	80 81       	ld	r24, Z
     dce:	81 60       	ori	r24, 0x01	; 1
     dd0:	8c 93       	st	X, r24
		SET_BIT( ADC_u8_ADCSRA,1);
     dd2:	a6 e2       	ldi	r26, 0x26	; 38
     dd4:	b0 e0       	ldi	r27, 0x00	; 0
     dd6:	e6 e2       	ldi	r30, 0x26	; 38
     dd8:	f0 e0       	ldi	r31, 0x00	; 0
     dda:	80 81       	ld	r24, Z
     ddc:	82 60       	ori	r24, 0x02	; 2
     dde:	8c 93       	st	X, r24
		CLR_BIT(ADC_u8_ADCSRA,2);
     de0:	a6 e2       	ldi	r26, 0x26	; 38
     de2:	b0 e0       	ldi	r27, 0x00	; 0
     de4:	e6 e2       	ldi	r30, 0x26	; 38
     de6:	f0 e0       	ldi	r31, 0x00	; 0
     de8:	80 81       	ld	r24, Z
     dea:	8b 7f       	andi	r24, 0xFB	; 251
     dec:	8c 93       	st	X, r24


		SET_BIT(ADC_u8_ADCSRA,7);
     dee:	a6 e2       	ldi	r26, 0x26	; 38
     df0:	b0 e0       	ldi	r27, 0x00	; 0
     df2:	e6 e2       	ldi	r30, 0x26	; 38
     df4:	f0 e0       	ldi	r31, 0x00	; 0
     df6:	80 81       	ld	r24, Z
     df8:	80 68       	ori	r24, 0x80	; 128
     dfa:	8c 93       	st	X, r24
}
     dfc:	cf 91       	pop	r28
     dfe:	df 91       	pop	r29
     e00:	08 95       	ret

00000e02 <ADC_u8GetDigitalValue>:

u8 ADC_u8GetDigitalValue( u8 Copy_u8Channel ,u16 * Copy_pu16DigitalValue)
{
     e02:	df 93       	push	r29
     e04:	cf 93       	push	r28
     e06:	00 d0       	rcall	.+0      	; 0xe08 <ADC_u8GetDigitalValue+0x6>
     e08:	00 d0       	rcall	.+0      	; 0xe0a <ADC_u8GetDigitalValue+0x8>
     e0a:	cd b7       	in	r28, 0x3d	; 61
     e0c:	de b7       	in	r29, 0x3e	; 62
     e0e:	8a 83       	std	Y+2, r24	; 0x02
     e10:	7c 83       	std	Y+4, r23	; 0x04
     e12:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
     e14:	81 e0       	ldi	r24, 0x01	; 1
     e16:	89 83       	std	Y+1, r24	; 0x01
		if((Copy_u8Channel<32) && ( Copy_pu16DigitalValue!=NULL))
     e18:	8a 81       	ldd	r24, Y+2	; 0x02
     e1a:	80 32       	cpi	r24, 0x20	; 32
     e1c:	70 f5       	brcc	.+92     	; 0xe7a <ADC_u8GetDigitalValue+0x78>
     e1e:	8b 81       	ldd	r24, Y+3	; 0x03
     e20:	9c 81       	ldd	r25, Y+4	; 0x04
     e22:	00 97       	sbiw	r24, 0x00	; 0
     e24:	51 f1       	breq	.+84     	; 0xe7a <ADC_u8GetDigitalValue+0x78>
		{
			//clear ADMUX
			ADC_u8_ADMUX &= 0b11100000;
     e26:	a7 e2       	ldi	r26, 0x27	; 39
     e28:	b0 e0       	ldi	r27, 0x00	; 0
     e2a:	e7 e2       	ldi	r30, 0x27	; 39
     e2c:	f0 e0       	ldi	r31, 0x00	; 0
     e2e:	80 81       	ld	r24, Z
     e30:	80 7e       	andi	r24, 0xE0	; 224
     e32:	8c 93       	st	X, r24
			//select channel
			ADC_u8_ADMUX |= Copy_u8Channel;
     e34:	a7 e2       	ldi	r26, 0x27	; 39
     e36:	b0 e0       	ldi	r27, 0x00	; 0
     e38:	e7 e2       	ldi	r30, 0x27	; 39
     e3a:	f0 e0       	ldi	r31, 0x00	; 0
     e3c:	90 81       	ld	r25, Z
     e3e:	8a 81       	ldd	r24, Y+2	; 0x02
     e40:	89 2b       	or	r24, r25
     e42:	8c 93       	st	X, r24
			//start conversion
			SET_BIT(ADC_u8_ADCSRA,6);
     e44:	a6 e2       	ldi	r26, 0x26	; 38
     e46:	b0 e0       	ldi	r27, 0x00	; 0
     e48:	e6 e2       	ldi	r30, 0x26	; 38
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	80 64       	ori	r24, 0x40	; 64
     e50:	8c 93       	st	X, r24
			//wait for the interrupt flag
			while((GET_BIT(ADC_u8_ADCSRA,4))==0);
     e52:	e6 e2       	ldi	r30, 0x26	; 38
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	80 81       	ld	r24, Z
     e58:	82 95       	swap	r24
     e5a:	8f 70       	andi	r24, 0x0F	; 15
     e5c:	88 2f       	mov	r24, r24
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	81 70       	andi	r24, 0x01	; 1
     e62:	90 70       	andi	r25, 0x00	; 0
     e64:	00 97       	sbiw	r24, 0x00	; 0
     e66:	a9 f3       	breq	.-22     	; 0xe52 <ADC_u8GetDigitalValue+0x50>

			//read output
			*Copy_pu16DigitalValue= ADC_u16_ADC;
     e68:	e4 e2       	ldi	r30, 0x24	; 36
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	80 81       	ld	r24, Z
     e6e:	91 81       	ldd	r25, Z+1	; 0x01
     e70:	eb 81       	ldd	r30, Y+3	; 0x03
     e72:	fc 81       	ldd	r31, Y+4	; 0x04
     e74:	91 83       	std	Z+1, r25	; 0x01
     e76:	80 83       	st	Z, r24
     e78:	01 c0       	rjmp	.+2      	; 0xe7c <ADC_u8GetDigitalValue+0x7a>

		}
		else Local_u8ErrorState = STD_TYPES_NOK;
     e7a:	19 82       	std	Y+1, r1	; 0x01

		return Local_u8ErrorState;
     e7c:	89 81       	ldd	r24, Y+1	; 0x01

}
     e7e:	0f 90       	pop	r0
     e80:	0f 90       	pop	r0
     e82:	0f 90       	pop	r0
     e84:	0f 90       	pop	r0
     e86:	cf 91       	pop	r28
     e88:	df 91       	pop	r29
     e8a:	08 95       	ret

00000e8c <DIO_Init>:
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_config.h"

void DIO_Init(void)
{
     e8c:	df 93       	push	r29
     e8e:	cf 93       	push	r28
     e90:	cd b7       	in	r28, 0x3d	; 61
     e92:	de b7       	in	r29, 0x3e	; 62
	/* Initial Direction For Pins */
	DDRA_u8_REG = CONC(DIO_u8_PA7_INITIAL_DIRECTION,DIO_u8_PA6_INITIAL_DIRECTION,DIO_u8_PA5_INITIAL_DIRECTION,DIO_u8_PA4_INITIAL_DIRECTION,
     e94:	ea e3       	ldi	r30, 0x3A	; 58
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	86 e0       	ldi	r24, 0x06	; 6
     e9a:	80 83       	st	Z, r24
			DIO_u8_PA3_INITIAL_DIRECTION,DIO_u8_PA2_INITIAL_DIRECTION,DIO_u8_PA1_INITIAL_DIRECTION,DIO_u8_PA0_INITIAL_DIRECTION);
	DDRB_u8_REG = CONC(DIO_u8_PB7_INITIAL_DIRECTION,DIO_u8_PB6_INITIAL_DIRECTION,DIO_u8_PB5_INITIAL_DIRECTION,DIO_u8_PB4_INITIAL_DIRECTION,
     e9c:	e7 e3       	ldi	r30, 0x37	; 55
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	8f ef       	ldi	r24, 0xFF	; 255
     ea2:	80 83       	st	Z, r24
			DIO_u8_PB3_INITIAL_DIRECTION,DIO_u8_PB2_INITIAL_DIRECTION,DIO_u8_PB1_INITIAL_DIRECTION,DIO_u8_PB0_INITIAL_DIRECTION);
	DDRC_u8_REG = CONC(DIO_u8_PC7_INITIAL_DIRECTION,DIO_u8_PC6_INITIAL_DIRECTION,DIO_u8_PC5_INITIAL_DIRECTION,DIO_u8_PC4_INITIAL_DIRECTION,
     ea4:	e4 e3       	ldi	r30, 0x34	; 52
     ea6:	f0 e0       	ldi	r31, 0x00	; 0
     ea8:	8f e0       	ldi	r24, 0x0F	; 15
     eaa:	80 83       	st	Z, r24
			DIO_u8_PC3_INITIAL_DIRECTION,DIO_u8_PC2_INITIAL_DIRECTION,DIO_u8_PC1_INITIAL_DIRECTION,DIO_u8_PC0_INITIAL_DIRECTION);
	DDRD_u8_REG = CONC(DIO_u8_PD7_INITIAL_DIRECTION,DIO_u8_PD6_INITIAL_DIRECTION,DIO_u8_PD5_INITIAL_DIRECTION,DIO_u8_PD4_INITIAL_DIRECTION,
     eac:	e1 e3       	ldi	r30, 0x31	; 49
     eae:	f0 e0       	ldi	r31, 0x00	; 0
     eb0:	10 82       	st	Z, r1
			DIO_u8_PD3_INITIAL_DIRECTION,DIO_u8_PD2_INITIAL_DIRECTION,DIO_u8_PD1_INITIAL_DIRECTION,DIO_u8_PD0_INITIAL_DIRECTION);

	/* Initial Value For Pins */
	PORTA_u8_REG = CONC(DIO_u8_PA7_INITIAL_VALUE,DIO_u8_PA6_INITIAL_VALUE,DIO_u8_PA5_INITIAL_VALUE,DIO_u8_PA4_INITIAL_VALUE,
     eb2:	eb e3       	ldi	r30, 0x3B	; 59
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
     eb6:	10 82       	st	Z, r1
			DIO_u8_PA3_INITIAL_VALUE,DIO_u8_PA2_INITIAL_VALUE,DIO_u8_PA1_INITIAL_VALUE,DIO_u8_PA0_INITIAL_VALUE);
	PORTB_u8_REG = CONC(DIO_u8_PB7_INITIAL_VALUE,DIO_u8_PB6_INITIAL_VALUE,DIO_u8_PB5_INITIAL_VALUE,DIO_u8_PB4_INITIAL_VALUE,
     eb8:	e8 e3       	ldi	r30, 0x38	; 56
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	10 82       	st	Z, r1
			DIO_u8_PB3_INITIAL_VALUE,DIO_u8_PB2_INITIAL_VALUE,DIO_u8_PB1_INITIAL_VALUE,DIO_u8_PB0_INITIAL_VALUE);
	PORTC_u8_REG = CONC(DIO_u8_PC7_INITIAL_VALUE,DIO_u8_PC6_INITIAL_VALUE,DIO_u8_PC5_INITIAL_VALUE,DIO_u8_PC4_INITIAL_VALUE,
     ebe:	e5 e3       	ldi	r30, 0x35	; 53
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	10 82       	st	Z, r1
			DIO_u8_PC3_INITIAL_VALUE,DIO_u8_PC2_INITIAL_VALUE,DIO_u8_PC1_INITIAL_VALUE,DIO_u8_PC0_INITIAL_VALUE);
	PORTD_u8_REG = CONC(DIO_u8_PD7_INITIAL_VALUE,DIO_u8_PD6_INITIAL_VALUE,DIO_u8_PD5_INITIAL_VALUE,DIO_u8_PD4_INITIAL_VALUE,
     ec4:	e2 e3       	ldi	r30, 0x32	; 50
     ec6:	f0 e0       	ldi	r31, 0x00	; 0
     ec8:	10 82       	st	Z, r1
			DIO_u8_PD3_INITIAL_VALUE,DIO_u8_PD2_INITIAL_VALUE,DIO_u8_PD1_INITIAL_VALUE,DIO_u8_PD0_INITIAL_VALUE);
}
     eca:	cf 91       	pop	r28
     ecc:	df 91       	pop	r29
     ece:	08 95       	ret

00000ed0 <DIO_u8SetPinDirection>:

u8 DIO_u8SetPinDirection	(u8 Copy_u8PortId , u8 Copy_u8PinId , u8 Copy_u8PinDirection)
{
     ed0:	df 93       	push	r29
     ed2:	cf 93       	push	r28
     ed4:	cd b7       	in	r28, 0x3d	; 61
     ed6:	de b7       	in	r29, 0x3e	; 62
     ed8:	2e 97       	sbiw	r28, 0x0e	; 14
     eda:	0f b6       	in	r0, 0x3f	; 63
     edc:	f8 94       	cli
     ede:	de bf       	out	0x3e, r29	; 62
     ee0:	0f be       	out	0x3f, r0	; 63
     ee2:	cd bf       	out	0x3d, r28	; 61
     ee4:	8a 83       	std	Y+2, r24	; 0x02
     ee6:	6b 83       	std	Y+3, r22	; 0x03
     ee8:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorStatus = STD_TYPES_OK;
     eea:	81 e0       	ldi	r24, 0x01	; 1
     eec:	89 83       	std	Y+1, r24	; 0x01

	/* Check 1- Valid Port ID
             2- Valid Pin ID	
			 3- Valid Pin Direction*/
	if((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PinId<= DIO_u8_PIN7) && ((Copy_u8PinDirection == DIO_u8_INPUT) || (Copy_u8PinDirection == DIO_u8_OUTPUT)))
     eee:	8a 81       	ldd	r24, Y+2	; 0x02
     ef0:	84 30       	cpi	r24, 0x04	; 4
     ef2:	08 f0       	brcs	.+2      	; 0xef6 <DIO_u8SetPinDirection+0x26>
     ef4:	0d c1       	rjmp	.+538    	; 0x1110 <DIO_u8SetPinDirection+0x240>
     ef6:	8b 81       	ldd	r24, Y+3	; 0x03
     ef8:	88 30       	cpi	r24, 0x08	; 8
     efa:	08 f0       	brcs	.+2      	; 0xefe <DIO_u8SetPinDirection+0x2e>
     efc:	09 c1       	rjmp	.+530    	; 0x1110 <DIO_u8SetPinDirection+0x240>
     efe:	8c 81       	ldd	r24, Y+4	; 0x04
     f00:	88 23       	and	r24, r24
     f02:	21 f0       	breq	.+8      	; 0xf0c <DIO_u8SetPinDirection+0x3c>
     f04:	8c 81       	ldd	r24, Y+4	; 0x04
     f06:	81 30       	cpi	r24, 0x01	; 1
     f08:	09 f0       	breq	.+2      	; 0xf0c <DIO_u8SetPinDirection+0x3c>
     f0a:	02 c1       	rjmp	.+516    	; 0x1110 <DIO_u8SetPinDirection+0x240>
	{
		switch(Copy_u8PortId)
     f0c:	8a 81       	ldd	r24, Y+2	; 0x02
     f0e:	28 2f       	mov	r18, r24
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	3e 87       	std	Y+14, r19	; 0x0e
     f14:	2d 87       	std	Y+13, r18	; 0x0d
     f16:	8d 85       	ldd	r24, Y+13	; 0x0d
     f18:	9e 85       	ldd	r25, Y+14	; 0x0e
     f1a:	81 30       	cpi	r24, 0x01	; 1
     f1c:	91 05       	cpc	r25, r1
     f1e:	09 f4       	brne	.+2      	; 0xf22 <DIO_u8SetPinDirection+0x52>
     f20:	4f c0       	rjmp	.+158    	; 0xfc0 <DIO_u8SetPinDirection+0xf0>
     f22:	2d 85       	ldd	r18, Y+13	; 0x0d
     f24:	3e 85       	ldd	r19, Y+14	; 0x0e
     f26:	22 30       	cpi	r18, 0x02	; 2
     f28:	31 05       	cpc	r19, r1
     f2a:	2c f4       	brge	.+10     	; 0xf36 <DIO_u8SetPinDirection+0x66>
     f2c:	8d 85       	ldd	r24, Y+13	; 0x0d
     f2e:	9e 85       	ldd	r25, Y+14	; 0x0e
     f30:	00 97       	sbiw	r24, 0x00	; 0
     f32:	71 f0       	breq	.+28     	; 0xf50 <DIO_u8SetPinDirection+0x80>
     f34:	ee c0       	rjmp	.+476    	; 0x1112 <DIO_u8SetPinDirection+0x242>
     f36:	2d 85       	ldd	r18, Y+13	; 0x0d
     f38:	3e 85       	ldd	r19, Y+14	; 0x0e
     f3a:	22 30       	cpi	r18, 0x02	; 2
     f3c:	31 05       	cpc	r19, r1
     f3e:	09 f4       	brne	.+2      	; 0xf42 <DIO_u8SetPinDirection+0x72>
     f40:	77 c0       	rjmp	.+238    	; 0x1030 <DIO_u8SetPinDirection+0x160>
     f42:	8d 85       	ldd	r24, Y+13	; 0x0d
     f44:	9e 85       	ldd	r25, Y+14	; 0x0e
     f46:	83 30       	cpi	r24, 0x03	; 3
     f48:	91 05       	cpc	r25, r1
     f4a:	09 f4       	brne	.+2      	; 0xf4e <DIO_u8SetPinDirection+0x7e>
     f4c:	a9 c0       	rjmp	.+338    	; 0x10a0 <DIO_u8SetPinDirection+0x1d0>
     f4e:	e1 c0       	rjmp	.+450    	; 0x1112 <DIO_u8SetPinDirection+0x242>
		{
		case DIO_u8_PORTA:
			switch(Copy_u8PinDirection)
     f50:	8c 81       	ldd	r24, Y+4	; 0x04
     f52:	28 2f       	mov	r18, r24
     f54:	30 e0       	ldi	r19, 0x00	; 0
     f56:	3c 87       	std	Y+12, r19	; 0x0c
     f58:	2b 87       	std	Y+11, r18	; 0x0b
     f5a:	8b 85       	ldd	r24, Y+11	; 0x0b
     f5c:	9c 85       	ldd	r25, Y+12	; 0x0c
     f5e:	00 97       	sbiw	r24, 0x00	; 0
     f60:	31 f0       	breq	.+12     	; 0xf6e <DIO_u8SetPinDirection+0x9e>
     f62:	2b 85       	ldd	r18, Y+11	; 0x0b
     f64:	3c 85       	ldd	r19, Y+12	; 0x0c
     f66:	21 30       	cpi	r18, 0x01	; 1
     f68:	31 05       	cpc	r19, r1
     f6a:	b1 f0       	breq	.+44     	; 0xf98 <DIO_u8SetPinDirection+0xc8>
     f6c:	d2 c0       	rjmp	.+420    	; 0x1112 <DIO_u8SetPinDirection+0x242>
			{
			case DIO_u8_INPUT:
				CLR_BIT(DDRA_u8_REG,Copy_u8PinId);
     f6e:	aa e3       	ldi	r26, 0x3A	; 58
     f70:	b0 e0       	ldi	r27, 0x00	; 0
     f72:	ea e3       	ldi	r30, 0x3A	; 58
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	80 81       	ld	r24, Z
     f78:	48 2f       	mov	r20, r24
     f7a:	8b 81       	ldd	r24, Y+3	; 0x03
     f7c:	28 2f       	mov	r18, r24
     f7e:	30 e0       	ldi	r19, 0x00	; 0
     f80:	81 e0       	ldi	r24, 0x01	; 1
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	02 2e       	mov	r0, r18
     f86:	02 c0       	rjmp	.+4      	; 0xf8c <DIO_u8SetPinDirection+0xbc>
     f88:	88 0f       	add	r24, r24
     f8a:	99 1f       	adc	r25, r25
     f8c:	0a 94       	dec	r0
     f8e:	e2 f7       	brpl	.-8      	; 0xf88 <DIO_u8SetPinDirection+0xb8>
     f90:	80 95       	com	r24
     f92:	84 23       	and	r24, r20
     f94:	8c 93       	st	X, r24
     f96:	bd c0       	rjmp	.+378    	; 0x1112 <DIO_u8SetPinDirection+0x242>
				break;
			case DIO_u8_OUTPUT:
				SET_BIT(DDRA_u8_REG,Copy_u8PinId);
     f98:	aa e3       	ldi	r26, 0x3A	; 58
     f9a:	b0 e0       	ldi	r27, 0x00	; 0
     f9c:	ea e3       	ldi	r30, 0x3A	; 58
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	80 81       	ld	r24, Z
     fa2:	48 2f       	mov	r20, r24
     fa4:	8b 81       	ldd	r24, Y+3	; 0x03
     fa6:	28 2f       	mov	r18, r24
     fa8:	30 e0       	ldi	r19, 0x00	; 0
     faa:	81 e0       	ldi	r24, 0x01	; 1
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	02 2e       	mov	r0, r18
     fb0:	02 c0       	rjmp	.+4      	; 0xfb6 <DIO_u8SetPinDirection+0xe6>
     fb2:	88 0f       	add	r24, r24
     fb4:	99 1f       	adc	r25, r25
     fb6:	0a 94       	dec	r0
     fb8:	e2 f7       	brpl	.-8      	; 0xfb2 <DIO_u8SetPinDirection+0xe2>
     fba:	84 2b       	or	r24, r20
     fbc:	8c 93       	st	X, r24
     fbe:	a9 c0       	rjmp	.+338    	; 0x1112 <DIO_u8SetPinDirection+0x242>
				break;
			}
			break;
			case DIO_u8_PORTB:
				switch(Copy_u8PinDirection)
     fc0:	8c 81       	ldd	r24, Y+4	; 0x04
     fc2:	28 2f       	mov	r18, r24
     fc4:	30 e0       	ldi	r19, 0x00	; 0
     fc6:	3a 87       	std	Y+10, r19	; 0x0a
     fc8:	29 87       	std	Y+9, r18	; 0x09
     fca:	89 85       	ldd	r24, Y+9	; 0x09
     fcc:	9a 85       	ldd	r25, Y+10	; 0x0a
     fce:	00 97       	sbiw	r24, 0x00	; 0
     fd0:	31 f0       	breq	.+12     	; 0xfde <DIO_u8SetPinDirection+0x10e>
     fd2:	29 85       	ldd	r18, Y+9	; 0x09
     fd4:	3a 85       	ldd	r19, Y+10	; 0x0a
     fd6:	21 30       	cpi	r18, 0x01	; 1
     fd8:	31 05       	cpc	r19, r1
     fda:	b1 f0       	breq	.+44     	; 0x1008 <DIO_u8SetPinDirection+0x138>
     fdc:	9a c0       	rjmp	.+308    	; 0x1112 <DIO_u8SetPinDirection+0x242>
				{
				case DIO_u8_INPUT:
					CLR_BIT(DDRB_u8_REG,Copy_u8PinId);
     fde:	a7 e3       	ldi	r26, 0x37	; 55
     fe0:	b0 e0       	ldi	r27, 0x00	; 0
     fe2:	e7 e3       	ldi	r30, 0x37	; 55
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	80 81       	ld	r24, Z
     fe8:	48 2f       	mov	r20, r24
     fea:	8b 81       	ldd	r24, Y+3	; 0x03
     fec:	28 2f       	mov	r18, r24
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	81 e0       	ldi	r24, 0x01	; 1
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	02 2e       	mov	r0, r18
     ff6:	02 c0       	rjmp	.+4      	; 0xffc <DIO_u8SetPinDirection+0x12c>
     ff8:	88 0f       	add	r24, r24
     ffa:	99 1f       	adc	r25, r25
     ffc:	0a 94       	dec	r0
     ffe:	e2 f7       	brpl	.-8      	; 0xff8 <DIO_u8SetPinDirection+0x128>
    1000:	80 95       	com	r24
    1002:	84 23       	and	r24, r20
    1004:	8c 93       	st	X, r24
    1006:	85 c0       	rjmp	.+266    	; 0x1112 <DIO_u8SetPinDirection+0x242>
					break;
				case DIO_u8_OUTPUT:
					SET_BIT(DDRB_u8_REG,Copy_u8PinId);
    1008:	a7 e3       	ldi	r26, 0x37	; 55
    100a:	b0 e0       	ldi	r27, 0x00	; 0
    100c:	e7 e3       	ldi	r30, 0x37	; 55
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	80 81       	ld	r24, Z
    1012:	48 2f       	mov	r20, r24
    1014:	8b 81       	ldd	r24, Y+3	; 0x03
    1016:	28 2f       	mov	r18, r24
    1018:	30 e0       	ldi	r19, 0x00	; 0
    101a:	81 e0       	ldi	r24, 0x01	; 1
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	02 2e       	mov	r0, r18
    1020:	02 c0       	rjmp	.+4      	; 0x1026 <DIO_u8SetPinDirection+0x156>
    1022:	88 0f       	add	r24, r24
    1024:	99 1f       	adc	r25, r25
    1026:	0a 94       	dec	r0
    1028:	e2 f7       	brpl	.-8      	; 0x1022 <DIO_u8SetPinDirection+0x152>
    102a:	84 2b       	or	r24, r20
    102c:	8c 93       	st	X, r24
    102e:	71 c0       	rjmp	.+226    	; 0x1112 <DIO_u8SetPinDirection+0x242>
					break;
				}
				break;
				case DIO_u8_PORTC:
					switch(Copy_u8PinDirection)
    1030:	8c 81       	ldd	r24, Y+4	; 0x04
    1032:	28 2f       	mov	r18, r24
    1034:	30 e0       	ldi	r19, 0x00	; 0
    1036:	38 87       	std	Y+8, r19	; 0x08
    1038:	2f 83       	std	Y+7, r18	; 0x07
    103a:	8f 81       	ldd	r24, Y+7	; 0x07
    103c:	98 85       	ldd	r25, Y+8	; 0x08
    103e:	00 97       	sbiw	r24, 0x00	; 0
    1040:	31 f0       	breq	.+12     	; 0x104e <DIO_u8SetPinDirection+0x17e>
    1042:	2f 81       	ldd	r18, Y+7	; 0x07
    1044:	38 85       	ldd	r19, Y+8	; 0x08
    1046:	21 30       	cpi	r18, 0x01	; 1
    1048:	31 05       	cpc	r19, r1
    104a:	b1 f0       	breq	.+44     	; 0x1078 <DIO_u8SetPinDirection+0x1a8>
    104c:	62 c0       	rjmp	.+196    	; 0x1112 <DIO_u8SetPinDirection+0x242>
					{
					case DIO_u8_INPUT:
						CLR_BIT(DDRC_u8_REG,Copy_u8PinId);
    104e:	a4 e3       	ldi	r26, 0x34	; 52
    1050:	b0 e0       	ldi	r27, 0x00	; 0
    1052:	e4 e3       	ldi	r30, 0x34	; 52
    1054:	f0 e0       	ldi	r31, 0x00	; 0
    1056:	80 81       	ld	r24, Z
    1058:	48 2f       	mov	r20, r24
    105a:	8b 81       	ldd	r24, Y+3	; 0x03
    105c:	28 2f       	mov	r18, r24
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	81 e0       	ldi	r24, 0x01	; 1
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	02 2e       	mov	r0, r18
    1066:	02 c0       	rjmp	.+4      	; 0x106c <DIO_u8SetPinDirection+0x19c>
    1068:	88 0f       	add	r24, r24
    106a:	99 1f       	adc	r25, r25
    106c:	0a 94       	dec	r0
    106e:	e2 f7       	brpl	.-8      	; 0x1068 <DIO_u8SetPinDirection+0x198>
    1070:	80 95       	com	r24
    1072:	84 23       	and	r24, r20
    1074:	8c 93       	st	X, r24
    1076:	4d c0       	rjmp	.+154    	; 0x1112 <DIO_u8SetPinDirection+0x242>
						break;
					case DIO_u8_OUTPUT:
						SET_BIT(DDRC_u8_REG,Copy_u8PinId);
    1078:	a4 e3       	ldi	r26, 0x34	; 52
    107a:	b0 e0       	ldi	r27, 0x00	; 0
    107c:	e4 e3       	ldi	r30, 0x34	; 52
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	80 81       	ld	r24, Z
    1082:	48 2f       	mov	r20, r24
    1084:	8b 81       	ldd	r24, Y+3	; 0x03
    1086:	28 2f       	mov	r18, r24
    1088:	30 e0       	ldi	r19, 0x00	; 0
    108a:	81 e0       	ldi	r24, 0x01	; 1
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	02 2e       	mov	r0, r18
    1090:	02 c0       	rjmp	.+4      	; 0x1096 <DIO_u8SetPinDirection+0x1c6>
    1092:	88 0f       	add	r24, r24
    1094:	99 1f       	adc	r25, r25
    1096:	0a 94       	dec	r0
    1098:	e2 f7       	brpl	.-8      	; 0x1092 <DIO_u8SetPinDirection+0x1c2>
    109a:	84 2b       	or	r24, r20
    109c:	8c 93       	st	X, r24
    109e:	39 c0       	rjmp	.+114    	; 0x1112 <DIO_u8SetPinDirection+0x242>
						break;
					}
					break;
					case DIO_u8_PORTD:
						switch(Copy_u8PinDirection)
    10a0:	8c 81       	ldd	r24, Y+4	; 0x04
    10a2:	28 2f       	mov	r18, r24
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	3e 83       	std	Y+6, r19	; 0x06
    10a8:	2d 83       	std	Y+5, r18	; 0x05
    10aa:	8d 81       	ldd	r24, Y+5	; 0x05
    10ac:	9e 81       	ldd	r25, Y+6	; 0x06
    10ae:	00 97       	sbiw	r24, 0x00	; 0
    10b0:	31 f0       	breq	.+12     	; 0x10be <DIO_u8SetPinDirection+0x1ee>
    10b2:	2d 81       	ldd	r18, Y+5	; 0x05
    10b4:	3e 81       	ldd	r19, Y+6	; 0x06
    10b6:	21 30       	cpi	r18, 0x01	; 1
    10b8:	31 05       	cpc	r19, r1
    10ba:	b1 f0       	breq	.+44     	; 0x10e8 <DIO_u8SetPinDirection+0x218>
    10bc:	2a c0       	rjmp	.+84     	; 0x1112 <DIO_u8SetPinDirection+0x242>
						{
						case DIO_u8_INPUT:
							CLR_BIT(DDRD_u8_REG,Copy_u8PinId);
    10be:	a1 e3       	ldi	r26, 0x31	; 49
    10c0:	b0 e0       	ldi	r27, 0x00	; 0
    10c2:	e1 e3       	ldi	r30, 0x31	; 49
    10c4:	f0 e0       	ldi	r31, 0x00	; 0
    10c6:	80 81       	ld	r24, Z
    10c8:	48 2f       	mov	r20, r24
    10ca:	8b 81       	ldd	r24, Y+3	; 0x03
    10cc:	28 2f       	mov	r18, r24
    10ce:	30 e0       	ldi	r19, 0x00	; 0
    10d0:	81 e0       	ldi	r24, 0x01	; 1
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	02 2e       	mov	r0, r18
    10d6:	02 c0       	rjmp	.+4      	; 0x10dc <DIO_u8SetPinDirection+0x20c>
    10d8:	88 0f       	add	r24, r24
    10da:	99 1f       	adc	r25, r25
    10dc:	0a 94       	dec	r0
    10de:	e2 f7       	brpl	.-8      	; 0x10d8 <DIO_u8SetPinDirection+0x208>
    10e0:	80 95       	com	r24
    10e2:	84 23       	and	r24, r20
    10e4:	8c 93       	st	X, r24
    10e6:	15 c0       	rjmp	.+42     	; 0x1112 <DIO_u8SetPinDirection+0x242>
							break;
						case DIO_u8_OUTPUT:
							SET_BIT(DDRD_u8_REG,Copy_u8PinId);
    10e8:	a1 e3       	ldi	r26, 0x31	; 49
    10ea:	b0 e0       	ldi	r27, 0x00	; 0
    10ec:	e1 e3       	ldi	r30, 0x31	; 49
    10ee:	f0 e0       	ldi	r31, 0x00	; 0
    10f0:	80 81       	ld	r24, Z
    10f2:	48 2f       	mov	r20, r24
    10f4:	8b 81       	ldd	r24, Y+3	; 0x03
    10f6:	28 2f       	mov	r18, r24
    10f8:	30 e0       	ldi	r19, 0x00	; 0
    10fa:	81 e0       	ldi	r24, 0x01	; 1
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	02 2e       	mov	r0, r18
    1100:	02 c0       	rjmp	.+4      	; 0x1106 <DIO_u8SetPinDirection+0x236>
    1102:	88 0f       	add	r24, r24
    1104:	99 1f       	adc	r25, r25
    1106:	0a 94       	dec	r0
    1108:	e2 f7       	brpl	.-8      	; 0x1102 <DIO_u8SetPinDirection+0x232>
    110a:	84 2b       	or	r24, r20
    110c:	8c 93       	st	X, r24
    110e:	01 c0       	rjmp	.+2      	; 0x1112 <DIO_u8SetPinDirection+0x242>
						break;
		}
	}
	else
	{
		Local_u8ErrorStatus = STD_TYPES_NOK;
    1110:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorStatus;
    1112:	89 81       	ldd	r24, Y+1	; 0x01
}
    1114:	2e 96       	adiw	r28, 0x0e	; 14
    1116:	0f b6       	in	r0, 0x3f	; 63
    1118:	f8 94       	cli
    111a:	de bf       	out	0x3e, r29	; 62
    111c:	0f be       	out	0x3f, r0	; 63
    111e:	cd bf       	out	0x3d, r28	; 61
    1120:	cf 91       	pop	r28
    1122:	df 91       	pop	r29
    1124:	08 95       	ret

00001126 <DIO_u8SetPinValue>:

	u8 DIO_u8SetPinValue		(u8 Copy_u8PortId , u8 Copy_u8PinId , u8 Copy_u8PinValue    )
	{
    1126:	df 93       	push	r29
    1128:	cf 93       	push	r28
    112a:	cd b7       	in	r28, 0x3d	; 61
    112c:	de b7       	in	r29, 0x3e	; 62
    112e:	2e 97       	sbiw	r28, 0x0e	; 14
    1130:	0f b6       	in	r0, 0x3f	; 63
    1132:	f8 94       	cli
    1134:	de bf       	out	0x3e, r29	; 62
    1136:	0f be       	out	0x3f, r0	; 63
    1138:	cd bf       	out	0x3d, r28	; 61
    113a:	8a 83       	std	Y+2, r24	; 0x02
    113c:	6b 83       	std	Y+3, r22	; 0x03
    113e:	4c 83       	std	Y+4, r20	; 0x04
		u8 Local_u8ErrorStatus = STD_TYPES_OK;
    1140:	81 e0       	ldi	r24, 0x01	; 1
    1142:	89 83       	std	Y+1, r24	; 0x01
		if((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PinId<= DIO_u8_PIN7) && ((Copy_u8PinValue == DIO_u8_LOW) || (Copy_u8PinValue == DIO_u8_HIGH)))
    1144:	8a 81       	ldd	r24, Y+2	; 0x02
    1146:	84 30       	cpi	r24, 0x04	; 4
    1148:	08 f0       	brcs	.+2      	; 0x114c <DIO_u8SetPinValue+0x26>
    114a:	0d c1       	rjmp	.+538    	; 0x1366 <DIO_u8SetPinValue+0x240>
    114c:	8b 81       	ldd	r24, Y+3	; 0x03
    114e:	88 30       	cpi	r24, 0x08	; 8
    1150:	08 f0       	brcs	.+2      	; 0x1154 <DIO_u8SetPinValue+0x2e>
    1152:	09 c1       	rjmp	.+530    	; 0x1366 <DIO_u8SetPinValue+0x240>
    1154:	8c 81       	ldd	r24, Y+4	; 0x04
    1156:	88 23       	and	r24, r24
    1158:	21 f0       	breq	.+8      	; 0x1162 <DIO_u8SetPinValue+0x3c>
    115a:	8c 81       	ldd	r24, Y+4	; 0x04
    115c:	81 30       	cpi	r24, 0x01	; 1
    115e:	09 f0       	breq	.+2      	; 0x1162 <DIO_u8SetPinValue+0x3c>
    1160:	02 c1       	rjmp	.+516    	; 0x1366 <DIO_u8SetPinValue+0x240>
		{
			switch(Copy_u8PortId)
    1162:	8a 81       	ldd	r24, Y+2	; 0x02
    1164:	28 2f       	mov	r18, r24
    1166:	30 e0       	ldi	r19, 0x00	; 0
    1168:	3e 87       	std	Y+14, r19	; 0x0e
    116a:	2d 87       	std	Y+13, r18	; 0x0d
    116c:	8d 85       	ldd	r24, Y+13	; 0x0d
    116e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1170:	81 30       	cpi	r24, 0x01	; 1
    1172:	91 05       	cpc	r25, r1
    1174:	09 f4       	brne	.+2      	; 0x1178 <DIO_u8SetPinValue+0x52>
    1176:	4f c0       	rjmp	.+158    	; 0x1216 <DIO_u8SetPinValue+0xf0>
    1178:	2d 85       	ldd	r18, Y+13	; 0x0d
    117a:	3e 85       	ldd	r19, Y+14	; 0x0e
    117c:	22 30       	cpi	r18, 0x02	; 2
    117e:	31 05       	cpc	r19, r1
    1180:	2c f4       	brge	.+10     	; 0x118c <DIO_u8SetPinValue+0x66>
    1182:	8d 85       	ldd	r24, Y+13	; 0x0d
    1184:	9e 85       	ldd	r25, Y+14	; 0x0e
    1186:	00 97       	sbiw	r24, 0x00	; 0
    1188:	71 f0       	breq	.+28     	; 0x11a6 <DIO_u8SetPinValue+0x80>
    118a:	ee c0       	rjmp	.+476    	; 0x1368 <DIO_u8SetPinValue+0x242>
    118c:	2d 85       	ldd	r18, Y+13	; 0x0d
    118e:	3e 85       	ldd	r19, Y+14	; 0x0e
    1190:	22 30       	cpi	r18, 0x02	; 2
    1192:	31 05       	cpc	r19, r1
    1194:	09 f4       	brne	.+2      	; 0x1198 <DIO_u8SetPinValue+0x72>
    1196:	77 c0       	rjmp	.+238    	; 0x1286 <DIO_u8SetPinValue+0x160>
    1198:	8d 85       	ldd	r24, Y+13	; 0x0d
    119a:	9e 85       	ldd	r25, Y+14	; 0x0e
    119c:	83 30       	cpi	r24, 0x03	; 3
    119e:	91 05       	cpc	r25, r1
    11a0:	09 f4       	brne	.+2      	; 0x11a4 <DIO_u8SetPinValue+0x7e>
    11a2:	a9 c0       	rjmp	.+338    	; 0x12f6 <DIO_u8SetPinValue+0x1d0>
    11a4:	e1 c0       	rjmp	.+450    	; 0x1368 <DIO_u8SetPinValue+0x242>
			{
			case DIO_u8_PORTA:
				switch(Copy_u8PinValue)
    11a6:	8c 81       	ldd	r24, Y+4	; 0x04
    11a8:	28 2f       	mov	r18, r24
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	3c 87       	std	Y+12, r19	; 0x0c
    11ae:	2b 87       	std	Y+11, r18	; 0x0b
    11b0:	8b 85       	ldd	r24, Y+11	; 0x0b
    11b2:	9c 85       	ldd	r25, Y+12	; 0x0c
    11b4:	00 97       	sbiw	r24, 0x00	; 0
    11b6:	31 f0       	breq	.+12     	; 0x11c4 <DIO_u8SetPinValue+0x9e>
    11b8:	2b 85       	ldd	r18, Y+11	; 0x0b
    11ba:	3c 85       	ldd	r19, Y+12	; 0x0c
    11bc:	21 30       	cpi	r18, 0x01	; 1
    11be:	31 05       	cpc	r19, r1
    11c0:	b1 f0       	breq	.+44     	; 0x11ee <DIO_u8SetPinValue+0xc8>
    11c2:	d2 c0       	rjmp	.+420    	; 0x1368 <DIO_u8SetPinValue+0x242>
				{
				case DIO_u8_LOW:
					CLR_BIT(PORTA_u8_REG,Copy_u8PinId);
    11c4:	ab e3       	ldi	r26, 0x3B	; 59
    11c6:	b0 e0       	ldi	r27, 0x00	; 0
    11c8:	eb e3       	ldi	r30, 0x3B	; 59
    11ca:	f0 e0       	ldi	r31, 0x00	; 0
    11cc:	80 81       	ld	r24, Z
    11ce:	48 2f       	mov	r20, r24
    11d0:	8b 81       	ldd	r24, Y+3	; 0x03
    11d2:	28 2f       	mov	r18, r24
    11d4:	30 e0       	ldi	r19, 0x00	; 0
    11d6:	81 e0       	ldi	r24, 0x01	; 1
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	02 2e       	mov	r0, r18
    11dc:	02 c0       	rjmp	.+4      	; 0x11e2 <DIO_u8SetPinValue+0xbc>
    11de:	88 0f       	add	r24, r24
    11e0:	99 1f       	adc	r25, r25
    11e2:	0a 94       	dec	r0
    11e4:	e2 f7       	brpl	.-8      	; 0x11de <DIO_u8SetPinValue+0xb8>
    11e6:	80 95       	com	r24
    11e8:	84 23       	and	r24, r20
    11ea:	8c 93       	st	X, r24
    11ec:	bd c0       	rjmp	.+378    	; 0x1368 <DIO_u8SetPinValue+0x242>
					break;
				case DIO_u8_HIGH:
					SET_BIT(PORTA_u8_REG,Copy_u8PinId);
    11ee:	ab e3       	ldi	r26, 0x3B	; 59
    11f0:	b0 e0       	ldi	r27, 0x00	; 0
    11f2:	eb e3       	ldi	r30, 0x3B	; 59
    11f4:	f0 e0       	ldi	r31, 0x00	; 0
    11f6:	80 81       	ld	r24, Z
    11f8:	48 2f       	mov	r20, r24
    11fa:	8b 81       	ldd	r24, Y+3	; 0x03
    11fc:	28 2f       	mov	r18, r24
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	81 e0       	ldi	r24, 0x01	; 1
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	02 2e       	mov	r0, r18
    1206:	02 c0       	rjmp	.+4      	; 0x120c <DIO_u8SetPinValue+0xe6>
    1208:	88 0f       	add	r24, r24
    120a:	99 1f       	adc	r25, r25
    120c:	0a 94       	dec	r0
    120e:	e2 f7       	brpl	.-8      	; 0x1208 <DIO_u8SetPinValue+0xe2>
    1210:	84 2b       	or	r24, r20
    1212:	8c 93       	st	X, r24
    1214:	a9 c0       	rjmp	.+338    	; 0x1368 <DIO_u8SetPinValue+0x242>
					break;
				}
				break;
				case DIO_u8_PORTB:
					switch(Copy_u8PinValue)
    1216:	8c 81       	ldd	r24, Y+4	; 0x04
    1218:	28 2f       	mov	r18, r24
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	3a 87       	std	Y+10, r19	; 0x0a
    121e:	29 87       	std	Y+9, r18	; 0x09
    1220:	89 85       	ldd	r24, Y+9	; 0x09
    1222:	9a 85       	ldd	r25, Y+10	; 0x0a
    1224:	00 97       	sbiw	r24, 0x00	; 0
    1226:	31 f0       	breq	.+12     	; 0x1234 <DIO_u8SetPinValue+0x10e>
    1228:	29 85       	ldd	r18, Y+9	; 0x09
    122a:	3a 85       	ldd	r19, Y+10	; 0x0a
    122c:	21 30       	cpi	r18, 0x01	; 1
    122e:	31 05       	cpc	r19, r1
    1230:	b1 f0       	breq	.+44     	; 0x125e <DIO_u8SetPinValue+0x138>
    1232:	9a c0       	rjmp	.+308    	; 0x1368 <DIO_u8SetPinValue+0x242>
					{
					case DIO_u8_LOW:
						CLR_BIT(PORTB_u8_REG,Copy_u8PinId);
    1234:	a8 e3       	ldi	r26, 0x38	; 56
    1236:	b0 e0       	ldi	r27, 0x00	; 0
    1238:	e8 e3       	ldi	r30, 0x38	; 56
    123a:	f0 e0       	ldi	r31, 0x00	; 0
    123c:	80 81       	ld	r24, Z
    123e:	48 2f       	mov	r20, r24
    1240:	8b 81       	ldd	r24, Y+3	; 0x03
    1242:	28 2f       	mov	r18, r24
    1244:	30 e0       	ldi	r19, 0x00	; 0
    1246:	81 e0       	ldi	r24, 0x01	; 1
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	02 2e       	mov	r0, r18
    124c:	02 c0       	rjmp	.+4      	; 0x1252 <DIO_u8SetPinValue+0x12c>
    124e:	88 0f       	add	r24, r24
    1250:	99 1f       	adc	r25, r25
    1252:	0a 94       	dec	r0
    1254:	e2 f7       	brpl	.-8      	; 0x124e <DIO_u8SetPinValue+0x128>
    1256:	80 95       	com	r24
    1258:	84 23       	and	r24, r20
    125a:	8c 93       	st	X, r24
    125c:	85 c0       	rjmp	.+266    	; 0x1368 <DIO_u8SetPinValue+0x242>
						break;
					case DIO_u8_HIGH:
						SET_BIT(PORTB_u8_REG,Copy_u8PinId);
    125e:	a8 e3       	ldi	r26, 0x38	; 56
    1260:	b0 e0       	ldi	r27, 0x00	; 0
    1262:	e8 e3       	ldi	r30, 0x38	; 56
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	80 81       	ld	r24, Z
    1268:	48 2f       	mov	r20, r24
    126a:	8b 81       	ldd	r24, Y+3	; 0x03
    126c:	28 2f       	mov	r18, r24
    126e:	30 e0       	ldi	r19, 0x00	; 0
    1270:	81 e0       	ldi	r24, 0x01	; 1
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	02 2e       	mov	r0, r18
    1276:	02 c0       	rjmp	.+4      	; 0x127c <DIO_u8SetPinValue+0x156>
    1278:	88 0f       	add	r24, r24
    127a:	99 1f       	adc	r25, r25
    127c:	0a 94       	dec	r0
    127e:	e2 f7       	brpl	.-8      	; 0x1278 <DIO_u8SetPinValue+0x152>
    1280:	84 2b       	or	r24, r20
    1282:	8c 93       	st	X, r24
    1284:	71 c0       	rjmp	.+226    	; 0x1368 <DIO_u8SetPinValue+0x242>
						break;
					}
					break;
					case DIO_u8_PORTC:
						switch(Copy_u8PinValue)
    1286:	8c 81       	ldd	r24, Y+4	; 0x04
    1288:	28 2f       	mov	r18, r24
    128a:	30 e0       	ldi	r19, 0x00	; 0
    128c:	38 87       	std	Y+8, r19	; 0x08
    128e:	2f 83       	std	Y+7, r18	; 0x07
    1290:	8f 81       	ldd	r24, Y+7	; 0x07
    1292:	98 85       	ldd	r25, Y+8	; 0x08
    1294:	00 97       	sbiw	r24, 0x00	; 0
    1296:	31 f0       	breq	.+12     	; 0x12a4 <DIO_u8SetPinValue+0x17e>
    1298:	2f 81       	ldd	r18, Y+7	; 0x07
    129a:	38 85       	ldd	r19, Y+8	; 0x08
    129c:	21 30       	cpi	r18, 0x01	; 1
    129e:	31 05       	cpc	r19, r1
    12a0:	b1 f0       	breq	.+44     	; 0x12ce <DIO_u8SetPinValue+0x1a8>
    12a2:	62 c0       	rjmp	.+196    	; 0x1368 <DIO_u8SetPinValue+0x242>
						{
						case DIO_u8_LOW:
							CLR_BIT(PORTC_u8_REG,Copy_u8PinId);
    12a4:	a5 e3       	ldi	r26, 0x35	; 53
    12a6:	b0 e0       	ldi	r27, 0x00	; 0
    12a8:	e5 e3       	ldi	r30, 0x35	; 53
    12aa:	f0 e0       	ldi	r31, 0x00	; 0
    12ac:	80 81       	ld	r24, Z
    12ae:	48 2f       	mov	r20, r24
    12b0:	8b 81       	ldd	r24, Y+3	; 0x03
    12b2:	28 2f       	mov	r18, r24
    12b4:	30 e0       	ldi	r19, 0x00	; 0
    12b6:	81 e0       	ldi	r24, 0x01	; 1
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	02 2e       	mov	r0, r18
    12bc:	02 c0       	rjmp	.+4      	; 0x12c2 <DIO_u8SetPinValue+0x19c>
    12be:	88 0f       	add	r24, r24
    12c0:	99 1f       	adc	r25, r25
    12c2:	0a 94       	dec	r0
    12c4:	e2 f7       	brpl	.-8      	; 0x12be <DIO_u8SetPinValue+0x198>
    12c6:	80 95       	com	r24
    12c8:	84 23       	and	r24, r20
    12ca:	8c 93       	st	X, r24
    12cc:	4d c0       	rjmp	.+154    	; 0x1368 <DIO_u8SetPinValue+0x242>
							break;
						case DIO_u8_HIGH:
							SET_BIT(PORTC_u8_REG,Copy_u8PinId);
    12ce:	a5 e3       	ldi	r26, 0x35	; 53
    12d0:	b0 e0       	ldi	r27, 0x00	; 0
    12d2:	e5 e3       	ldi	r30, 0x35	; 53
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	80 81       	ld	r24, Z
    12d8:	48 2f       	mov	r20, r24
    12da:	8b 81       	ldd	r24, Y+3	; 0x03
    12dc:	28 2f       	mov	r18, r24
    12de:	30 e0       	ldi	r19, 0x00	; 0
    12e0:	81 e0       	ldi	r24, 0x01	; 1
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	02 2e       	mov	r0, r18
    12e6:	02 c0       	rjmp	.+4      	; 0x12ec <DIO_u8SetPinValue+0x1c6>
    12e8:	88 0f       	add	r24, r24
    12ea:	99 1f       	adc	r25, r25
    12ec:	0a 94       	dec	r0
    12ee:	e2 f7       	brpl	.-8      	; 0x12e8 <DIO_u8SetPinValue+0x1c2>
    12f0:	84 2b       	or	r24, r20
    12f2:	8c 93       	st	X, r24
    12f4:	39 c0       	rjmp	.+114    	; 0x1368 <DIO_u8SetPinValue+0x242>
							break;
						}
						break;
						case DIO_u8_PORTD:
							switch(Copy_u8PinValue)
    12f6:	8c 81       	ldd	r24, Y+4	; 0x04
    12f8:	28 2f       	mov	r18, r24
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	3e 83       	std	Y+6, r19	; 0x06
    12fe:	2d 83       	std	Y+5, r18	; 0x05
    1300:	8d 81       	ldd	r24, Y+5	; 0x05
    1302:	9e 81       	ldd	r25, Y+6	; 0x06
    1304:	00 97       	sbiw	r24, 0x00	; 0
    1306:	31 f0       	breq	.+12     	; 0x1314 <DIO_u8SetPinValue+0x1ee>
    1308:	2d 81       	ldd	r18, Y+5	; 0x05
    130a:	3e 81       	ldd	r19, Y+6	; 0x06
    130c:	21 30       	cpi	r18, 0x01	; 1
    130e:	31 05       	cpc	r19, r1
    1310:	b1 f0       	breq	.+44     	; 0x133e <DIO_u8SetPinValue+0x218>
    1312:	2a c0       	rjmp	.+84     	; 0x1368 <DIO_u8SetPinValue+0x242>
							{
							case DIO_u8_LOW:
								CLR_BIT(PORTD_u8_REG,Copy_u8PinId);
    1314:	a2 e3       	ldi	r26, 0x32	; 50
    1316:	b0 e0       	ldi	r27, 0x00	; 0
    1318:	e2 e3       	ldi	r30, 0x32	; 50
    131a:	f0 e0       	ldi	r31, 0x00	; 0
    131c:	80 81       	ld	r24, Z
    131e:	48 2f       	mov	r20, r24
    1320:	8b 81       	ldd	r24, Y+3	; 0x03
    1322:	28 2f       	mov	r18, r24
    1324:	30 e0       	ldi	r19, 0x00	; 0
    1326:	81 e0       	ldi	r24, 0x01	; 1
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	02 2e       	mov	r0, r18
    132c:	02 c0       	rjmp	.+4      	; 0x1332 <DIO_u8SetPinValue+0x20c>
    132e:	88 0f       	add	r24, r24
    1330:	99 1f       	adc	r25, r25
    1332:	0a 94       	dec	r0
    1334:	e2 f7       	brpl	.-8      	; 0x132e <DIO_u8SetPinValue+0x208>
    1336:	80 95       	com	r24
    1338:	84 23       	and	r24, r20
    133a:	8c 93       	st	X, r24
    133c:	15 c0       	rjmp	.+42     	; 0x1368 <DIO_u8SetPinValue+0x242>
								break;
							case DIO_u8_HIGH:
								SET_BIT(PORTD_u8_REG,Copy_u8PinId);
    133e:	a2 e3       	ldi	r26, 0x32	; 50
    1340:	b0 e0       	ldi	r27, 0x00	; 0
    1342:	e2 e3       	ldi	r30, 0x32	; 50
    1344:	f0 e0       	ldi	r31, 0x00	; 0
    1346:	80 81       	ld	r24, Z
    1348:	48 2f       	mov	r20, r24
    134a:	8b 81       	ldd	r24, Y+3	; 0x03
    134c:	28 2f       	mov	r18, r24
    134e:	30 e0       	ldi	r19, 0x00	; 0
    1350:	81 e0       	ldi	r24, 0x01	; 1
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	02 2e       	mov	r0, r18
    1356:	02 c0       	rjmp	.+4      	; 0x135c <DIO_u8SetPinValue+0x236>
    1358:	88 0f       	add	r24, r24
    135a:	99 1f       	adc	r25, r25
    135c:	0a 94       	dec	r0
    135e:	e2 f7       	brpl	.-8      	; 0x1358 <DIO_u8SetPinValue+0x232>
    1360:	84 2b       	or	r24, r20
    1362:	8c 93       	st	X, r24
    1364:	01 c0       	rjmp	.+2      	; 0x1368 <DIO_u8SetPinValue+0x242>

			}
		}
		else
		{
			Local_u8ErrorStatus = STD_TYPES_NOK;
    1366:	19 82       	std	Y+1, r1	; 0x01
		}
		return Local_u8ErrorStatus;
    1368:	89 81       	ldd	r24, Y+1	; 0x01

	}
    136a:	2e 96       	adiw	r28, 0x0e	; 14
    136c:	0f b6       	in	r0, 0x3f	; 63
    136e:	f8 94       	cli
    1370:	de bf       	out	0x3e, r29	; 62
    1372:	0f be       	out	0x3f, r0	; 63
    1374:	cd bf       	out	0x3d, r28	; 61
    1376:	cf 91       	pop	r28
    1378:	df 91       	pop	r29
    137a:	08 95       	ret

0000137c <DIO_u8GetPinValue>:

	u8 DIO_u8GetPinValue		(u8 Copy_u8PortId , u8 Copy_u8PinId , u8 *Copy_pu8ReturnedPinValue)
	{
    137c:	df 93       	push	r29
    137e:	cf 93       	push	r28
    1380:	cd b7       	in	r28, 0x3d	; 61
    1382:	de b7       	in	r29, 0x3e	; 62
    1384:	27 97       	sbiw	r28, 0x07	; 7
    1386:	0f b6       	in	r0, 0x3f	; 63
    1388:	f8 94       	cli
    138a:	de bf       	out	0x3e, r29	; 62
    138c:	0f be       	out	0x3f, r0	; 63
    138e:	cd bf       	out	0x3d, r28	; 61
    1390:	8a 83       	std	Y+2, r24	; 0x02
    1392:	6b 83       	std	Y+3, r22	; 0x03
    1394:	5d 83       	std	Y+5, r21	; 0x05
    1396:	4c 83       	std	Y+4, r20	; 0x04
		u8 Local_u8ErrorStatus = STD_TYPES_OK;
    1398:	81 e0       	ldi	r24, 0x01	; 1
    139a:	89 83       	std	Y+1, r24	; 0x01
		if((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PinId<= DIO_u8_PIN7) && (Copy_pu8ReturnedPinValue != NULL))
    139c:	8a 81       	ldd	r24, Y+2	; 0x02
    139e:	84 30       	cpi	r24, 0x04	; 4
    13a0:	08 f0       	brcs	.+2      	; 0x13a4 <DIO_u8GetPinValue+0x28>
    13a2:	9b c0       	rjmp	.+310    	; 0x14da <DIO_u8GetPinValue+0x15e>
    13a4:	8b 81       	ldd	r24, Y+3	; 0x03
    13a6:	88 30       	cpi	r24, 0x08	; 8
    13a8:	08 f0       	brcs	.+2      	; 0x13ac <DIO_u8GetPinValue+0x30>
    13aa:	97 c0       	rjmp	.+302    	; 0x14da <DIO_u8GetPinValue+0x15e>
    13ac:	8c 81       	ldd	r24, Y+4	; 0x04
    13ae:	9d 81       	ldd	r25, Y+5	; 0x05
    13b0:	00 97       	sbiw	r24, 0x00	; 0
    13b2:	09 f4       	brne	.+2      	; 0x13b6 <DIO_u8GetPinValue+0x3a>
    13b4:	92 c0       	rjmp	.+292    	; 0x14da <DIO_u8GetPinValue+0x15e>
		{
			switch(Copy_u8PortId)
    13b6:	8a 81       	ldd	r24, Y+2	; 0x02
    13b8:	28 2f       	mov	r18, r24
    13ba:	30 e0       	ldi	r19, 0x00	; 0
    13bc:	3f 83       	std	Y+7, r19	; 0x07
    13be:	2e 83       	std	Y+6, r18	; 0x06
    13c0:	4e 81       	ldd	r20, Y+6	; 0x06
    13c2:	5f 81       	ldd	r21, Y+7	; 0x07
    13c4:	41 30       	cpi	r20, 0x01	; 1
    13c6:	51 05       	cpc	r21, r1
    13c8:	a1 f1       	breq	.+104    	; 0x1432 <DIO_u8GetPinValue+0xb6>
    13ca:	8e 81       	ldd	r24, Y+6	; 0x06
    13cc:	9f 81       	ldd	r25, Y+7	; 0x07
    13ce:	82 30       	cpi	r24, 0x02	; 2
    13d0:	91 05       	cpc	r25, r1
    13d2:	34 f4       	brge	.+12     	; 0x13e0 <DIO_u8GetPinValue+0x64>
    13d4:	2e 81       	ldd	r18, Y+6	; 0x06
    13d6:	3f 81       	ldd	r19, Y+7	; 0x07
    13d8:	21 15       	cp	r18, r1
    13da:	31 05       	cpc	r19, r1
    13dc:	71 f0       	breq	.+28     	; 0x13fa <DIO_u8GetPinValue+0x7e>
    13de:	7e c0       	rjmp	.+252    	; 0x14dc <DIO_u8GetPinValue+0x160>
    13e0:	4e 81       	ldd	r20, Y+6	; 0x06
    13e2:	5f 81       	ldd	r21, Y+7	; 0x07
    13e4:	42 30       	cpi	r20, 0x02	; 2
    13e6:	51 05       	cpc	r21, r1
    13e8:	09 f4       	brne	.+2      	; 0x13ec <DIO_u8GetPinValue+0x70>
    13ea:	3f c0       	rjmp	.+126    	; 0x146a <DIO_u8GetPinValue+0xee>
    13ec:	8e 81       	ldd	r24, Y+6	; 0x06
    13ee:	9f 81       	ldd	r25, Y+7	; 0x07
    13f0:	83 30       	cpi	r24, 0x03	; 3
    13f2:	91 05       	cpc	r25, r1
    13f4:	09 f4       	brne	.+2      	; 0x13f8 <DIO_u8GetPinValue+0x7c>
    13f6:	55 c0       	rjmp	.+170    	; 0x14a2 <DIO_u8GetPinValue+0x126>
    13f8:	71 c0       	rjmp	.+226    	; 0x14dc <DIO_u8GetPinValue+0x160>
			{
			case DIO_u8_PORTA:
				if(GET_BIT(PINA_u8_REG,Copy_u8PinId) == 0)
    13fa:	e9 e3       	ldi	r30, 0x39	; 57
    13fc:	f0 e0       	ldi	r31, 0x00	; 0
    13fe:	80 81       	ld	r24, Z
    1400:	28 2f       	mov	r18, r24
    1402:	30 e0       	ldi	r19, 0x00	; 0
    1404:	8b 81       	ldd	r24, Y+3	; 0x03
    1406:	88 2f       	mov	r24, r24
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	a9 01       	movw	r20, r18
    140c:	02 c0       	rjmp	.+4      	; 0x1412 <DIO_u8GetPinValue+0x96>
    140e:	55 95       	asr	r21
    1410:	47 95       	ror	r20
    1412:	8a 95       	dec	r24
    1414:	e2 f7       	brpl	.-8      	; 0x140e <DIO_u8GetPinValue+0x92>
    1416:	ca 01       	movw	r24, r20
    1418:	81 70       	andi	r24, 0x01	; 1
    141a:	90 70       	andi	r25, 0x00	; 0
    141c:	00 97       	sbiw	r24, 0x00	; 0
    141e:	21 f4       	brne	.+8      	; 0x1428 <DIO_u8GetPinValue+0xac>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    1420:	ec 81       	ldd	r30, Y+4	; 0x04
    1422:	fd 81       	ldd	r31, Y+5	; 0x05
    1424:	10 82       	st	Z, r1
    1426:	5a c0       	rjmp	.+180    	; 0x14dc <DIO_u8GetPinValue+0x160>
				}
				else 
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    1428:	ec 81       	ldd	r30, Y+4	; 0x04
    142a:	fd 81       	ldd	r31, Y+5	; 0x05
    142c:	81 e0       	ldi	r24, 0x01	; 1
    142e:	80 83       	st	Z, r24
    1430:	55 c0       	rjmp	.+170    	; 0x14dc <DIO_u8GetPinValue+0x160>
				}
				break;
			case DIO_u8_PORTB:
				if(GET_BIT(PINB_u8_REG,Copy_u8PinId) == 0)
    1432:	e6 e3       	ldi	r30, 0x36	; 54
    1434:	f0 e0       	ldi	r31, 0x00	; 0
    1436:	80 81       	ld	r24, Z
    1438:	28 2f       	mov	r18, r24
    143a:	30 e0       	ldi	r19, 0x00	; 0
    143c:	8b 81       	ldd	r24, Y+3	; 0x03
    143e:	88 2f       	mov	r24, r24
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	a9 01       	movw	r20, r18
    1444:	02 c0       	rjmp	.+4      	; 0x144a <DIO_u8GetPinValue+0xce>
    1446:	55 95       	asr	r21
    1448:	47 95       	ror	r20
    144a:	8a 95       	dec	r24
    144c:	e2 f7       	brpl	.-8      	; 0x1446 <DIO_u8GetPinValue+0xca>
    144e:	ca 01       	movw	r24, r20
    1450:	81 70       	andi	r24, 0x01	; 1
    1452:	90 70       	andi	r25, 0x00	; 0
    1454:	00 97       	sbiw	r24, 0x00	; 0
    1456:	21 f4       	brne	.+8      	; 0x1460 <DIO_u8GetPinValue+0xe4>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    1458:	ec 81       	ldd	r30, Y+4	; 0x04
    145a:	fd 81       	ldd	r31, Y+5	; 0x05
    145c:	10 82       	st	Z, r1
    145e:	3e c0       	rjmp	.+124    	; 0x14dc <DIO_u8GetPinValue+0x160>
				}
				else 
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    1460:	ec 81       	ldd	r30, Y+4	; 0x04
    1462:	fd 81       	ldd	r31, Y+5	; 0x05
    1464:	81 e0       	ldi	r24, 0x01	; 1
    1466:	80 83       	st	Z, r24
    1468:	39 c0       	rjmp	.+114    	; 0x14dc <DIO_u8GetPinValue+0x160>
				}
				break;
			case DIO_u8_PORTC:
				if(GET_BIT(PINC_u8_REG,Copy_u8PinId) == 0)
    146a:	e3 e3       	ldi	r30, 0x33	; 51
    146c:	f0 e0       	ldi	r31, 0x00	; 0
    146e:	80 81       	ld	r24, Z
    1470:	28 2f       	mov	r18, r24
    1472:	30 e0       	ldi	r19, 0x00	; 0
    1474:	8b 81       	ldd	r24, Y+3	; 0x03
    1476:	88 2f       	mov	r24, r24
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	a9 01       	movw	r20, r18
    147c:	02 c0       	rjmp	.+4      	; 0x1482 <DIO_u8GetPinValue+0x106>
    147e:	55 95       	asr	r21
    1480:	47 95       	ror	r20
    1482:	8a 95       	dec	r24
    1484:	e2 f7       	brpl	.-8      	; 0x147e <DIO_u8GetPinValue+0x102>
    1486:	ca 01       	movw	r24, r20
    1488:	81 70       	andi	r24, 0x01	; 1
    148a:	90 70       	andi	r25, 0x00	; 0
    148c:	00 97       	sbiw	r24, 0x00	; 0
    148e:	21 f4       	brne	.+8      	; 0x1498 <DIO_u8GetPinValue+0x11c>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    1490:	ec 81       	ldd	r30, Y+4	; 0x04
    1492:	fd 81       	ldd	r31, Y+5	; 0x05
    1494:	10 82       	st	Z, r1
    1496:	22 c0       	rjmp	.+68     	; 0x14dc <DIO_u8GetPinValue+0x160>
				}
				else 
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    1498:	ec 81       	ldd	r30, Y+4	; 0x04
    149a:	fd 81       	ldd	r31, Y+5	; 0x05
    149c:	81 e0       	ldi	r24, 0x01	; 1
    149e:	80 83       	st	Z, r24
    14a0:	1d c0       	rjmp	.+58     	; 0x14dc <DIO_u8GetPinValue+0x160>
				}
				break;
			case DIO_u8_PORTD:
				if(GET_BIT(PIND_u8_REG,Copy_u8PinId) == 0)
    14a2:	e0 e3       	ldi	r30, 0x30	; 48
    14a4:	f0 e0       	ldi	r31, 0x00	; 0
    14a6:	80 81       	ld	r24, Z
    14a8:	28 2f       	mov	r18, r24
    14aa:	30 e0       	ldi	r19, 0x00	; 0
    14ac:	8b 81       	ldd	r24, Y+3	; 0x03
    14ae:	88 2f       	mov	r24, r24
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	a9 01       	movw	r20, r18
    14b4:	02 c0       	rjmp	.+4      	; 0x14ba <DIO_u8GetPinValue+0x13e>
    14b6:	55 95       	asr	r21
    14b8:	47 95       	ror	r20
    14ba:	8a 95       	dec	r24
    14bc:	e2 f7       	brpl	.-8      	; 0x14b6 <DIO_u8GetPinValue+0x13a>
    14be:	ca 01       	movw	r24, r20
    14c0:	81 70       	andi	r24, 0x01	; 1
    14c2:	90 70       	andi	r25, 0x00	; 0
    14c4:	00 97       	sbiw	r24, 0x00	; 0
    14c6:	21 f4       	brne	.+8      	; 0x14d0 <DIO_u8GetPinValue+0x154>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    14c8:	ec 81       	ldd	r30, Y+4	; 0x04
    14ca:	fd 81       	ldd	r31, Y+5	; 0x05
    14cc:	10 82       	st	Z, r1
    14ce:	06 c0       	rjmp	.+12     	; 0x14dc <DIO_u8GetPinValue+0x160>
				}
				else 
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    14d0:	ec 81       	ldd	r30, Y+4	; 0x04
    14d2:	fd 81       	ldd	r31, Y+5	; 0x05
    14d4:	81 e0       	ldi	r24, 0x01	; 1
    14d6:	80 83       	st	Z, r24
    14d8:	01 c0       	rjmp	.+2      	; 0x14dc <DIO_u8GetPinValue+0x160>

			}
		}
		else
		{
			Local_u8ErrorStatus = STD_TYPES_NOK;
    14da:	19 82       	std	Y+1, r1	; 0x01
		}
		return Local_u8ErrorStatus;
    14dc:	89 81       	ldd	r24, Y+1	; 0x01
	}
    14de:	27 96       	adiw	r28, 0x07	; 7
    14e0:	0f b6       	in	r0, 0x3f	; 63
    14e2:	f8 94       	cli
    14e4:	de bf       	out	0x3e, r29	; 62
    14e6:	0f be       	out	0x3f, r0	; 63
    14e8:	cd bf       	out	0x3d, r28	; 61
    14ea:	cf 91       	pop	r28
    14ec:	df 91       	pop	r29
    14ee:	08 95       	ret

000014f0 <DIO_u8SetPortDirection>:

	u8 DIO_u8SetPortDirection	(u8 Copy_u8PortId , u8 Copy_u8PortDirection)
	{
    14f0:	df 93       	push	r29
    14f2:	cf 93       	push	r28
    14f4:	cd b7       	in	r28, 0x3d	; 61
    14f6:	de b7       	in	r29, 0x3e	; 62
    14f8:	2d 97       	sbiw	r28, 0x0d	; 13
    14fa:	0f b6       	in	r0, 0x3f	; 63
    14fc:	f8 94       	cli
    14fe:	de bf       	out	0x3e, r29	; 62
    1500:	0f be       	out	0x3f, r0	; 63
    1502:	cd bf       	out	0x3d, r28	; 61
    1504:	8a 83       	std	Y+2, r24	; 0x02
    1506:	6b 83       	std	Y+3, r22	; 0x03
		u8 Local_u8ErrorStatus = STD_TYPES_OK;
    1508:	81 e0       	ldi	r24, 0x01	; 1
    150a:	89 83       	std	Y+1, r24	; 0x01
		if((Copy_u8PortId <= DIO_u8_PORTD) && ((Copy_u8PortDirection == DIO_u8_INPUT) || (Copy_u8PortDirection == DIO_u8_OUTPUT)))
    150c:	8a 81       	ldd	r24, Y+2	; 0x02
    150e:	84 30       	cpi	r24, 0x04	; 4
    1510:	08 f0       	brcs	.+2      	; 0x1514 <DIO_u8SetPortDirection+0x24>
    1512:	87 c0       	rjmp	.+270    	; 0x1622 <DIO_u8SetPortDirection+0x132>
    1514:	8b 81       	ldd	r24, Y+3	; 0x03
    1516:	88 23       	and	r24, r24
    1518:	21 f0       	breq	.+8      	; 0x1522 <DIO_u8SetPortDirection+0x32>
    151a:	8b 81       	ldd	r24, Y+3	; 0x03
    151c:	81 30       	cpi	r24, 0x01	; 1
    151e:	09 f0       	breq	.+2      	; 0x1522 <DIO_u8SetPortDirection+0x32>
    1520:	80 c0       	rjmp	.+256    	; 0x1622 <DIO_u8SetPortDirection+0x132>
		{
			switch(Copy_u8PortId)
    1522:	8a 81       	ldd	r24, Y+2	; 0x02
    1524:	28 2f       	mov	r18, r24
    1526:	30 e0       	ldi	r19, 0x00	; 0
    1528:	3d 87       	std	Y+13, r19	; 0x0d
    152a:	2c 87       	std	Y+12, r18	; 0x0c
    152c:	8c 85       	ldd	r24, Y+12	; 0x0c
    152e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1530:	81 30       	cpi	r24, 0x01	; 1
    1532:	91 05       	cpc	r25, r1
    1534:	71 f1       	breq	.+92     	; 0x1592 <DIO_u8SetPortDirection+0xa2>
    1536:	2c 85       	ldd	r18, Y+12	; 0x0c
    1538:	3d 85       	ldd	r19, Y+13	; 0x0d
    153a:	22 30       	cpi	r18, 0x02	; 2
    153c:	31 05       	cpc	r19, r1
    153e:	2c f4       	brge	.+10     	; 0x154a <DIO_u8SetPortDirection+0x5a>
    1540:	8c 85       	ldd	r24, Y+12	; 0x0c
    1542:	9d 85       	ldd	r25, Y+13	; 0x0d
    1544:	00 97       	sbiw	r24, 0x00	; 0
    1546:	69 f0       	breq	.+26     	; 0x1562 <DIO_u8SetPortDirection+0x72>
    1548:	6d c0       	rjmp	.+218    	; 0x1624 <DIO_u8SetPortDirection+0x134>
    154a:	2c 85       	ldd	r18, Y+12	; 0x0c
    154c:	3d 85       	ldd	r19, Y+13	; 0x0d
    154e:	22 30       	cpi	r18, 0x02	; 2
    1550:	31 05       	cpc	r19, r1
    1552:	b9 f1       	breq	.+110    	; 0x15c2 <DIO_u8SetPortDirection+0xd2>
    1554:	8c 85       	ldd	r24, Y+12	; 0x0c
    1556:	9d 85       	ldd	r25, Y+13	; 0x0d
    1558:	83 30       	cpi	r24, 0x03	; 3
    155a:	91 05       	cpc	r25, r1
    155c:	09 f4       	brne	.+2      	; 0x1560 <DIO_u8SetPortDirection+0x70>
    155e:	49 c0       	rjmp	.+146    	; 0x15f2 <DIO_u8SetPortDirection+0x102>
    1560:	61 c0       	rjmp	.+194    	; 0x1624 <DIO_u8SetPortDirection+0x134>
			{
			case DIO_u8_PORTA:
				switch(Copy_u8PortDirection)
    1562:	8b 81       	ldd	r24, Y+3	; 0x03
    1564:	28 2f       	mov	r18, r24
    1566:	30 e0       	ldi	r19, 0x00	; 0
    1568:	3b 87       	std	Y+11, r19	; 0x0b
    156a:	2a 87       	std	Y+10, r18	; 0x0a
    156c:	8a 85       	ldd	r24, Y+10	; 0x0a
    156e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1570:	00 97       	sbiw	r24, 0x00	; 0
    1572:	31 f0       	breq	.+12     	; 0x1580 <DIO_u8SetPortDirection+0x90>
    1574:	2a 85       	ldd	r18, Y+10	; 0x0a
    1576:	3b 85       	ldd	r19, Y+11	; 0x0b
    1578:	21 30       	cpi	r18, 0x01	; 1
    157a:	31 05       	cpc	r19, r1
    157c:	29 f0       	breq	.+10     	; 0x1588 <DIO_u8SetPortDirection+0x98>
    157e:	52 c0       	rjmp	.+164    	; 0x1624 <DIO_u8SetPortDirection+0x134>
				{
				case DIO_u8_INPUT:
					DDRA_u8_REG = 0x00;
    1580:	ea e3       	ldi	r30, 0x3A	; 58
    1582:	f0 e0       	ldi	r31, 0x00	; 0
    1584:	10 82       	st	Z, r1
    1586:	4e c0       	rjmp	.+156    	; 0x1624 <DIO_u8SetPortDirection+0x134>
					break;
				case DIO_u8_OUTPUT:
					DDRA_u8_REG = 0xFF;
    1588:	ea e3       	ldi	r30, 0x3A	; 58
    158a:	f0 e0       	ldi	r31, 0x00	; 0
    158c:	8f ef       	ldi	r24, 0xFF	; 255
    158e:	80 83       	st	Z, r24
    1590:	49 c0       	rjmp	.+146    	; 0x1624 <DIO_u8SetPortDirection+0x134>
					break;
				}
				break;
				case DIO_u8_PORTB:
					switch(Copy_u8PortDirection)
    1592:	8b 81       	ldd	r24, Y+3	; 0x03
    1594:	28 2f       	mov	r18, r24
    1596:	30 e0       	ldi	r19, 0x00	; 0
    1598:	39 87       	std	Y+9, r19	; 0x09
    159a:	28 87       	std	Y+8, r18	; 0x08
    159c:	88 85       	ldd	r24, Y+8	; 0x08
    159e:	99 85       	ldd	r25, Y+9	; 0x09
    15a0:	00 97       	sbiw	r24, 0x00	; 0
    15a2:	31 f0       	breq	.+12     	; 0x15b0 <DIO_u8SetPortDirection+0xc0>
    15a4:	28 85       	ldd	r18, Y+8	; 0x08
    15a6:	39 85       	ldd	r19, Y+9	; 0x09
    15a8:	21 30       	cpi	r18, 0x01	; 1
    15aa:	31 05       	cpc	r19, r1
    15ac:	29 f0       	breq	.+10     	; 0x15b8 <DIO_u8SetPortDirection+0xc8>
    15ae:	3a c0       	rjmp	.+116    	; 0x1624 <DIO_u8SetPortDirection+0x134>
					{
					case DIO_u8_INPUT:
						DDRB_u8_REG = 0x00;
    15b0:	e7 e3       	ldi	r30, 0x37	; 55
    15b2:	f0 e0       	ldi	r31, 0x00	; 0
    15b4:	10 82       	st	Z, r1
    15b6:	36 c0       	rjmp	.+108    	; 0x1624 <DIO_u8SetPortDirection+0x134>
						break;
					case DIO_u8_OUTPUT:
						DDRB_u8_REG = 0xFF;
    15b8:	e7 e3       	ldi	r30, 0x37	; 55
    15ba:	f0 e0       	ldi	r31, 0x00	; 0
    15bc:	8f ef       	ldi	r24, 0xFF	; 255
    15be:	80 83       	st	Z, r24
    15c0:	31 c0       	rjmp	.+98     	; 0x1624 <DIO_u8SetPortDirection+0x134>
						break;
					}
					break;
					case DIO_u8_PORTC:
						switch(Copy_u8PortDirection)
    15c2:	8b 81       	ldd	r24, Y+3	; 0x03
    15c4:	28 2f       	mov	r18, r24
    15c6:	30 e0       	ldi	r19, 0x00	; 0
    15c8:	3f 83       	std	Y+7, r19	; 0x07
    15ca:	2e 83       	std	Y+6, r18	; 0x06
    15cc:	8e 81       	ldd	r24, Y+6	; 0x06
    15ce:	9f 81       	ldd	r25, Y+7	; 0x07
    15d0:	00 97       	sbiw	r24, 0x00	; 0
    15d2:	31 f0       	breq	.+12     	; 0x15e0 <DIO_u8SetPortDirection+0xf0>
    15d4:	2e 81       	ldd	r18, Y+6	; 0x06
    15d6:	3f 81       	ldd	r19, Y+7	; 0x07
    15d8:	21 30       	cpi	r18, 0x01	; 1
    15da:	31 05       	cpc	r19, r1
    15dc:	29 f0       	breq	.+10     	; 0x15e8 <DIO_u8SetPortDirection+0xf8>
    15de:	22 c0       	rjmp	.+68     	; 0x1624 <DIO_u8SetPortDirection+0x134>
						{
						case DIO_u8_INPUT:
							DDRC_u8_REG = 0x00;
    15e0:	e4 e3       	ldi	r30, 0x34	; 52
    15e2:	f0 e0       	ldi	r31, 0x00	; 0
    15e4:	10 82       	st	Z, r1
    15e6:	1e c0       	rjmp	.+60     	; 0x1624 <DIO_u8SetPortDirection+0x134>
							break;
						case DIO_u8_OUTPUT:
							DDRC_u8_REG = 0xFF;
    15e8:	e4 e3       	ldi	r30, 0x34	; 52
    15ea:	f0 e0       	ldi	r31, 0x00	; 0
    15ec:	8f ef       	ldi	r24, 0xFF	; 255
    15ee:	80 83       	st	Z, r24
    15f0:	19 c0       	rjmp	.+50     	; 0x1624 <DIO_u8SetPortDirection+0x134>
							break;
						}
						break;
						case DIO_u8_PORTD:
							switch(Copy_u8PortDirection)
    15f2:	8b 81       	ldd	r24, Y+3	; 0x03
    15f4:	28 2f       	mov	r18, r24
    15f6:	30 e0       	ldi	r19, 0x00	; 0
    15f8:	3d 83       	std	Y+5, r19	; 0x05
    15fa:	2c 83       	std	Y+4, r18	; 0x04
    15fc:	8c 81       	ldd	r24, Y+4	; 0x04
    15fe:	9d 81       	ldd	r25, Y+5	; 0x05
    1600:	00 97       	sbiw	r24, 0x00	; 0
    1602:	31 f0       	breq	.+12     	; 0x1610 <DIO_u8SetPortDirection+0x120>
    1604:	2c 81       	ldd	r18, Y+4	; 0x04
    1606:	3d 81       	ldd	r19, Y+5	; 0x05
    1608:	21 30       	cpi	r18, 0x01	; 1
    160a:	31 05       	cpc	r19, r1
    160c:	29 f0       	breq	.+10     	; 0x1618 <DIO_u8SetPortDirection+0x128>
    160e:	0a c0       	rjmp	.+20     	; 0x1624 <DIO_u8SetPortDirection+0x134>
							{
							case DIO_u8_INPUT:
								DDRD_u8_REG = 0x00;
    1610:	e1 e3       	ldi	r30, 0x31	; 49
    1612:	f0 e0       	ldi	r31, 0x00	; 0
    1614:	10 82       	st	Z, r1
    1616:	06 c0       	rjmp	.+12     	; 0x1624 <DIO_u8SetPortDirection+0x134>
								break;
							case DIO_u8_OUTPUT:
								DDRD_u8_REG = 0xFF;
    1618:	e1 e3       	ldi	r30, 0x31	; 49
    161a:	f0 e0       	ldi	r31, 0x00	; 0
    161c:	8f ef       	ldi	r24, 0xFF	; 255
    161e:	80 83       	st	Z, r24
    1620:	01 c0       	rjmp	.+2      	; 0x1624 <DIO_u8SetPortDirection+0x134>

			}
		}
		else
		{
			Local_u8ErrorStatus = STD_TYPES_NOK;
    1622:	19 82       	std	Y+1, r1	; 0x01
		}
		return Local_u8ErrorStatus;
    1624:	89 81       	ldd	r24, Y+1	; 0x01
	}
    1626:	2d 96       	adiw	r28, 0x0d	; 13
    1628:	0f b6       	in	r0, 0x3f	; 63
    162a:	f8 94       	cli
    162c:	de bf       	out	0x3e, r29	; 62
    162e:	0f be       	out	0x3f, r0	; 63
    1630:	cd bf       	out	0x3d, r28	; 61
    1632:	cf 91       	pop	r28
    1634:	df 91       	pop	r29
    1636:	08 95       	ret

00001638 <DIO_u8SetPortValue>:

	u8 DIO_u8SetPortValue		(u8 Copy_u8PortId , u8 Copy_u8PortValue     ) 
	{
    1638:	df 93       	push	r29
    163a:	cf 93       	push	r28
    163c:	00 d0       	rcall	.+0      	; 0x163e <DIO_u8SetPortValue+0x6>
    163e:	00 d0       	rcall	.+0      	; 0x1640 <DIO_u8SetPortValue+0x8>
    1640:	0f 92       	push	r0
    1642:	cd b7       	in	r28, 0x3d	; 61
    1644:	de b7       	in	r29, 0x3e	; 62
    1646:	8a 83       	std	Y+2, r24	; 0x02
    1648:	6b 83       	std	Y+3, r22	; 0x03
		u8 Local_u8ErrorStatus = STD_TYPES_OK;
    164a:	81 e0       	ldi	r24, 0x01	; 1
    164c:	89 83       	std	Y+1, r24	; 0x01

		switch(Copy_u8PortId)
    164e:	8a 81       	ldd	r24, Y+2	; 0x02
    1650:	28 2f       	mov	r18, r24
    1652:	30 e0       	ldi	r19, 0x00	; 0
    1654:	3d 83       	std	Y+5, r19	; 0x05
    1656:	2c 83       	std	Y+4, r18	; 0x04
    1658:	8c 81       	ldd	r24, Y+4	; 0x04
    165a:	9d 81       	ldd	r25, Y+5	; 0x05
    165c:	81 30       	cpi	r24, 0x01	; 1
    165e:	91 05       	cpc	r25, r1
    1660:	d1 f0       	breq	.+52     	; 0x1696 <DIO_u8SetPortValue+0x5e>
    1662:	2c 81       	ldd	r18, Y+4	; 0x04
    1664:	3d 81       	ldd	r19, Y+5	; 0x05
    1666:	22 30       	cpi	r18, 0x02	; 2
    1668:	31 05       	cpc	r19, r1
    166a:	2c f4       	brge	.+10     	; 0x1676 <DIO_u8SetPortValue+0x3e>
    166c:	8c 81       	ldd	r24, Y+4	; 0x04
    166e:	9d 81       	ldd	r25, Y+5	; 0x05
    1670:	00 97       	sbiw	r24, 0x00	; 0
    1672:	61 f0       	breq	.+24     	; 0x168c <DIO_u8SetPortValue+0x54>
    1674:	1f c0       	rjmp	.+62     	; 0x16b4 <DIO_u8SetPortValue+0x7c>
    1676:	2c 81       	ldd	r18, Y+4	; 0x04
    1678:	3d 81       	ldd	r19, Y+5	; 0x05
    167a:	22 30       	cpi	r18, 0x02	; 2
    167c:	31 05       	cpc	r19, r1
    167e:	81 f0       	breq	.+32     	; 0x16a0 <DIO_u8SetPortValue+0x68>
    1680:	8c 81       	ldd	r24, Y+4	; 0x04
    1682:	9d 81       	ldd	r25, Y+5	; 0x05
    1684:	83 30       	cpi	r24, 0x03	; 3
    1686:	91 05       	cpc	r25, r1
    1688:	81 f0       	breq	.+32     	; 0x16aa <DIO_u8SetPortValue+0x72>
    168a:	14 c0       	rjmp	.+40     	; 0x16b4 <DIO_u8SetPortValue+0x7c>
		{
		case DIO_u8_PORTA:
			PORTA_u8_REG = Copy_u8PortValue;
    168c:	eb e3       	ldi	r30, 0x3B	; 59
    168e:	f0 e0       	ldi	r31, 0x00	; 0
    1690:	8b 81       	ldd	r24, Y+3	; 0x03
    1692:	80 83       	st	Z, r24
    1694:	10 c0       	rjmp	.+32     	; 0x16b6 <DIO_u8SetPortValue+0x7e>
			break;
		case DIO_u8_PORTB:
			PORTB_u8_REG = Copy_u8PortValue;
    1696:	e8 e3       	ldi	r30, 0x38	; 56
    1698:	f0 e0       	ldi	r31, 0x00	; 0
    169a:	8b 81       	ldd	r24, Y+3	; 0x03
    169c:	80 83       	st	Z, r24
    169e:	0b c0       	rjmp	.+22     	; 0x16b6 <DIO_u8SetPortValue+0x7e>
			break;
		case DIO_u8_PORTC:
			PORTC_u8_REG = Copy_u8PortValue;
    16a0:	e5 e3       	ldi	r30, 0x35	; 53
    16a2:	f0 e0       	ldi	r31, 0x00	; 0
    16a4:	8b 81       	ldd	r24, Y+3	; 0x03
    16a6:	80 83       	st	Z, r24
    16a8:	06 c0       	rjmp	.+12     	; 0x16b6 <DIO_u8SetPortValue+0x7e>
			break;
		case DIO_u8_PORTD:
			PORTD_u8_REG = Copy_u8PortValue;
    16aa:	e2 e3       	ldi	r30, 0x32	; 50
    16ac:	f0 e0       	ldi	r31, 0x00	; 0
    16ae:	8b 81       	ldd	r24, Y+3	; 0x03
    16b0:	80 83       	st	Z, r24
    16b2:	01 c0       	rjmp	.+2      	; 0x16b6 <DIO_u8SetPortValue+0x7e>
			break;

		default:
			Local_u8ErrorStatus = STD_TYPES_NOK;
    16b4:	19 82       	std	Y+1, r1	; 0x01
			break;
		}
		return Local_u8ErrorStatus;
    16b6:	89 81       	ldd	r24, Y+1	; 0x01
	}
    16b8:	0f 90       	pop	r0
    16ba:	0f 90       	pop	r0
    16bc:	0f 90       	pop	r0
    16be:	0f 90       	pop	r0
    16c0:	0f 90       	pop	r0
    16c2:	cf 91       	pop	r28
    16c4:	df 91       	pop	r29
    16c6:	08 95       	ret

000016c8 <DIO_u8GetPortValue>:

	u8 DIO_u8GetPortValue		(u8 Copy_u8PortId , u8 *Copy_pu8ReturnedPortValue)
	{
    16c8:	df 93       	push	r29
    16ca:	cf 93       	push	r28
    16cc:	00 d0       	rcall	.+0      	; 0x16ce <DIO_u8GetPortValue+0x6>
    16ce:	00 d0       	rcall	.+0      	; 0x16d0 <DIO_u8GetPortValue+0x8>
    16d0:	00 d0       	rcall	.+0      	; 0x16d2 <DIO_u8GetPortValue+0xa>
    16d2:	cd b7       	in	r28, 0x3d	; 61
    16d4:	de b7       	in	r29, 0x3e	; 62
    16d6:	8a 83       	std	Y+2, r24	; 0x02
    16d8:	7c 83       	std	Y+4, r23	; 0x04
    16da:	6b 83       	std	Y+3, r22	; 0x03
		u8 Local_u8ErrorStatus = STD_TYPES_OK;
    16dc:	81 e0       	ldi	r24, 0x01	; 1
    16de:	89 83       	std	Y+1, r24	; 0x01

		if(Copy_pu8ReturnedPortValue != NULL)
    16e0:	8b 81       	ldd	r24, Y+3	; 0x03
    16e2:	9c 81       	ldd	r25, Y+4	; 0x04
    16e4:	00 97       	sbiw	r24, 0x00	; 0
    16e6:	e9 f1       	breq	.+122    	; 0x1762 <DIO_u8GetPortValue+0x9a>
		{
			switch(Copy_u8PortId)
    16e8:	8a 81       	ldd	r24, Y+2	; 0x02
    16ea:	28 2f       	mov	r18, r24
    16ec:	30 e0       	ldi	r19, 0x00	; 0
    16ee:	3e 83       	std	Y+6, r19	; 0x06
    16f0:	2d 83       	std	Y+5, r18	; 0x05
    16f2:	8d 81       	ldd	r24, Y+5	; 0x05
    16f4:	9e 81       	ldd	r25, Y+6	; 0x06
    16f6:	81 30       	cpi	r24, 0x01	; 1
    16f8:	91 05       	cpc	r25, r1
    16fa:	e1 f0       	breq	.+56     	; 0x1734 <DIO_u8GetPortValue+0x6c>
    16fc:	2d 81       	ldd	r18, Y+5	; 0x05
    16fe:	3e 81       	ldd	r19, Y+6	; 0x06
    1700:	22 30       	cpi	r18, 0x02	; 2
    1702:	31 05       	cpc	r19, r1
    1704:	2c f4       	brge	.+10     	; 0x1710 <DIO_u8GetPortValue+0x48>
    1706:	8d 81       	ldd	r24, Y+5	; 0x05
    1708:	9e 81       	ldd	r25, Y+6	; 0x06
    170a:	00 97       	sbiw	r24, 0x00	; 0
    170c:	61 f0       	breq	.+24     	; 0x1726 <DIO_u8GetPortValue+0x5e>
    170e:	27 c0       	rjmp	.+78     	; 0x175e <DIO_u8GetPortValue+0x96>
    1710:	2d 81       	ldd	r18, Y+5	; 0x05
    1712:	3e 81       	ldd	r19, Y+6	; 0x06
    1714:	22 30       	cpi	r18, 0x02	; 2
    1716:	31 05       	cpc	r19, r1
    1718:	a1 f0       	breq	.+40     	; 0x1742 <DIO_u8GetPortValue+0x7a>
    171a:	8d 81       	ldd	r24, Y+5	; 0x05
    171c:	9e 81       	ldd	r25, Y+6	; 0x06
    171e:	83 30       	cpi	r24, 0x03	; 3
    1720:	91 05       	cpc	r25, r1
    1722:	b1 f0       	breq	.+44     	; 0x1750 <DIO_u8GetPortValue+0x88>
    1724:	1c c0       	rjmp	.+56     	; 0x175e <DIO_u8GetPortValue+0x96>
			{
			case DIO_u8_PORTA:
				*Copy_pu8ReturnedPortValue = PINA_u8_REG;
    1726:	e9 e3       	ldi	r30, 0x39	; 57
    1728:	f0 e0       	ldi	r31, 0x00	; 0
    172a:	80 81       	ld	r24, Z
    172c:	eb 81       	ldd	r30, Y+3	; 0x03
    172e:	fc 81       	ldd	r31, Y+4	; 0x04
    1730:	80 83       	st	Z, r24
    1732:	18 c0       	rjmp	.+48     	; 0x1764 <DIO_u8GetPortValue+0x9c>
				break;
			case DIO_u8_PORTB:
				*Copy_pu8ReturnedPortValue = PINB_u8_REG;
    1734:	e6 e3       	ldi	r30, 0x36	; 54
    1736:	f0 e0       	ldi	r31, 0x00	; 0
    1738:	80 81       	ld	r24, Z
    173a:	eb 81       	ldd	r30, Y+3	; 0x03
    173c:	fc 81       	ldd	r31, Y+4	; 0x04
    173e:	80 83       	st	Z, r24
    1740:	11 c0       	rjmp	.+34     	; 0x1764 <DIO_u8GetPortValue+0x9c>
				break;
			case DIO_u8_PORTC:
				*Copy_pu8ReturnedPortValue = PINC_u8_REG;
    1742:	e3 e3       	ldi	r30, 0x33	; 51
    1744:	f0 e0       	ldi	r31, 0x00	; 0
    1746:	80 81       	ld	r24, Z
    1748:	eb 81       	ldd	r30, Y+3	; 0x03
    174a:	fc 81       	ldd	r31, Y+4	; 0x04
    174c:	80 83       	st	Z, r24
    174e:	0a c0       	rjmp	.+20     	; 0x1764 <DIO_u8GetPortValue+0x9c>
				break;
			case DIO_u8_PORTD:
				*Copy_pu8ReturnedPortValue = PIND_u8_REG;
    1750:	e0 e3       	ldi	r30, 0x30	; 48
    1752:	f0 e0       	ldi	r31, 0x00	; 0
    1754:	80 81       	ld	r24, Z
    1756:	eb 81       	ldd	r30, Y+3	; 0x03
    1758:	fc 81       	ldd	r31, Y+4	; 0x04
    175a:	80 83       	st	Z, r24
    175c:	03 c0       	rjmp	.+6      	; 0x1764 <DIO_u8GetPortValue+0x9c>
				break;

			default:
				Local_u8ErrorStatus = STD_TYPES_NOK;
    175e:	19 82       	std	Y+1, r1	; 0x01
    1760:	01 c0       	rjmp	.+2      	; 0x1764 <DIO_u8GetPortValue+0x9c>
				break;
			}
		}
		else
		{
			Local_u8ErrorStatus = STD_TYPES_NOK;
    1762:	19 82       	std	Y+1, r1	; 0x01
		}

		return Local_u8ErrorStatus ;
    1764:	89 81       	ldd	r24, Y+1	; 0x01
	}
    1766:	26 96       	adiw	r28, 0x06	; 6
    1768:	0f b6       	in	r0, 0x3f	; 63
    176a:	f8 94       	cli
    176c:	de bf       	out	0x3e, r29	; 62
    176e:	0f be       	out	0x3f, r0	; 63
    1770:	cd bf       	out	0x3d, r28	; 61
    1772:	cf 91       	pop	r28
    1774:	df 91       	pop	r29
    1776:	08 95       	ret

00001778 <LCD_voidInit>:
#include "LCD_interface.h"
#include "LCD_config.h"
#include "LCD_private.h"

void LCD_voidInit(void)
{
    1778:	0f 93       	push	r16
    177a:	1f 93       	push	r17
    177c:	df 93       	push	r29
    177e:	cf 93       	push	r28
    1780:	cd b7       	in	r28, 0x3d	; 61
    1782:	de b7       	in	r29, 0x3e	; 62
    1784:	cc 54       	subi	r28, 0x4C	; 76
    1786:	d0 40       	sbci	r29, 0x00	; 0
    1788:	0f b6       	in	r0, 0x3f	; 63
    178a:	f8 94       	cli
    178c:	de bf       	out	0x3e, r29	; 62
    178e:	0f be       	out	0x3f, r0	; 63
    1790:	cd bf       	out	0x3d, r28	; 61
    1792:	fe 01       	movw	r30, r28
    1794:	e7 5b       	subi	r30, 0xB7	; 183
    1796:	ff 4f       	sbci	r31, 0xFF	; 255
    1798:	80 e0       	ldi	r24, 0x00	; 0
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	ac e0       	ldi	r26, 0x0C	; 12
    179e:	b2 e4       	ldi	r27, 0x42	; 66
    17a0:	80 83       	st	Z, r24
    17a2:	91 83       	std	Z+1, r25	; 0x01
    17a4:	a2 83       	std	Z+2, r26	; 0x02
    17a6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17a8:	8e 01       	movw	r16, r28
    17aa:	0b 5b       	subi	r16, 0xBB	; 187
    17ac:	1f 4f       	sbci	r17, 0xFF	; 255
    17ae:	fe 01       	movw	r30, r28
    17b0:	e7 5b       	subi	r30, 0xB7	; 183
    17b2:	ff 4f       	sbci	r31, 0xFF	; 255
    17b4:	60 81       	ld	r22, Z
    17b6:	71 81       	ldd	r23, Z+1	; 0x01
    17b8:	82 81       	ldd	r24, Z+2	; 0x02
    17ba:	93 81       	ldd	r25, Z+3	; 0x03
    17bc:	20 e0       	ldi	r18, 0x00	; 0
    17be:	30 e0       	ldi	r19, 0x00	; 0
    17c0:	4a ef       	ldi	r20, 0xFA	; 250
    17c2:	54 e4       	ldi	r21, 0x44	; 68
    17c4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17c8:	dc 01       	movw	r26, r24
    17ca:	cb 01       	movw	r24, r22
    17cc:	f8 01       	movw	r30, r16
    17ce:	80 83       	st	Z, r24
    17d0:	91 83       	std	Z+1, r25	; 0x01
    17d2:	a2 83       	std	Z+2, r26	; 0x02
    17d4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    17d6:	fe 01       	movw	r30, r28
    17d8:	eb 5b       	subi	r30, 0xBB	; 187
    17da:	ff 4f       	sbci	r31, 0xFF	; 255
    17dc:	60 81       	ld	r22, Z
    17de:	71 81       	ldd	r23, Z+1	; 0x01
    17e0:	82 81       	ldd	r24, Z+2	; 0x02
    17e2:	93 81       	ldd	r25, Z+3	; 0x03
    17e4:	20 e0       	ldi	r18, 0x00	; 0
    17e6:	30 e0       	ldi	r19, 0x00	; 0
    17e8:	40 e8       	ldi	r20, 0x80	; 128
    17ea:	5f e3       	ldi	r21, 0x3F	; 63
    17ec:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    17f0:	88 23       	and	r24, r24
    17f2:	44 f4       	brge	.+16     	; 0x1804 <LCD_voidInit+0x8c>
		__ticks = 1;
    17f4:	fe 01       	movw	r30, r28
    17f6:	ed 5b       	subi	r30, 0xBD	; 189
    17f8:	ff 4f       	sbci	r31, 0xFF	; 255
    17fa:	81 e0       	ldi	r24, 0x01	; 1
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	91 83       	std	Z+1, r25	; 0x01
    1800:	80 83       	st	Z, r24
    1802:	64 c0       	rjmp	.+200    	; 0x18cc <LCD_voidInit+0x154>
	else if (__tmp > 65535)
    1804:	fe 01       	movw	r30, r28
    1806:	eb 5b       	subi	r30, 0xBB	; 187
    1808:	ff 4f       	sbci	r31, 0xFF	; 255
    180a:	60 81       	ld	r22, Z
    180c:	71 81       	ldd	r23, Z+1	; 0x01
    180e:	82 81       	ldd	r24, Z+2	; 0x02
    1810:	93 81       	ldd	r25, Z+3	; 0x03
    1812:	20 e0       	ldi	r18, 0x00	; 0
    1814:	3f ef       	ldi	r19, 0xFF	; 255
    1816:	4f e7       	ldi	r20, 0x7F	; 127
    1818:	57 e4       	ldi	r21, 0x47	; 71
    181a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    181e:	18 16       	cp	r1, r24
    1820:	0c f0       	brlt	.+2      	; 0x1824 <LCD_voidInit+0xac>
    1822:	43 c0       	rjmp	.+134    	; 0x18aa <LCD_voidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1824:	fe 01       	movw	r30, r28
    1826:	e7 5b       	subi	r30, 0xB7	; 183
    1828:	ff 4f       	sbci	r31, 0xFF	; 255
    182a:	60 81       	ld	r22, Z
    182c:	71 81       	ldd	r23, Z+1	; 0x01
    182e:	82 81       	ldd	r24, Z+2	; 0x02
    1830:	93 81       	ldd	r25, Z+3	; 0x03
    1832:	20 e0       	ldi	r18, 0x00	; 0
    1834:	30 e0       	ldi	r19, 0x00	; 0
    1836:	40 e2       	ldi	r20, 0x20	; 32
    1838:	51 e4       	ldi	r21, 0x41	; 65
    183a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    183e:	dc 01       	movw	r26, r24
    1840:	cb 01       	movw	r24, r22
    1842:	8e 01       	movw	r16, r28
    1844:	0d 5b       	subi	r16, 0xBD	; 189
    1846:	1f 4f       	sbci	r17, 0xFF	; 255
    1848:	bc 01       	movw	r22, r24
    184a:	cd 01       	movw	r24, r26
    184c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1850:	dc 01       	movw	r26, r24
    1852:	cb 01       	movw	r24, r22
    1854:	f8 01       	movw	r30, r16
    1856:	91 83       	std	Z+1, r25	; 0x01
    1858:	80 83       	st	Z, r24
    185a:	1f c0       	rjmp	.+62     	; 0x189a <LCD_voidInit+0x122>
    185c:	fe 01       	movw	r30, r28
    185e:	ef 5b       	subi	r30, 0xBF	; 191
    1860:	ff 4f       	sbci	r31, 0xFF	; 255
    1862:	88 ec       	ldi	r24, 0xC8	; 200
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	91 83       	std	Z+1, r25	; 0x01
    1868:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    186a:	fe 01       	movw	r30, r28
    186c:	ef 5b       	subi	r30, 0xBF	; 191
    186e:	ff 4f       	sbci	r31, 0xFF	; 255
    1870:	80 81       	ld	r24, Z
    1872:	91 81       	ldd	r25, Z+1	; 0x01
    1874:	01 97       	sbiw	r24, 0x01	; 1
    1876:	f1 f7       	brne	.-4      	; 0x1874 <LCD_voidInit+0xfc>
    1878:	fe 01       	movw	r30, r28
    187a:	ef 5b       	subi	r30, 0xBF	; 191
    187c:	ff 4f       	sbci	r31, 0xFF	; 255
    187e:	91 83       	std	Z+1, r25	; 0x01
    1880:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1882:	de 01       	movw	r26, r28
    1884:	ad 5b       	subi	r26, 0xBD	; 189
    1886:	bf 4f       	sbci	r27, 0xFF	; 255
    1888:	fe 01       	movw	r30, r28
    188a:	ed 5b       	subi	r30, 0xBD	; 189
    188c:	ff 4f       	sbci	r31, 0xFF	; 255
    188e:	80 81       	ld	r24, Z
    1890:	91 81       	ldd	r25, Z+1	; 0x01
    1892:	01 97       	sbiw	r24, 0x01	; 1
    1894:	11 96       	adiw	r26, 0x01	; 1
    1896:	9c 93       	st	X, r25
    1898:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    189a:	fe 01       	movw	r30, r28
    189c:	ed 5b       	subi	r30, 0xBD	; 189
    189e:	ff 4f       	sbci	r31, 0xFF	; 255
    18a0:	80 81       	ld	r24, Z
    18a2:	91 81       	ldd	r25, Z+1	; 0x01
    18a4:	00 97       	sbiw	r24, 0x00	; 0
    18a6:	d1 f6       	brne	.-76     	; 0x185c <LCD_voidInit+0xe4>
    18a8:	24 c0       	rjmp	.+72     	; 0x18f2 <LCD_voidInit+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18aa:	8e 01       	movw	r16, r28
    18ac:	0d 5b       	subi	r16, 0xBD	; 189
    18ae:	1f 4f       	sbci	r17, 0xFF	; 255
    18b0:	fe 01       	movw	r30, r28
    18b2:	eb 5b       	subi	r30, 0xBB	; 187
    18b4:	ff 4f       	sbci	r31, 0xFF	; 255
    18b6:	60 81       	ld	r22, Z
    18b8:	71 81       	ldd	r23, Z+1	; 0x01
    18ba:	82 81       	ldd	r24, Z+2	; 0x02
    18bc:	93 81       	ldd	r25, Z+3	; 0x03
    18be:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18c2:	dc 01       	movw	r26, r24
    18c4:	cb 01       	movw	r24, r22
    18c6:	f8 01       	movw	r30, r16
    18c8:	91 83       	std	Z+1, r25	; 0x01
    18ca:	80 83       	st	Z, r24
    18cc:	fe 01       	movw	r30, r28
    18ce:	ed 5b       	subi	r30, 0xBD	; 189
    18d0:	ff 4f       	sbci	r31, 0xFF	; 255
    18d2:	80 81       	ld	r24, Z
    18d4:	91 81       	ldd	r25, Z+1	; 0x01
    18d6:	fe 01       	movw	r30, r28
    18d8:	ff 96       	adiw	r30, 0x3f	; 63
    18da:	91 83       	std	Z+1, r25	; 0x01
    18dc:	80 83       	st	Z, r24
    18de:	fe 01       	movw	r30, r28
    18e0:	ff 96       	adiw	r30, 0x3f	; 63
    18e2:	80 81       	ld	r24, Z
    18e4:	91 81       	ldd	r25, Z+1	; 0x01
    18e6:	01 97       	sbiw	r24, 0x01	; 1
    18e8:	f1 f7       	brne	.-4      	; 0x18e6 <LCD_voidInit+0x16e>
    18ea:	fe 01       	movw	r30, r28
    18ec:	ff 96       	adiw	r30, 0x3f	; 63
    18ee:	91 83       	std	Z+1, r25	; 0x01
    18f0:	80 83       	st	Z, r24
	_delay_ms(35);
	LCD_voidSendCmd(0b00111000);//functionset
    18f2:	88 e3       	ldi	r24, 0x38	; 56
    18f4:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <LCD_voidSendCmd>
    18f8:	80 e0       	ldi	r24, 0x00	; 0
    18fa:	90 e0       	ldi	r25, 0x00	; 0
    18fc:	a0 e2       	ldi	r26, 0x20	; 32
    18fe:	b2 e4       	ldi	r27, 0x42	; 66
    1900:	8b af       	std	Y+59, r24	; 0x3b
    1902:	9c af       	std	Y+60, r25	; 0x3c
    1904:	ad af       	std	Y+61, r26	; 0x3d
    1906:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1908:	6b ad       	ldd	r22, Y+59	; 0x3b
    190a:	7c ad       	ldd	r23, Y+60	; 0x3c
    190c:	8d ad       	ldd	r24, Y+61	; 0x3d
    190e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1910:	2b ea       	ldi	r18, 0xAB	; 171
    1912:	3a ea       	ldi	r19, 0xAA	; 170
    1914:	4a e2       	ldi	r20, 0x2A	; 42
    1916:	50 e4       	ldi	r21, 0x40	; 64
    1918:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    191c:	dc 01       	movw	r26, r24
    191e:	cb 01       	movw	r24, r22
    1920:	8f ab       	std	Y+55, r24	; 0x37
    1922:	98 af       	std	Y+56, r25	; 0x38
    1924:	a9 af       	std	Y+57, r26	; 0x39
    1926:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1928:	6f a9       	ldd	r22, Y+55	; 0x37
    192a:	78 ad       	ldd	r23, Y+56	; 0x38
    192c:	89 ad       	ldd	r24, Y+57	; 0x39
    192e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1930:	20 e0       	ldi	r18, 0x00	; 0
    1932:	30 e0       	ldi	r19, 0x00	; 0
    1934:	40 e8       	ldi	r20, 0x80	; 128
    1936:	5f e3       	ldi	r21, 0x3F	; 63
    1938:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    193c:	88 23       	and	r24, r24
    193e:	1c f4       	brge	.+6      	; 0x1946 <LCD_voidInit+0x1ce>
		__ticks = 1;
    1940:	81 e0       	ldi	r24, 0x01	; 1
    1942:	8e ab       	std	Y+54, r24	; 0x36
    1944:	91 c0       	rjmp	.+290    	; 0x1a68 <LCD_voidInit+0x2f0>
	else if (__tmp > 255)
    1946:	6f a9       	ldd	r22, Y+55	; 0x37
    1948:	78 ad       	ldd	r23, Y+56	; 0x38
    194a:	89 ad       	ldd	r24, Y+57	; 0x39
    194c:	9a ad       	ldd	r25, Y+58	; 0x3a
    194e:	20 e0       	ldi	r18, 0x00	; 0
    1950:	30 e0       	ldi	r19, 0x00	; 0
    1952:	4f e7       	ldi	r20, 0x7F	; 127
    1954:	53 e4       	ldi	r21, 0x43	; 67
    1956:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    195a:	18 16       	cp	r1, r24
    195c:	0c f0       	brlt	.+2      	; 0x1960 <LCD_voidInit+0x1e8>
    195e:	7b c0       	rjmp	.+246    	; 0x1a56 <LCD_voidInit+0x2de>
	{
		_delay_ms(__us / 1000.0);
    1960:	6b ad       	ldd	r22, Y+59	; 0x3b
    1962:	7c ad       	ldd	r23, Y+60	; 0x3c
    1964:	8d ad       	ldd	r24, Y+61	; 0x3d
    1966:	9e ad       	ldd	r25, Y+62	; 0x3e
    1968:	20 e0       	ldi	r18, 0x00	; 0
    196a:	30 e0       	ldi	r19, 0x00	; 0
    196c:	4a e7       	ldi	r20, 0x7A	; 122
    196e:	54 e4       	ldi	r21, 0x44	; 68
    1970:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1974:	dc 01       	movw	r26, r24
    1976:	cb 01       	movw	r24, r22
    1978:	8a ab       	std	Y+50, r24	; 0x32
    197a:	9b ab       	std	Y+51, r25	; 0x33
    197c:	ac ab       	std	Y+52, r26	; 0x34
    197e:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1980:	6a a9       	ldd	r22, Y+50	; 0x32
    1982:	7b a9       	ldd	r23, Y+51	; 0x33
    1984:	8c a9       	ldd	r24, Y+52	; 0x34
    1986:	9d a9       	ldd	r25, Y+53	; 0x35
    1988:	20 e0       	ldi	r18, 0x00	; 0
    198a:	30 e0       	ldi	r19, 0x00	; 0
    198c:	4a ef       	ldi	r20, 0xFA	; 250
    198e:	54 e4       	ldi	r21, 0x44	; 68
    1990:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1994:	dc 01       	movw	r26, r24
    1996:	cb 01       	movw	r24, r22
    1998:	8e a7       	std	Y+46, r24	; 0x2e
    199a:	9f a7       	std	Y+47, r25	; 0x2f
    199c:	a8 ab       	std	Y+48, r26	; 0x30
    199e:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    19a0:	6e a5       	ldd	r22, Y+46	; 0x2e
    19a2:	7f a5       	ldd	r23, Y+47	; 0x2f
    19a4:	88 a9       	ldd	r24, Y+48	; 0x30
    19a6:	99 a9       	ldd	r25, Y+49	; 0x31
    19a8:	20 e0       	ldi	r18, 0x00	; 0
    19aa:	30 e0       	ldi	r19, 0x00	; 0
    19ac:	40 e8       	ldi	r20, 0x80	; 128
    19ae:	5f e3       	ldi	r21, 0x3F	; 63
    19b0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    19b4:	88 23       	and	r24, r24
    19b6:	2c f4       	brge	.+10     	; 0x19c2 <LCD_voidInit+0x24a>
		__ticks = 1;
    19b8:	81 e0       	ldi	r24, 0x01	; 1
    19ba:	90 e0       	ldi	r25, 0x00	; 0
    19bc:	9d a7       	std	Y+45, r25	; 0x2d
    19be:	8c a7       	std	Y+44, r24	; 0x2c
    19c0:	3f c0       	rjmp	.+126    	; 0x1a40 <LCD_voidInit+0x2c8>
	else if (__tmp > 65535)
    19c2:	6e a5       	ldd	r22, Y+46	; 0x2e
    19c4:	7f a5       	ldd	r23, Y+47	; 0x2f
    19c6:	88 a9       	ldd	r24, Y+48	; 0x30
    19c8:	99 a9       	ldd	r25, Y+49	; 0x31
    19ca:	20 e0       	ldi	r18, 0x00	; 0
    19cc:	3f ef       	ldi	r19, 0xFF	; 255
    19ce:	4f e7       	ldi	r20, 0x7F	; 127
    19d0:	57 e4       	ldi	r21, 0x47	; 71
    19d2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    19d6:	18 16       	cp	r1, r24
    19d8:	4c f5       	brge	.+82     	; 0x1a2c <LCD_voidInit+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19da:	6a a9       	ldd	r22, Y+50	; 0x32
    19dc:	7b a9       	ldd	r23, Y+51	; 0x33
    19de:	8c a9       	ldd	r24, Y+52	; 0x34
    19e0:	9d a9       	ldd	r25, Y+53	; 0x35
    19e2:	20 e0       	ldi	r18, 0x00	; 0
    19e4:	30 e0       	ldi	r19, 0x00	; 0
    19e6:	40 e2       	ldi	r20, 0x20	; 32
    19e8:	51 e4       	ldi	r21, 0x41	; 65
    19ea:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19ee:	dc 01       	movw	r26, r24
    19f0:	cb 01       	movw	r24, r22
    19f2:	bc 01       	movw	r22, r24
    19f4:	cd 01       	movw	r24, r26
    19f6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19fa:	dc 01       	movw	r26, r24
    19fc:	cb 01       	movw	r24, r22
    19fe:	9d a7       	std	Y+45, r25	; 0x2d
    1a00:	8c a7       	std	Y+44, r24	; 0x2c
    1a02:	0f c0       	rjmp	.+30     	; 0x1a22 <LCD_voidInit+0x2aa>
    1a04:	88 ec       	ldi	r24, 0xC8	; 200
    1a06:	90 e0       	ldi	r25, 0x00	; 0
    1a08:	9b a7       	std	Y+43, r25	; 0x2b
    1a0a:	8a a7       	std	Y+42, r24	; 0x2a
    1a0c:	8a a5       	ldd	r24, Y+42	; 0x2a
    1a0e:	9b a5       	ldd	r25, Y+43	; 0x2b
    1a10:	01 97       	sbiw	r24, 0x01	; 1
    1a12:	f1 f7       	brne	.-4      	; 0x1a10 <LCD_voidInit+0x298>
    1a14:	9b a7       	std	Y+43, r25	; 0x2b
    1a16:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a18:	8c a5       	ldd	r24, Y+44	; 0x2c
    1a1a:	9d a5       	ldd	r25, Y+45	; 0x2d
    1a1c:	01 97       	sbiw	r24, 0x01	; 1
    1a1e:	9d a7       	std	Y+45, r25	; 0x2d
    1a20:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a22:	8c a5       	ldd	r24, Y+44	; 0x2c
    1a24:	9d a5       	ldd	r25, Y+45	; 0x2d
    1a26:	00 97       	sbiw	r24, 0x00	; 0
    1a28:	69 f7       	brne	.-38     	; 0x1a04 <LCD_voidInit+0x28c>
    1a2a:	24 c0       	rjmp	.+72     	; 0x1a74 <LCD_voidInit+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a2c:	6e a5       	ldd	r22, Y+46	; 0x2e
    1a2e:	7f a5       	ldd	r23, Y+47	; 0x2f
    1a30:	88 a9       	ldd	r24, Y+48	; 0x30
    1a32:	99 a9       	ldd	r25, Y+49	; 0x31
    1a34:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a38:	dc 01       	movw	r26, r24
    1a3a:	cb 01       	movw	r24, r22
    1a3c:	9d a7       	std	Y+45, r25	; 0x2d
    1a3e:	8c a7       	std	Y+44, r24	; 0x2c
    1a40:	8c a5       	ldd	r24, Y+44	; 0x2c
    1a42:	9d a5       	ldd	r25, Y+45	; 0x2d
    1a44:	99 a7       	std	Y+41, r25	; 0x29
    1a46:	88 a7       	std	Y+40, r24	; 0x28
    1a48:	88 a5       	ldd	r24, Y+40	; 0x28
    1a4a:	99 a5       	ldd	r25, Y+41	; 0x29
    1a4c:	01 97       	sbiw	r24, 0x01	; 1
    1a4e:	f1 f7       	brne	.-4      	; 0x1a4c <LCD_voidInit+0x2d4>
    1a50:	99 a7       	std	Y+41, r25	; 0x29
    1a52:	88 a7       	std	Y+40, r24	; 0x28
    1a54:	0f c0       	rjmp	.+30     	; 0x1a74 <LCD_voidInit+0x2fc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1a56:	6f a9       	ldd	r22, Y+55	; 0x37
    1a58:	78 ad       	ldd	r23, Y+56	; 0x38
    1a5a:	89 ad       	ldd	r24, Y+57	; 0x39
    1a5c:	9a ad       	ldd	r25, Y+58	; 0x3a
    1a5e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a62:	dc 01       	movw	r26, r24
    1a64:	cb 01       	movw	r24, r22
    1a66:	8e ab       	std	Y+54, r24	; 0x36
    1a68:	8e a9       	ldd	r24, Y+54	; 0x36
    1a6a:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1a6c:	8f a1       	ldd	r24, Y+39	; 0x27
    1a6e:	8a 95       	dec	r24
    1a70:	f1 f7       	brne	.-4      	; 0x1a6e <LCD_voidInit+0x2f6>
    1a72:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(40);
	LCD_voidSendCmd(0b00001100);//display
    1a74:	8c e0       	ldi	r24, 0x0C	; 12
    1a76:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <LCD_voidSendCmd>
    1a7a:	80 e0       	ldi	r24, 0x00	; 0
    1a7c:	90 e0       	ldi	r25, 0x00	; 0
    1a7e:	a0 e2       	ldi	r26, 0x20	; 32
    1a80:	b2 e4       	ldi	r27, 0x42	; 66
    1a82:	8b a3       	std	Y+35, r24	; 0x23
    1a84:	9c a3       	std	Y+36, r25	; 0x24
    1a86:	ad a3       	std	Y+37, r26	; 0x25
    1a88:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1a8a:	6b a1       	ldd	r22, Y+35	; 0x23
    1a8c:	7c a1       	ldd	r23, Y+36	; 0x24
    1a8e:	8d a1       	ldd	r24, Y+37	; 0x25
    1a90:	9e a1       	ldd	r25, Y+38	; 0x26
    1a92:	2b ea       	ldi	r18, 0xAB	; 171
    1a94:	3a ea       	ldi	r19, 0xAA	; 170
    1a96:	4a e2       	ldi	r20, 0x2A	; 42
    1a98:	50 e4       	ldi	r21, 0x40	; 64
    1a9a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a9e:	dc 01       	movw	r26, r24
    1aa0:	cb 01       	movw	r24, r22
    1aa2:	8f 8f       	std	Y+31, r24	; 0x1f
    1aa4:	98 a3       	std	Y+32, r25	; 0x20
    1aa6:	a9 a3       	std	Y+33, r26	; 0x21
    1aa8:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1aaa:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1aac:	78 a1       	ldd	r23, Y+32	; 0x20
    1aae:	89 a1       	ldd	r24, Y+33	; 0x21
    1ab0:	9a a1       	ldd	r25, Y+34	; 0x22
    1ab2:	20 e0       	ldi	r18, 0x00	; 0
    1ab4:	30 e0       	ldi	r19, 0x00	; 0
    1ab6:	40 e8       	ldi	r20, 0x80	; 128
    1ab8:	5f e3       	ldi	r21, 0x3F	; 63
    1aba:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1abe:	88 23       	and	r24, r24
    1ac0:	1c f4       	brge	.+6      	; 0x1ac8 <LCD_voidInit+0x350>
		__ticks = 1;
    1ac2:	81 e0       	ldi	r24, 0x01	; 1
    1ac4:	8e 8f       	std	Y+30, r24	; 0x1e
    1ac6:	91 c0       	rjmp	.+290    	; 0x1bea <LCD_voidInit+0x472>
	else if (__tmp > 255)
    1ac8:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1aca:	78 a1       	ldd	r23, Y+32	; 0x20
    1acc:	89 a1       	ldd	r24, Y+33	; 0x21
    1ace:	9a a1       	ldd	r25, Y+34	; 0x22
    1ad0:	20 e0       	ldi	r18, 0x00	; 0
    1ad2:	30 e0       	ldi	r19, 0x00	; 0
    1ad4:	4f e7       	ldi	r20, 0x7F	; 127
    1ad6:	53 e4       	ldi	r21, 0x43	; 67
    1ad8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1adc:	18 16       	cp	r1, r24
    1ade:	0c f0       	brlt	.+2      	; 0x1ae2 <LCD_voidInit+0x36a>
    1ae0:	7b c0       	rjmp	.+246    	; 0x1bd8 <LCD_voidInit+0x460>
	{
		_delay_ms(__us / 1000.0);
    1ae2:	6b a1       	ldd	r22, Y+35	; 0x23
    1ae4:	7c a1       	ldd	r23, Y+36	; 0x24
    1ae6:	8d a1       	ldd	r24, Y+37	; 0x25
    1ae8:	9e a1       	ldd	r25, Y+38	; 0x26
    1aea:	20 e0       	ldi	r18, 0x00	; 0
    1aec:	30 e0       	ldi	r19, 0x00	; 0
    1aee:	4a e7       	ldi	r20, 0x7A	; 122
    1af0:	54 e4       	ldi	r21, 0x44	; 68
    1af2:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1af6:	dc 01       	movw	r26, r24
    1af8:	cb 01       	movw	r24, r22
    1afa:	8a 8f       	std	Y+26, r24	; 0x1a
    1afc:	9b 8f       	std	Y+27, r25	; 0x1b
    1afe:	ac 8f       	std	Y+28, r26	; 0x1c
    1b00:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b02:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1b04:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1b06:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1b08:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1b0a:	20 e0       	ldi	r18, 0x00	; 0
    1b0c:	30 e0       	ldi	r19, 0x00	; 0
    1b0e:	4a ef       	ldi	r20, 0xFA	; 250
    1b10:	54 e4       	ldi	r21, 0x44	; 68
    1b12:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b16:	dc 01       	movw	r26, r24
    1b18:	cb 01       	movw	r24, r22
    1b1a:	8e 8b       	std	Y+22, r24	; 0x16
    1b1c:	9f 8b       	std	Y+23, r25	; 0x17
    1b1e:	a8 8f       	std	Y+24, r26	; 0x18
    1b20:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1b22:	6e 89       	ldd	r22, Y+22	; 0x16
    1b24:	7f 89       	ldd	r23, Y+23	; 0x17
    1b26:	88 8d       	ldd	r24, Y+24	; 0x18
    1b28:	99 8d       	ldd	r25, Y+25	; 0x19
    1b2a:	20 e0       	ldi	r18, 0x00	; 0
    1b2c:	30 e0       	ldi	r19, 0x00	; 0
    1b2e:	40 e8       	ldi	r20, 0x80	; 128
    1b30:	5f e3       	ldi	r21, 0x3F	; 63
    1b32:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1b36:	88 23       	and	r24, r24
    1b38:	2c f4       	brge	.+10     	; 0x1b44 <LCD_voidInit+0x3cc>
		__ticks = 1;
    1b3a:	81 e0       	ldi	r24, 0x01	; 1
    1b3c:	90 e0       	ldi	r25, 0x00	; 0
    1b3e:	9d 8b       	std	Y+21, r25	; 0x15
    1b40:	8c 8b       	std	Y+20, r24	; 0x14
    1b42:	3f c0       	rjmp	.+126    	; 0x1bc2 <LCD_voidInit+0x44a>
	else if (__tmp > 65535)
    1b44:	6e 89       	ldd	r22, Y+22	; 0x16
    1b46:	7f 89       	ldd	r23, Y+23	; 0x17
    1b48:	88 8d       	ldd	r24, Y+24	; 0x18
    1b4a:	99 8d       	ldd	r25, Y+25	; 0x19
    1b4c:	20 e0       	ldi	r18, 0x00	; 0
    1b4e:	3f ef       	ldi	r19, 0xFF	; 255
    1b50:	4f e7       	ldi	r20, 0x7F	; 127
    1b52:	57 e4       	ldi	r21, 0x47	; 71
    1b54:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1b58:	18 16       	cp	r1, r24
    1b5a:	4c f5       	brge	.+82     	; 0x1bae <LCD_voidInit+0x436>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b5c:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1b5e:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1b60:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1b62:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1b64:	20 e0       	ldi	r18, 0x00	; 0
    1b66:	30 e0       	ldi	r19, 0x00	; 0
    1b68:	40 e2       	ldi	r20, 0x20	; 32
    1b6a:	51 e4       	ldi	r21, 0x41	; 65
    1b6c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b70:	dc 01       	movw	r26, r24
    1b72:	cb 01       	movw	r24, r22
    1b74:	bc 01       	movw	r22, r24
    1b76:	cd 01       	movw	r24, r26
    1b78:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b7c:	dc 01       	movw	r26, r24
    1b7e:	cb 01       	movw	r24, r22
    1b80:	9d 8b       	std	Y+21, r25	; 0x15
    1b82:	8c 8b       	std	Y+20, r24	; 0x14
    1b84:	0f c0       	rjmp	.+30     	; 0x1ba4 <LCD_voidInit+0x42c>
    1b86:	88 ec       	ldi	r24, 0xC8	; 200
    1b88:	90 e0       	ldi	r25, 0x00	; 0
    1b8a:	9b 8b       	std	Y+19, r25	; 0x13
    1b8c:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1b8e:	8a 89       	ldd	r24, Y+18	; 0x12
    1b90:	9b 89       	ldd	r25, Y+19	; 0x13
    1b92:	01 97       	sbiw	r24, 0x01	; 1
    1b94:	f1 f7       	brne	.-4      	; 0x1b92 <LCD_voidInit+0x41a>
    1b96:	9b 8b       	std	Y+19, r25	; 0x13
    1b98:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b9a:	8c 89       	ldd	r24, Y+20	; 0x14
    1b9c:	9d 89       	ldd	r25, Y+21	; 0x15
    1b9e:	01 97       	sbiw	r24, 0x01	; 1
    1ba0:	9d 8b       	std	Y+21, r25	; 0x15
    1ba2:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ba4:	8c 89       	ldd	r24, Y+20	; 0x14
    1ba6:	9d 89       	ldd	r25, Y+21	; 0x15
    1ba8:	00 97       	sbiw	r24, 0x00	; 0
    1baa:	69 f7       	brne	.-38     	; 0x1b86 <LCD_voidInit+0x40e>
    1bac:	24 c0       	rjmp	.+72     	; 0x1bf6 <LCD_voidInit+0x47e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bae:	6e 89       	ldd	r22, Y+22	; 0x16
    1bb0:	7f 89       	ldd	r23, Y+23	; 0x17
    1bb2:	88 8d       	ldd	r24, Y+24	; 0x18
    1bb4:	99 8d       	ldd	r25, Y+25	; 0x19
    1bb6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bba:	dc 01       	movw	r26, r24
    1bbc:	cb 01       	movw	r24, r22
    1bbe:	9d 8b       	std	Y+21, r25	; 0x15
    1bc0:	8c 8b       	std	Y+20, r24	; 0x14
    1bc2:	8c 89       	ldd	r24, Y+20	; 0x14
    1bc4:	9d 89       	ldd	r25, Y+21	; 0x15
    1bc6:	99 8b       	std	Y+17, r25	; 0x11
    1bc8:	88 8b       	std	Y+16, r24	; 0x10
    1bca:	88 89       	ldd	r24, Y+16	; 0x10
    1bcc:	99 89       	ldd	r25, Y+17	; 0x11
    1bce:	01 97       	sbiw	r24, 0x01	; 1
    1bd0:	f1 f7       	brne	.-4      	; 0x1bce <LCD_voidInit+0x456>
    1bd2:	99 8b       	std	Y+17, r25	; 0x11
    1bd4:	88 8b       	std	Y+16, r24	; 0x10
    1bd6:	0f c0       	rjmp	.+30     	; 0x1bf6 <LCD_voidInit+0x47e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1bd8:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1bda:	78 a1       	ldd	r23, Y+32	; 0x20
    1bdc:	89 a1       	ldd	r24, Y+33	; 0x21
    1bde:	9a a1       	ldd	r25, Y+34	; 0x22
    1be0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1be4:	dc 01       	movw	r26, r24
    1be6:	cb 01       	movw	r24, r22
    1be8:	8e 8f       	std	Y+30, r24	; 0x1e
    1bea:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1bec:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1bee:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bf0:	8a 95       	dec	r24
    1bf2:	f1 f7       	brne	.-4      	; 0x1bf0 <LCD_voidInit+0x478>
    1bf4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(40);
	LCD_voidSendCmd(0b00000001);//clr
    1bf6:	81 e0       	ldi	r24, 0x01	; 1
    1bf8:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <LCD_voidSendCmd>
    1bfc:	80 e0       	ldi	r24, 0x00	; 0
    1bfe:	90 e0       	ldi	r25, 0x00	; 0
    1c00:	a0 e0       	ldi	r26, 0x00	; 0
    1c02:	b0 e4       	ldi	r27, 0x40	; 64
    1c04:	8b 87       	std	Y+11, r24	; 0x0b
    1c06:	9c 87       	std	Y+12, r25	; 0x0c
    1c08:	ad 87       	std	Y+13, r26	; 0x0d
    1c0a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c0c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c0e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c10:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c12:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c14:	20 e0       	ldi	r18, 0x00	; 0
    1c16:	30 e0       	ldi	r19, 0x00	; 0
    1c18:	4a ef       	ldi	r20, 0xFA	; 250
    1c1a:	54 e4       	ldi	r21, 0x44	; 68
    1c1c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c20:	dc 01       	movw	r26, r24
    1c22:	cb 01       	movw	r24, r22
    1c24:	8f 83       	std	Y+7, r24	; 0x07
    1c26:	98 87       	std	Y+8, r25	; 0x08
    1c28:	a9 87       	std	Y+9, r26	; 0x09
    1c2a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c2c:	6f 81       	ldd	r22, Y+7	; 0x07
    1c2e:	78 85       	ldd	r23, Y+8	; 0x08
    1c30:	89 85       	ldd	r24, Y+9	; 0x09
    1c32:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c34:	20 e0       	ldi	r18, 0x00	; 0
    1c36:	30 e0       	ldi	r19, 0x00	; 0
    1c38:	40 e8       	ldi	r20, 0x80	; 128
    1c3a:	5f e3       	ldi	r21, 0x3F	; 63
    1c3c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1c40:	88 23       	and	r24, r24
    1c42:	2c f4       	brge	.+10     	; 0x1c4e <LCD_voidInit+0x4d6>
		__ticks = 1;
    1c44:	81 e0       	ldi	r24, 0x01	; 1
    1c46:	90 e0       	ldi	r25, 0x00	; 0
    1c48:	9e 83       	std	Y+6, r25	; 0x06
    1c4a:	8d 83       	std	Y+5, r24	; 0x05
    1c4c:	3f c0       	rjmp	.+126    	; 0x1ccc <LCD_voidInit+0x554>
	else if (__tmp > 65535)
    1c4e:	6f 81       	ldd	r22, Y+7	; 0x07
    1c50:	78 85       	ldd	r23, Y+8	; 0x08
    1c52:	89 85       	ldd	r24, Y+9	; 0x09
    1c54:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c56:	20 e0       	ldi	r18, 0x00	; 0
    1c58:	3f ef       	ldi	r19, 0xFF	; 255
    1c5a:	4f e7       	ldi	r20, 0x7F	; 127
    1c5c:	57 e4       	ldi	r21, 0x47	; 71
    1c5e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1c62:	18 16       	cp	r1, r24
    1c64:	4c f5       	brge	.+82     	; 0x1cb8 <LCD_voidInit+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c66:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c68:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c6a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c6c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c6e:	20 e0       	ldi	r18, 0x00	; 0
    1c70:	30 e0       	ldi	r19, 0x00	; 0
    1c72:	40 e2       	ldi	r20, 0x20	; 32
    1c74:	51 e4       	ldi	r21, 0x41	; 65
    1c76:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c7a:	dc 01       	movw	r26, r24
    1c7c:	cb 01       	movw	r24, r22
    1c7e:	bc 01       	movw	r22, r24
    1c80:	cd 01       	movw	r24, r26
    1c82:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c86:	dc 01       	movw	r26, r24
    1c88:	cb 01       	movw	r24, r22
    1c8a:	9e 83       	std	Y+6, r25	; 0x06
    1c8c:	8d 83       	std	Y+5, r24	; 0x05
    1c8e:	0f c0       	rjmp	.+30     	; 0x1cae <LCD_voidInit+0x536>
    1c90:	88 ec       	ldi	r24, 0xC8	; 200
    1c92:	90 e0       	ldi	r25, 0x00	; 0
    1c94:	9c 83       	std	Y+4, r25	; 0x04
    1c96:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c98:	8b 81       	ldd	r24, Y+3	; 0x03
    1c9a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c9c:	01 97       	sbiw	r24, 0x01	; 1
    1c9e:	f1 f7       	brne	.-4      	; 0x1c9c <LCD_voidInit+0x524>
    1ca0:	9c 83       	std	Y+4, r25	; 0x04
    1ca2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ca4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ca6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ca8:	01 97       	sbiw	r24, 0x01	; 1
    1caa:	9e 83       	std	Y+6, r25	; 0x06
    1cac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cae:	8d 81       	ldd	r24, Y+5	; 0x05
    1cb0:	9e 81       	ldd	r25, Y+6	; 0x06
    1cb2:	00 97       	sbiw	r24, 0x00	; 0
    1cb4:	69 f7       	brne	.-38     	; 0x1c90 <LCD_voidInit+0x518>
    1cb6:	14 c0       	rjmp	.+40     	; 0x1ce0 <LCD_voidInit+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cb8:	6f 81       	ldd	r22, Y+7	; 0x07
    1cba:	78 85       	ldd	r23, Y+8	; 0x08
    1cbc:	89 85       	ldd	r24, Y+9	; 0x09
    1cbe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cc0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cc4:	dc 01       	movw	r26, r24
    1cc6:	cb 01       	movw	r24, r22
    1cc8:	9e 83       	std	Y+6, r25	; 0x06
    1cca:	8d 83       	std	Y+5, r24	; 0x05
    1ccc:	8d 81       	ldd	r24, Y+5	; 0x05
    1cce:	9e 81       	ldd	r25, Y+6	; 0x06
    1cd0:	9a 83       	std	Y+2, r25	; 0x02
    1cd2:	89 83       	std	Y+1, r24	; 0x01
    1cd4:	89 81       	ldd	r24, Y+1	; 0x01
    1cd6:	9a 81       	ldd	r25, Y+2	; 0x02
    1cd8:	01 97       	sbiw	r24, 0x01	; 1
    1cda:	f1 f7       	brne	.-4      	; 0x1cd8 <LCD_voidInit+0x560>
    1cdc:	9a 83       	std	Y+2, r25	; 0x02
    1cde:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_voidSendCmd(0b00001110);//entry mode set
    1ce0:	8e e0       	ldi	r24, 0x0E	; 14
    1ce2:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <LCD_voidSendCmd>

}
    1ce6:	c4 5b       	subi	r28, 0xB4	; 180
    1ce8:	df 4f       	sbci	r29, 0xFF	; 255
    1cea:	0f b6       	in	r0, 0x3f	; 63
    1cec:	f8 94       	cli
    1cee:	de bf       	out	0x3e, r29	; 62
    1cf0:	0f be       	out	0x3f, r0	; 63
    1cf2:	cd bf       	out	0x3d, r28	; 61
    1cf4:	cf 91       	pop	r28
    1cf6:	df 91       	pop	r29
    1cf8:	1f 91       	pop	r17
    1cfa:	0f 91       	pop	r16
    1cfc:	08 95       	ret

00001cfe <LCD_voidSendCmd>:
void LCD_voidSendCmd(u8 Copy_u8Cmd)
{
    1cfe:	df 93       	push	r29
    1d00:	cf 93       	push	r28
    1d02:	cd b7       	in	r28, 0x3d	; 61
    1d04:	de b7       	in	r29, 0x3e	; 62
    1d06:	e1 97       	sbiw	r28, 0x31	; 49
    1d08:	0f b6       	in	r0, 0x3f	; 63
    1d0a:	f8 94       	cli
    1d0c:	de bf       	out	0x3e, r29	; 62
    1d0e:	0f be       	out	0x3f, r0	; 63
    1d10:	cd bf       	out	0x3d, r28	; 61
    1d12:	89 ab       	std	Y+49, r24	; 0x31
	//rs=0
	DIO_u8SetPinValue(CONTROL_PORT,RS_PIN,DIO_u8_LOW);
    1d14:	80 e0       	ldi	r24, 0x00	; 0
    1d16:	60 e0       	ldi	r22, 0x00	; 0
    1d18:	40 e0       	ldi	r20, 0x00	; 0
    1d1a:	0e 94 93 08 	call	0x1126	; 0x1126 <DIO_u8SetPinValue>
	//rw=0
	DIO_u8SetPinValue(CONTROL_PORT,RW_PIN,DIO_u8_LOW);
    1d1e:	80 e0       	ldi	r24, 0x00	; 0
    1d20:	61 e0       	ldi	r22, 0x01	; 1
    1d22:	40 e0       	ldi	r20, 0x00	; 0
    1d24:	0e 94 93 08 	call	0x1126	; 0x1126 <DIO_u8SetPinValue>
	//send cmd byte to the data pins of LCD
	DIO_u8SetPortValue(DATA_PORT,Copy_u8Cmd);
    1d28:	81 e0       	ldi	r24, 0x01	; 1
    1d2a:	69 a9       	ldd	r22, Y+49	; 0x31
    1d2c:	0e 94 1c 0b 	call	0x1638	; 0x1638 <DIO_u8SetPortValue>
	//enable pulse e=1,e=0
	DIO_u8SetPinValue(CONTROL_PORT,E_PIN,DIO_u8_HIGH);
    1d30:	80 e0       	ldi	r24, 0x00	; 0
    1d32:	62 e0       	ldi	r22, 0x02	; 2
    1d34:	41 e0       	ldi	r20, 0x01	; 1
    1d36:	0e 94 93 08 	call	0x1126	; 0x1126 <DIO_u8SetPinValue>
    1d3a:	80 e0       	ldi	r24, 0x00	; 0
    1d3c:	90 e0       	ldi	r25, 0x00	; 0
    1d3e:	a0 e8       	ldi	r26, 0x80	; 128
    1d40:	bf e3       	ldi	r27, 0x3F	; 63
    1d42:	8d a7       	std	Y+45, r24	; 0x2d
    1d44:	9e a7       	std	Y+46, r25	; 0x2e
    1d46:	af a7       	std	Y+47, r26	; 0x2f
    1d48:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1d4a:	6d a5       	ldd	r22, Y+45	; 0x2d
    1d4c:	7e a5       	ldd	r23, Y+46	; 0x2e
    1d4e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d50:	98 a9       	ldd	r25, Y+48	; 0x30
    1d52:	2b ea       	ldi	r18, 0xAB	; 171
    1d54:	3a ea       	ldi	r19, 0xAA	; 170
    1d56:	4a e2       	ldi	r20, 0x2A	; 42
    1d58:	50 e4       	ldi	r21, 0x40	; 64
    1d5a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d5e:	dc 01       	movw	r26, r24
    1d60:	cb 01       	movw	r24, r22
    1d62:	89 a7       	std	Y+41, r24	; 0x29
    1d64:	9a a7       	std	Y+42, r25	; 0x2a
    1d66:	ab a7       	std	Y+43, r26	; 0x2b
    1d68:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1d6a:	69 a5       	ldd	r22, Y+41	; 0x29
    1d6c:	7a a5       	ldd	r23, Y+42	; 0x2a
    1d6e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d70:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d72:	20 e0       	ldi	r18, 0x00	; 0
    1d74:	30 e0       	ldi	r19, 0x00	; 0
    1d76:	40 e8       	ldi	r20, 0x80	; 128
    1d78:	5f e3       	ldi	r21, 0x3F	; 63
    1d7a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1d7e:	88 23       	and	r24, r24
    1d80:	1c f4       	brge	.+6      	; 0x1d88 <LCD_voidSendCmd+0x8a>
		__ticks = 1;
    1d82:	81 e0       	ldi	r24, 0x01	; 1
    1d84:	88 a7       	std	Y+40, r24	; 0x28
    1d86:	91 c0       	rjmp	.+290    	; 0x1eaa <LCD_voidSendCmd+0x1ac>
	else if (__tmp > 255)
    1d88:	69 a5       	ldd	r22, Y+41	; 0x29
    1d8a:	7a a5       	ldd	r23, Y+42	; 0x2a
    1d8c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d8e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d90:	20 e0       	ldi	r18, 0x00	; 0
    1d92:	30 e0       	ldi	r19, 0x00	; 0
    1d94:	4f e7       	ldi	r20, 0x7F	; 127
    1d96:	53 e4       	ldi	r21, 0x43	; 67
    1d98:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1d9c:	18 16       	cp	r1, r24
    1d9e:	0c f0       	brlt	.+2      	; 0x1da2 <LCD_voidSendCmd+0xa4>
    1da0:	7b c0       	rjmp	.+246    	; 0x1e98 <LCD_voidSendCmd+0x19a>
	{
		_delay_ms(__us / 1000.0);
    1da2:	6d a5       	ldd	r22, Y+45	; 0x2d
    1da4:	7e a5       	ldd	r23, Y+46	; 0x2e
    1da6:	8f a5       	ldd	r24, Y+47	; 0x2f
    1da8:	98 a9       	ldd	r25, Y+48	; 0x30
    1daa:	20 e0       	ldi	r18, 0x00	; 0
    1dac:	30 e0       	ldi	r19, 0x00	; 0
    1dae:	4a e7       	ldi	r20, 0x7A	; 122
    1db0:	54 e4       	ldi	r21, 0x44	; 68
    1db2:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1db6:	dc 01       	movw	r26, r24
    1db8:	cb 01       	movw	r24, r22
    1dba:	8c a3       	std	Y+36, r24	; 0x24
    1dbc:	9d a3       	std	Y+37, r25	; 0x25
    1dbe:	ae a3       	std	Y+38, r26	; 0x26
    1dc0:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dc2:	6c a1       	ldd	r22, Y+36	; 0x24
    1dc4:	7d a1       	ldd	r23, Y+37	; 0x25
    1dc6:	8e a1       	ldd	r24, Y+38	; 0x26
    1dc8:	9f a1       	ldd	r25, Y+39	; 0x27
    1dca:	20 e0       	ldi	r18, 0x00	; 0
    1dcc:	30 e0       	ldi	r19, 0x00	; 0
    1dce:	4a ef       	ldi	r20, 0xFA	; 250
    1dd0:	54 e4       	ldi	r21, 0x44	; 68
    1dd2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dd6:	dc 01       	movw	r26, r24
    1dd8:	cb 01       	movw	r24, r22
    1dda:	88 a3       	std	Y+32, r24	; 0x20
    1ddc:	99 a3       	std	Y+33, r25	; 0x21
    1dde:	aa a3       	std	Y+34, r26	; 0x22
    1de0:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1de2:	68 a1       	ldd	r22, Y+32	; 0x20
    1de4:	79 a1       	ldd	r23, Y+33	; 0x21
    1de6:	8a a1       	ldd	r24, Y+34	; 0x22
    1de8:	9b a1       	ldd	r25, Y+35	; 0x23
    1dea:	20 e0       	ldi	r18, 0x00	; 0
    1dec:	30 e0       	ldi	r19, 0x00	; 0
    1dee:	40 e8       	ldi	r20, 0x80	; 128
    1df0:	5f e3       	ldi	r21, 0x3F	; 63
    1df2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1df6:	88 23       	and	r24, r24
    1df8:	2c f4       	brge	.+10     	; 0x1e04 <LCD_voidSendCmd+0x106>
		__ticks = 1;
    1dfa:	81 e0       	ldi	r24, 0x01	; 1
    1dfc:	90 e0       	ldi	r25, 0x00	; 0
    1dfe:	9f 8f       	std	Y+31, r25	; 0x1f
    1e00:	8e 8f       	std	Y+30, r24	; 0x1e
    1e02:	3f c0       	rjmp	.+126    	; 0x1e82 <LCD_voidSendCmd+0x184>
	else if (__tmp > 65535)
    1e04:	68 a1       	ldd	r22, Y+32	; 0x20
    1e06:	79 a1       	ldd	r23, Y+33	; 0x21
    1e08:	8a a1       	ldd	r24, Y+34	; 0x22
    1e0a:	9b a1       	ldd	r25, Y+35	; 0x23
    1e0c:	20 e0       	ldi	r18, 0x00	; 0
    1e0e:	3f ef       	ldi	r19, 0xFF	; 255
    1e10:	4f e7       	ldi	r20, 0x7F	; 127
    1e12:	57 e4       	ldi	r21, 0x47	; 71
    1e14:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1e18:	18 16       	cp	r1, r24
    1e1a:	4c f5       	brge	.+82     	; 0x1e6e <LCD_voidSendCmd+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e1c:	6c a1       	ldd	r22, Y+36	; 0x24
    1e1e:	7d a1       	ldd	r23, Y+37	; 0x25
    1e20:	8e a1       	ldd	r24, Y+38	; 0x26
    1e22:	9f a1       	ldd	r25, Y+39	; 0x27
    1e24:	20 e0       	ldi	r18, 0x00	; 0
    1e26:	30 e0       	ldi	r19, 0x00	; 0
    1e28:	40 e2       	ldi	r20, 0x20	; 32
    1e2a:	51 e4       	ldi	r21, 0x41	; 65
    1e2c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e30:	dc 01       	movw	r26, r24
    1e32:	cb 01       	movw	r24, r22
    1e34:	bc 01       	movw	r22, r24
    1e36:	cd 01       	movw	r24, r26
    1e38:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e3c:	dc 01       	movw	r26, r24
    1e3e:	cb 01       	movw	r24, r22
    1e40:	9f 8f       	std	Y+31, r25	; 0x1f
    1e42:	8e 8f       	std	Y+30, r24	; 0x1e
    1e44:	0f c0       	rjmp	.+30     	; 0x1e64 <LCD_voidSendCmd+0x166>
    1e46:	88 ec       	ldi	r24, 0xC8	; 200
    1e48:	90 e0       	ldi	r25, 0x00	; 0
    1e4a:	9d 8f       	std	Y+29, r25	; 0x1d
    1e4c:	8c 8f       	std	Y+28, r24	; 0x1c
    1e4e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1e50:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1e52:	01 97       	sbiw	r24, 0x01	; 1
    1e54:	f1 f7       	brne	.-4      	; 0x1e52 <LCD_voidSendCmd+0x154>
    1e56:	9d 8f       	std	Y+29, r25	; 0x1d
    1e58:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e5a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1e5c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1e5e:	01 97       	sbiw	r24, 0x01	; 1
    1e60:	9f 8f       	std	Y+31, r25	; 0x1f
    1e62:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e64:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1e66:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1e68:	00 97       	sbiw	r24, 0x00	; 0
    1e6a:	69 f7       	brne	.-38     	; 0x1e46 <LCD_voidSendCmd+0x148>
    1e6c:	24 c0       	rjmp	.+72     	; 0x1eb6 <LCD_voidSendCmd+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e6e:	68 a1       	ldd	r22, Y+32	; 0x20
    1e70:	79 a1       	ldd	r23, Y+33	; 0x21
    1e72:	8a a1       	ldd	r24, Y+34	; 0x22
    1e74:	9b a1       	ldd	r25, Y+35	; 0x23
    1e76:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e7a:	dc 01       	movw	r26, r24
    1e7c:	cb 01       	movw	r24, r22
    1e7e:	9f 8f       	std	Y+31, r25	; 0x1f
    1e80:	8e 8f       	std	Y+30, r24	; 0x1e
    1e82:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1e84:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1e86:	9b 8f       	std	Y+27, r25	; 0x1b
    1e88:	8a 8f       	std	Y+26, r24	; 0x1a
    1e8a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1e8c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1e8e:	01 97       	sbiw	r24, 0x01	; 1
    1e90:	f1 f7       	brne	.-4      	; 0x1e8e <LCD_voidSendCmd+0x190>
    1e92:	9b 8f       	std	Y+27, r25	; 0x1b
    1e94:	8a 8f       	std	Y+26, r24	; 0x1a
    1e96:	0f c0       	rjmp	.+30     	; 0x1eb6 <LCD_voidSendCmd+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1e98:	69 a5       	ldd	r22, Y+41	; 0x29
    1e9a:	7a a5       	ldd	r23, Y+42	; 0x2a
    1e9c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e9e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ea0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ea4:	dc 01       	movw	r26, r24
    1ea6:	cb 01       	movw	r24, r22
    1ea8:	88 a7       	std	Y+40, r24	; 0x28
    1eaa:	88 a5       	ldd	r24, Y+40	; 0x28
    1eac:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1eae:	89 8d       	ldd	r24, Y+25	; 0x19
    1eb0:	8a 95       	dec	r24
    1eb2:	f1 f7       	brne	.-4      	; 0x1eb0 <LCD_voidSendCmd+0x1b2>
    1eb4:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1);
	DIO_u8SetPinValue(CONTROL_PORT,E_PIN,DIO_u8_LOW);
    1eb6:	80 e0       	ldi	r24, 0x00	; 0
    1eb8:	62 e0       	ldi	r22, 0x02	; 2
    1eba:	40 e0       	ldi	r20, 0x00	; 0
    1ebc:	0e 94 93 08 	call	0x1126	; 0x1126 <DIO_u8SetPinValue>
    1ec0:	80 e0       	ldi	r24, 0x00	; 0
    1ec2:	90 e0       	ldi	r25, 0x00	; 0
    1ec4:	a0 e8       	ldi	r26, 0x80	; 128
    1ec6:	bf e3       	ldi	r27, 0x3F	; 63
    1ec8:	8d 8b       	std	Y+21, r24	; 0x15
    1eca:	9e 8b       	std	Y+22, r25	; 0x16
    1ecc:	af 8b       	std	Y+23, r26	; 0x17
    1ece:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1ed0:	6d 89       	ldd	r22, Y+21	; 0x15
    1ed2:	7e 89       	ldd	r23, Y+22	; 0x16
    1ed4:	8f 89       	ldd	r24, Y+23	; 0x17
    1ed6:	98 8d       	ldd	r25, Y+24	; 0x18
    1ed8:	2b ea       	ldi	r18, 0xAB	; 171
    1eda:	3a ea       	ldi	r19, 0xAA	; 170
    1edc:	4a e2       	ldi	r20, 0x2A	; 42
    1ede:	50 e4       	ldi	r21, 0x40	; 64
    1ee0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ee4:	dc 01       	movw	r26, r24
    1ee6:	cb 01       	movw	r24, r22
    1ee8:	89 8b       	std	Y+17, r24	; 0x11
    1eea:	9a 8b       	std	Y+18, r25	; 0x12
    1eec:	ab 8b       	std	Y+19, r26	; 0x13
    1eee:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1ef0:	69 89       	ldd	r22, Y+17	; 0x11
    1ef2:	7a 89       	ldd	r23, Y+18	; 0x12
    1ef4:	8b 89       	ldd	r24, Y+19	; 0x13
    1ef6:	9c 89       	ldd	r25, Y+20	; 0x14
    1ef8:	20 e0       	ldi	r18, 0x00	; 0
    1efa:	30 e0       	ldi	r19, 0x00	; 0
    1efc:	40 e8       	ldi	r20, 0x80	; 128
    1efe:	5f e3       	ldi	r21, 0x3F	; 63
    1f00:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1f04:	88 23       	and	r24, r24
    1f06:	1c f4       	brge	.+6      	; 0x1f0e <LCD_voidSendCmd+0x210>
		__ticks = 1;
    1f08:	81 e0       	ldi	r24, 0x01	; 1
    1f0a:	88 8b       	std	Y+16, r24	; 0x10
    1f0c:	91 c0       	rjmp	.+290    	; 0x2030 <LCD_voidSendCmd+0x332>
	else if (__tmp > 255)
    1f0e:	69 89       	ldd	r22, Y+17	; 0x11
    1f10:	7a 89       	ldd	r23, Y+18	; 0x12
    1f12:	8b 89       	ldd	r24, Y+19	; 0x13
    1f14:	9c 89       	ldd	r25, Y+20	; 0x14
    1f16:	20 e0       	ldi	r18, 0x00	; 0
    1f18:	30 e0       	ldi	r19, 0x00	; 0
    1f1a:	4f e7       	ldi	r20, 0x7F	; 127
    1f1c:	53 e4       	ldi	r21, 0x43	; 67
    1f1e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1f22:	18 16       	cp	r1, r24
    1f24:	0c f0       	brlt	.+2      	; 0x1f28 <LCD_voidSendCmd+0x22a>
    1f26:	7b c0       	rjmp	.+246    	; 0x201e <LCD_voidSendCmd+0x320>
	{
		_delay_ms(__us / 1000.0);
    1f28:	6d 89       	ldd	r22, Y+21	; 0x15
    1f2a:	7e 89       	ldd	r23, Y+22	; 0x16
    1f2c:	8f 89       	ldd	r24, Y+23	; 0x17
    1f2e:	98 8d       	ldd	r25, Y+24	; 0x18
    1f30:	20 e0       	ldi	r18, 0x00	; 0
    1f32:	30 e0       	ldi	r19, 0x00	; 0
    1f34:	4a e7       	ldi	r20, 0x7A	; 122
    1f36:	54 e4       	ldi	r21, 0x44	; 68
    1f38:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1f3c:	dc 01       	movw	r26, r24
    1f3e:	cb 01       	movw	r24, r22
    1f40:	8c 87       	std	Y+12, r24	; 0x0c
    1f42:	9d 87       	std	Y+13, r25	; 0x0d
    1f44:	ae 87       	std	Y+14, r26	; 0x0e
    1f46:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f48:	6c 85       	ldd	r22, Y+12	; 0x0c
    1f4a:	7d 85       	ldd	r23, Y+13	; 0x0d
    1f4c:	8e 85       	ldd	r24, Y+14	; 0x0e
    1f4e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1f50:	20 e0       	ldi	r18, 0x00	; 0
    1f52:	30 e0       	ldi	r19, 0x00	; 0
    1f54:	4a ef       	ldi	r20, 0xFA	; 250
    1f56:	54 e4       	ldi	r21, 0x44	; 68
    1f58:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f5c:	dc 01       	movw	r26, r24
    1f5e:	cb 01       	movw	r24, r22
    1f60:	88 87       	std	Y+8, r24	; 0x08
    1f62:	99 87       	std	Y+9, r25	; 0x09
    1f64:	aa 87       	std	Y+10, r26	; 0x0a
    1f66:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1f68:	68 85       	ldd	r22, Y+8	; 0x08
    1f6a:	79 85       	ldd	r23, Y+9	; 0x09
    1f6c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f6e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f70:	20 e0       	ldi	r18, 0x00	; 0
    1f72:	30 e0       	ldi	r19, 0x00	; 0
    1f74:	40 e8       	ldi	r20, 0x80	; 128
    1f76:	5f e3       	ldi	r21, 0x3F	; 63
    1f78:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1f7c:	88 23       	and	r24, r24
    1f7e:	2c f4       	brge	.+10     	; 0x1f8a <LCD_voidSendCmd+0x28c>
		__ticks = 1;
    1f80:	81 e0       	ldi	r24, 0x01	; 1
    1f82:	90 e0       	ldi	r25, 0x00	; 0
    1f84:	9f 83       	std	Y+7, r25	; 0x07
    1f86:	8e 83       	std	Y+6, r24	; 0x06
    1f88:	3f c0       	rjmp	.+126    	; 0x2008 <LCD_voidSendCmd+0x30a>
	else if (__tmp > 65535)
    1f8a:	68 85       	ldd	r22, Y+8	; 0x08
    1f8c:	79 85       	ldd	r23, Y+9	; 0x09
    1f8e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f90:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f92:	20 e0       	ldi	r18, 0x00	; 0
    1f94:	3f ef       	ldi	r19, 0xFF	; 255
    1f96:	4f e7       	ldi	r20, 0x7F	; 127
    1f98:	57 e4       	ldi	r21, 0x47	; 71
    1f9a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1f9e:	18 16       	cp	r1, r24
    1fa0:	4c f5       	brge	.+82     	; 0x1ff4 <LCD_voidSendCmd+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fa2:	6c 85       	ldd	r22, Y+12	; 0x0c
    1fa4:	7d 85       	ldd	r23, Y+13	; 0x0d
    1fa6:	8e 85       	ldd	r24, Y+14	; 0x0e
    1fa8:	9f 85       	ldd	r25, Y+15	; 0x0f
    1faa:	20 e0       	ldi	r18, 0x00	; 0
    1fac:	30 e0       	ldi	r19, 0x00	; 0
    1fae:	40 e2       	ldi	r20, 0x20	; 32
    1fb0:	51 e4       	ldi	r21, 0x41	; 65
    1fb2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fb6:	dc 01       	movw	r26, r24
    1fb8:	cb 01       	movw	r24, r22
    1fba:	bc 01       	movw	r22, r24
    1fbc:	cd 01       	movw	r24, r26
    1fbe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fc2:	dc 01       	movw	r26, r24
    1fc4:	cb 01       	movw	r24, r22
    1fc6:	9f 83       	std	Y+7, r25	; 0x07
    1fc8:	8e 83       	std	Y+6, r24	; 0x06
    1fca:	0f c0       	rjmp	.+30     	; 0x1fea <LCD_voidSendCmd+0x2ec>
    1fcc:	88 ec       	ldi	r24, 0xC8	; 200
    1fce:	90 e0       	ldi	r25, 0x00	; 0
    1fd0:	9d 83       	std	Y+5, r25	; 0x05
    1fd2:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1fd4:	8c 81       	ldd	r24, Y+4	; 0x04
    1fd6:	9d 81       	ldd	r25, Y+5	; 0x05
    1fd8:	01 97       	sbiw	r24, 0x01	; 1
    1fda:	f1 f7       	brne	.-4      	; 0x1fd8 <LCD_voidSendCmd+0x2da>
    1fdc:	9d 83       	std	Y+5, r25	; 0x05
    1fde:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fe0:	8e 81       	ldd	r24, Y+6	; 0x06
    1fe2:	9f 81       	ldd	r25, Y+7	; 0x07
    1fe4:	01 97       	sbiw	r24, 0x01	; 1
    1fe6:	9f 83       	std	Y+7, r25	; 0x07
    1fe8:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fea:	8e 81       	ldd	r24, Y+6	; 0x06
    1fec:	9f 81       	ldd	r25, Y+7	; 0x07
    1fee:	00 97       	sbiw	r24, 0x00	; 0
    1ff0:	69 f7       	brne	.-38     	; 0x1fcc <LCD_voidSendCmd+0x2ce>
    1ff2:	24 c0       	rjmp	.+72     	; 0x203c <LCD_voidSendCmd+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ff4:	68 85       	ldd	r22, Y+8	; 0x08
    1ff6:	79 85       	ldd	r23, Y+9	; 0x09
    1ff8:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ffa:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ffc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2000:	dc 01       	movw	r26, r24
    2002:	cb 01       	movw	r24, r22
    2004:	9f 83       	std	Y+7, r25	; 0x07
    2006:	8e 83       	std	Y+6, r24	; 0x06
    2008:	8e 81       	ldd	r24, Y+6	; 0x06
    200a:	9f 81       	ldd	r25, Y+7	; 0x07
    200c:	9b 83       	std	Y+3, r25	; 0x03
    200e:	8a 83       	std	Y+2, r24	; 0x02
    2010:	8a 81       	ldd	r24, Y+2	; 0x02
    2012:	9b 81       	ldd	r25, Y+3	; 0x03
    2014:	01 97       	sbiw	r24, 0x01	; 1
    2016:	f1 f7       	brne	.-4      	; 0x2014 <LCD_voidSendCmd+0x316>
    2018:	9b 83       	std	Y+3, r25	; 0x03
    201a:	8a 83       	std	Y+2, r24	; 0x02
    201c:	0f c0       	rjmp	.+30     	; 0x203c <LCD_voidSendCmd+0x33e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    201e:	69 89       	ldd	r22, Y+17	; 0x11
    2020:	7a 89       	ldd	r23, Y+18	; 0x12
    2022:	8b 89       	ldd	r24, Y+19	; 0x13
    2024:	9c 89       	ldd	r25, Y+20	; 0x14
    2026:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    202a:	dc 01       	movw	r26, r24
    202c:	cb 01       	movw	r24, r22
    202e:	88 8b       	std	Y+16, r24	; 0x10
    2030:	88 89       	ldd	r24, Y+16	; 0x10
    2032:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2034:	89 81       	ldd	r24, Y+1	; 0x01
    2036:	8a 95       	dec	r24
    2038:	f1 f7       	brne	.-4      	; 0x2036 <LCD_voidSendCmd+0x338>
    203a:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
}
    203c:	e1 96       	adiw	r28, 0x31	; 49
    203e:	0f b6       	in	r0, 0x3f	; 63
    2040:	f8 94       	cli
    2042:	de bf       	out	0x3e, r29	; 62
    2044:	0f be       	out	0x3f, r0	; 63
    2046:	cd bf       	out	0x3d, r28	; 61
    2048:	cf 91       	pop	r28
    204a:	df 91       	pop	r29
    204c:	08 95       	ret

0000204e <LCD_voidSendChar>:
void LCD_voidSendChar(u8 Copy_u8Char)
{
    204e:	df 93       	push	r29
    2050:	cf 93       	push	r28
    2052:	cd b7       	in	r28, 0x3d	; 61
    2054:	de b7       	in	r29, 0x3e	; 62
    2056:	e1 97       	sbiw	r28, 0x31	; 49
    2058:	0f b6       	in	r0, 0x3f	; 63
    205a:	f8 94       	cli
    205c:	de bf       	out	0x3e, r29	; 62
    205e:	0f be       	out	0x3f, r0	; 63
    2060:	cd bf       	out	0x3d, r28	; 61
    2062:	89 ab       	std	Y+49, r24	; 0x31
	//rs=1
	DIO_u8SetPinValue(CONTROL_PORT,RS_PIN,DIO_u8_HIGH);
    2064:	80 e0       	ldi	r24, 0x00	; 0
    2066:	60 e0       	ldi	r22, 0x00	; 0
    2068:	41 e0       	ldi	r20, 0x01	; 1
    206a:	0e 94 93 08 	call	0x1126	; 0x1126 <DIO_u8SetPinValue>
	//rw=0
	DIO_u8SetPinValue(CONTROL_PORT,RW_PIN,DIO_u8_LOW);
    206e:	80 e0       	ldi	r24, 0x00	; 0
    2070:	61 e0       	ldi	r22, 0x01	; 1
    2072:	40 e0       	ldi	r20, 0x00	; 0
    2074:	0e 94 93 08 	call	0x1126	; 0x1126 <DIO_u8SetPinValue>
	//send cmd byte to the data pins of LCD
	DIO_u8SetPortValue(DATA_PORT,Copy_u8Char);
    2078:	81 e0       	ldi	r24, 0x01	; 1
    207a:	69 a9       	ldd	r22, Y+49	; 0x31
    207c:	0e 94 1c 0b 	call	0x1638	; 0x1638 <DIO_u8SetPortValue>
	//enable pulse e=1,e=0
	DIO_u8SetPinValue(CONTROL_PORT,E_PIN,DIO_u8_HIGH);
    2080:	80 e0       	ldi	r24, 0x00	; 0
    2082:	62 e0       	ldi	r22, 0x02	; 2
    2084:	41 e0       	ldi	r20, 0x01	; 1
    2086:	0e 94 93 08 	call	0x1126	; 0x1126 <DIO_u8SetPinValue>
    208a:	80 e0       	ldi	r24, 0x00	; 0
    208c:	90 e0       	ldi	r25, 0x00	; 0
    208e:	a0 e8       	ldi	r26, 0x80	; 128
    2090:	bf e3       	ldi	r27, 0x3F	; 63
    2092:	8d a7       	std	Y+45, r24	; 0x2d
    2094:	9e a7       	std	Y+46, r25	; 0x2e
    2096:	af a7       	std	Y+47, r26	; 0x2f
    2098:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    209a:	6d a5       	ldd	r22, Y+45	; 0x2d
    209c:	7e a5       	ldd	r23, Y+46	; 0x2e
    209e:	8f a5       	ldd	r24, Y+47	; 0x2f
    20a0:	98 a9       	ldd	r25, Y+48	; 0x30
    20a2:	2b ea       	ldi	r18, 0xAB	; 171
    20a4:	3a ea       	ldi	r19, 0xAA	; 170
    20a6:	4a e2       	ldi	r20, 0x2A	; 42
    20a8:	50 e4       	ldi	r21, 0x40	; 64
    20aa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20ae:	dc 01       	movw	r26, r24
    20b0:	cb 01       	movw	r24, r22
    20b2:	89 a7       	std	Y+41, r24	; 0x29
    20b4:	9a a7       	std	Y+42, r25	; 0x2a
    20b6:	ab a7       	std	Y+43, r26	; 0x2b
    20b8:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    20ba:	69 a5       	ldd	r22, Y+41	; 0x29
    20bc:	7a a5       	ldd	r23, Y+42	; 0x2a
    20be:	8b a5       	ldd	r24, Y+43	; 0x2b
    20c0:	9c a5       	ldd	r25, Y+44	; 0x2c
    20c2:	20 e0       	ldi	r18, 0x00	; 0
    20c4:	30 e0       	ldi	r19, 0x00	; 0
    20c6:	40 e8       	ldi	r20, 0x80	; 128
    20c8:	5f e3       	ldi	r21, 0x3F	; 63
    20ca:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    20ce:	88 23       	and	r24, r24
    20d0:	1c f4       	brge	.+6      	; 0x20d8 <LCD_voidSendChar+0x8a>
		__ticks = 1;
    20d2:	81 e0       	ldi	r24, 0x01	; 1
    20d4:	88 a7       	std	Y+40, r24	; 0x28
    20d6:	91 c0       	rjmp	.+290    	; 0x21fa <LCD_voidSendChar+0x1ac>
	else if (__tmp > 255)
    20d8:	69 a5       	ldd	r22, Y+41	; 0x29
    20da:	7a a5       	ldd	r23, Y+42	; 0x2a
    20dc:	8b a5       	ldd	r24, Y+43	; 0x2b
    20de:	9c a5       	ldd	r25, Y+44	; 0x2c
    20e0:	20 e0       	ldi	r18, 0x00	; 0
    20e2:	30 e0       	ldi	r19, 0x00	; 0
    20e4:	4f e7       	ldi	r20, 0x7F	; 127
    20e6:	53 e4       	ldi	r21, 0x43	; 67
    20e8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    20ec:	18 16       	cp	r1, r24
    20ee:	0c f0       	brlt	.+2      	; 0x20f2 <LCD_voidSendChar+0xa4>
    20f0:	7b c0       	rjmp	.+246    	; 0x21e8 <LCD_voidSendChar+0x19a>
	{
		_delay_ms(__us / 1000.0);
    20f2:	6d a5       	ldd	r22, Y+45	; 0x2d
    20f4:	7e a5       	ldd	r23, Y+46	; 0x2e
    20f6:	8f a5       	ldd	r24, Y+47	; 0x2f
    20f8:	98 a9       	ldd	r25, Y+48	; 0x30
    20fa:	20 e0       	ldi	r18, 0x00	; 0
    20fc:	30 e0       	ldi	r19, 0x00	; 0
    20fe:	4a e7       	ldi	r20, 0x7A	; 122
    2100:	54 e4       	ldi	r21, 0x44	; 68
    2102:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2106:	dc 01       	movw	r26, r24
    2108:	cb 01       	movw	r24, r22
    210a:	8c a3       	std	Y+36, r24	; 0x24
    210c:	9d a3       	std	Y+37, r25	; 0x25
    210e:	ae a3       	std	Y+38, r26	; 0x26
    2110:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2112:	6c a1       	ldd	r22, Y+36	; 0x24
    2114:	7d a1       	ldd	r23, Y+37	; 0x25
    2116:	8e a1       	ldd	r24, Y+38	; 0x26
    2118:	9f a1       	ldd	r25, Y+39	; 0x27
    211a:	20 e0       	ldi	r18, 0x00	; 0
    211c:	30 e0       	ldi	r19, 0x00	; 0
    211e:	4a ef       	ldi	r20, 0xFA	; 250
    2120:	54 e4       	ldi	r21, 0x44	; 68
    2122:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2126:	dc 01       	movw	r26, r24
    2128:	cb 01       	movw	r24, r22
    212a:	88 a3       	std	Y+32, r24	; 0x20
    212c:	99 a3       	std	Y+33, r25	; 0x21
    212e:	aa a3       	std	Y+34, r26	; 0x22
    2130:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2132:	68 a1       	ldd	r22, Y+32	; 0x20
    2134:	79 a1       	ldd	r23, Y+33	; 0x21
    2136:	8a a1       	ldd	r24, Y+34	; 0x22
    2138:	9b a1       	ldd	r25, Y+35	; 0x23
    213a:	20 e0       	ldi	r18, 0x00	; 0
    213c:	30 e0       	ldi	r19, 0x00	; 0
    213e:	40 e8       	ldi	r20, 0x80	; 128
    2140:	5f e3       	ldi	r21, 0x3F	; 63
    2142:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2146:	88 23       	and	r24, r24
    2148:	2c f4       	brge	.+10     	; 0x2154 <LCD_voidSendChar+0x106>
		__ticks = 1;
    214a:	81 e0       	ldi	r24, 0x01	; 1
    214c:	90 e0       	ldi	r25, 0x00	; 0
    214e:	9f 8f       	std	Y+31, r25	; 0x1f
    2150:	8e 8f       	std	Y+30, r24	; 0x1e
    2152:	3f c0       	rjmp	.+126    	; 0x21d2 <LCD_voidSendChar+0x184>
	else if (__tmp > 65535)
    2154:	68 a1       	ldd	r22, Y+32	; 0x20
    2156:	79 a1       	ldd	r23, Y+33	; 0x21
    2158:	8a a1       	ldd	r24, Y+34	; 0x22
    215a:	9b a1       	ldd	r25, Y+35	; 0x23
    215c:	20 e0       	ldi	r18, 0x00	; 0
    215e:	3f ef       	ldi	r19, 0xFF	; 255
    2160:	4f e7       	ldi	r20, 0x7F	; 127
    2162:	57 e4       	ldi	r21, 0x47	; 71
    2164:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2168:	18 16       	cp	r1, r24
    216a:	4c f5       	brge	.+82     	; 0x21be <LCD_voidSendChar+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    216c:	6c a1       	ldd	r22, Y+36	; 0x24
    216e:	7d a1       	ldd	r23, Y+37	; 0x25
    2170:	8e a1       	ldd	r24, Y+38	; 0x26
    2172:	9f a1       	ldd	r25, Y+39	; 0x27
    2174:	20 e0       	ldi	r18, 0x00	; 0
    2176:	30 e0       	ldi	r19, 0x00	; 0
    2178:	40 e2       	ldi	r20, 0x20	; 32
    217a:	51 e4       	ldi	r21, 0x41	; 65
    217c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2180:	dc 01       	movw	r26, r24
    2182:	cb 01       	movw	r24, r22
    2184:	bc 01       	movw	r22, r24
    2186:	cd 01       	movw	r24, r26
    2188:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    218c:	dc 01       	movw	r26, r24
    218e:	cb 01       	movw	r24, r22
    2190:	9f 8f       	std	Y+31, r25	; 0x1f
    2192:	8e 8f       	std	Y+30, r24	; 0x1e
    2194:	0f c0       	rjmp	.+30     	; 0x21b4 <LCD_voidSendChar+0x166>
    2196:	88 ec       	ldi	r24, 0xC8	; 200
    2198:	90 e0       	ldi	r25, 0x00	; 0
    219a:	9d 8f       	std	Y+29, r25	; 0x1d
    219c:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    219e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    21a0:	9d 8d       	ldd	r25, Y+29	; 0x1d
    21a2:	01 97       	sbiw	r24, 0x01	; 1
    21a4:	f1 f7       	brne	.-4      	; 0x21a2 <LCD_voidSendChar+0x154>
    21a6:	9d 8f       	std	Y+29, r25	; 0x1d
    21a8:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21aa:	8e 8d       	ldd	r24, Y+30	; 0x1e
    21ac:	9f 8d       	ldd	r25, Y+31	; 0x1f
    21ae:	01 97       	sbiw	r24, 0x01	; 1
    21b0:	9f 8f       	std	Y+31, r25	; 0x1f
    21b2:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21b4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    21b6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    21b8:	00 97       	sbiw	r24, 0x00	; 0
    21ba:	69 f7       	brne	.-38     	; 0x2196 <LCD_voidSendChar+0x148>
    21bc:	24 c0       	rjmp	.+72     	; 0x2206 <LCD_voidSendChar+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21be:	68 a1       	ldd	r22, Y+32	; 0x20
    21c0:	79 a1       	ldd	r23, Y+33	; 0x21
    21c2:	8a a1       	ldd	r24, Y+34	; 0x22
    21c4:	9b a1       	ldd	r25, Y+35	; 0x23
    21c6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21ca:	dc 01       	movw	r26, r24
    21cc:	cb 01       	movw	r24, r22
    21ce:	9f 8f       	std	Y+31, r25	; 0x1f
    21d0:	8e 8f       	std	Y+30, r24	; 0x1e
    21d2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    21d4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    21d6:	9b 8f       	std	Y+27, r25	; 0x1b
    21d8:	8a 8f       	std	Y+26, r24	; 0x1a
    21da:	8a 8d       	ldd	r24, Y+26	; 0x1a
    21dc:	9b 8d       	ldd	r25, Y+27	; 0x1b
    21de:	01 97       	sbiw	r24, 0x01	; 1
    21e0:	f1 f7       	brne	.-4      	; 0x21de <LCD_voidSendChar+0x190>
    21e2:	9b 8f       	std	Y+27, r25	; 0x1b
    21e4:	8a 8f       	std	Y+26, r24	; 0x1a
    21e6:	0f c0       	rjmp	.+30     	; 0x2206 <LCD_voidSendChar+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    21e8:	69 a5       	ldd	r22, Y+41	; 0x29
    21ea:	7a a5       	ldd	r23, Y+42	; 0x2a
    21ec:	8b a5       	ldd	r24, Y+43	; 0x2b
    21ee:	9c a5       	ldd	r25, Y+44	; 0x2c
    21f0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21f4:	dc 01       	movw	r26, r24
    21f6:	cb 01       	movw	r24, r22
    21f8:	88 a7       	std	Y+40, r24	; 0x28
    21fa:	88 a5       	ldd	r24, Y+40	; 0x28
    21fc:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    21fe:	89 8d       	ldd	r24, Y+25	; 0x19
    2200:	8a 95       	dec	r24
    2202:	f1 f7       	brne	.-4      	; 0x2200 <LCD_voidSendChar+0x1b2>
    2204:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1);
	DIO_u8SetPinValue(CONTROL_PORT,E_PIN,DIO_u8_LOW);
    2206:	80 e0       	ldi	r24, 0x00	; 0
    2208:	62 e0       	ldi	r22, 0x02	; 2
    220a:	40 e0       	ldi	r20, 0x00	; 0
    220c:	0e 94 93 08 	call	0x1126	; 0x1126 <DIO_u8SetPinValue>
    2210:	80 e0       	ldi	r24, 0x00	; 0
    2212:	90 e0       	ldi	r25, 0x00	; 0
    2214:	a0 e8       	ldi	r26, 0x80	; 128
    2216:	bf e3       	ldi	r27, 0x3F	; 63
    2218:	8d 8b       	std	Y+21, r24	; 0x15
    221a:	9e 8b       	std	Y+22, r25	; 0x16
    221c:	af 8b       	std	Y+23, r26	; 0x17
    221e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2220:	6d 89       	ldd	r22, Y+21	; 0x15
    2222:	7e 89       	ldd	r23, Y+22	; 0x16
    2224:	8f 89       	ldd	r24, Y+23	; 0x17
    2226:	98 8d       	ldd	r25, Y+24	; 0x18
    2228:	2b ea       	ldi	r18, 0xAB	; 171
    222a:	3a ea       	ldi	r19, 0xAA	; 170
    222c:	4a e2       	ldi	r20, 0x2A	; 42
    222e:	50 e4       	ldi	r21, 0x40	; 64
    2230:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2234:	dc 01       	movw	r26, r24
    2236:	cb 01       	movw	r24, r22
    2238:	89 8b       	std	Y+17, r24	; 0x11
    223a:	9a 8b       	std	Y+18, r25	; 0x12
    223c:	ab 8b       	std	Y+19, r26	; 0x13
    223e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2240:	69 89       	ldd	r22, Y+17	; 0x11
    2242:	7a 89       	ldd	r23, Y+18	; 0x12
    2244:	8b 89       	ldd	r24, Y+19	; 0x13
    2246:	9c 89       	ldd	r25, Y+20	; 0x14
    2248:	20 e0       	ldi	r18, 0x00	; 0
    224a:	30 e0       	ldi	r19, 0x00	; 0
    224c:	40 e8       	ldi	r20, 0x80	; 128
    224e:	5f e3       	ldi	r21, 0x3F	; 63
    2250:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2254:	88 23       	and	r24, r24
    2256:	1c f4       	brge	.+6      	; 0x225e <LCD_voidSendChar+0x210>
		__ticks = 1;
    2258:	81 e0       	ldi	r24, 0x01	; 1
    225a:	88 8b       	std	Y+16, r24	; 0x10
    225c:	91 c0       	rjmp	.+290    	; 0x2380 <LCD_voidSendChar+0x332>
	else if (__tmp > 255)
    225e:	69 89       	ldd	r22, Y+17	; 0x11
    2260:	7a 89       	ldd	r23, Y+18	; 0x12
    2262:	8b 89       	ldd	r24, Y+19	; 0x13
    2264:	9c 89       	ldd	r25, Y+20	; 0x14
    2266:	20 e0       	ldi	r18, 0x00	; 0
    2268:	30 e0       	ldi	r19, 0x00	; 0
    226a:	4f e7       	ldi	r20, 0x7F	; 127
    226c:	53 e4       	ldi	r21, 0x43	; 67
    226e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2272:	18 16       	cp	r1, r24
    2274:	0c f0       	brlt	.+2      	; 0x2278 <LCD_voidSendChar+0x22a>
    2276:	7b c0       	rjmp	.+246    	; 0x236e <LCD_voidSendChar+0x320>
	{
		_delay_ms(__us / 1000.0);
    2278:	6d 89       	ldd	r22, Y+21	; 0x15
    227a:	7e 89       	ldd	r23, Y+22	; 0x16
    227c:	8f 89       	ldd	r24, Y+23	; 0x17
    227e:	98 8d       	ldd	r25, Y+24	; 0x18
    2280:	20 e0       	ldi	r18, 0x00	; 0
    2282:	30 e0       	ldi	r19, 0x00	; 0
    2284:	4a e7       	ldi	r20, 0x7A	; 122
    2286:	54 e4       	ldi	r21, 0x44	; 68
    2288:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    228c:	dc 01       	movw	r26, r24
    228e:	cb 01       	movw	r24, r22
    2290:	8c 87       	std	Y+12, r24	; 0x0c
    2292:	9d 87       	std	Y+13, r25	; 0x0d
    2294:	ae 87       	std	Y+14, r26	; 0x0e
    2296:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2298:	6c 85       	ldd	r22, Y+12	; 0x0c
    229a:	7d 85       	ldd	r23, Y+13	; 0x0d
    229c:	8e 85       	ldd	r24, Y+14	; 0x0e
    229e:	9f 85       	ldd	r25, Y+15	; 0x0f
    22a0:	20 e0       	ldi	r18, 0x00	; 0
    22a2:	30 e0       	ldi	r19, 0x00	; 0
    22a4:	4a ef       	ldi	r20, 0xFA	; 250
    22a6:	54 e4       	ldi	r21, 0x44	; 68
    22a8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22ac:	dc 01       	movw	r26, r24
    22ae:	cb 01       	movw	r24, r22
    22b0:	88 87       	std	Y+8, r24	; 0x08
    22b2:	99 87       	std	Y+9, r25	; 0x09
    22b4:	aa 87       	std	Y+10, r26	; 0x0a
    22b6:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    22b8:	68 85       	ldd	r22, Y+8	; 0x08
    22ba:	79 85       	ldd	r23, Y+9	; 0x09
    22bc:	8a 85       	ldd	r24, Y+10	; 0x0a
    22be:	9b 85       	ldd	r25, Y+11	; 0x0b
    22c0:	20 e0       	ldi	r18, 0x00	; 0
    22c2:	30 e0       	ldi	r19, 0x00	; 0
    22c4:	40 e8       	ldi	r20, 0x80	; 128
    22c6:	5f e3       	ldi	r21, 0x3F	; 63
    22c8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    22cc:	88 23       	and	r24, r24
    22ce:	2c f4       	brge	.+10     	; 0x22da <LCD_voidSendChar+0x28c>
		__ticks = 1;
    22d0:	81 e0       	ldi	r24, 0x01	; 1
    22d2:	90 e0       	ldi	r25, 0x00	; 0
    22d4:	9f 83       	std	Y+7, r25	; 0x07
    22d6:	8e 83       	std	Y+6, r24	; 0x06
    22d8:	3f c0       	rjmp	.+126    	; 0x2358 <LCD_voidSendChar+0x30a>
	else if (__tmp > 65535)
    22da:	68 85       	ldd	r22, Y+8	; 0x08
    22dc:	79 85       	ldd	r23, Y+9	; 0x09
    22de:	8a 85       	ldd	r24, Y+10	; 0x0a
    22e0:	9b 85       	ldd	r25, Y+11	; 0x0b
    22e2:	20 e0       	ldi	r18, 0x00	; 0
    22e4:	3f ef       	ldi	r19, 0xFF	; 255
    22e6:	4f e7       	ldi	r20, 0x7F	; 127
    22e8:	57 e4       	ldi	r21, 0x47	; 71
    22ea:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    22ee:	18 16       	cp	r1, r24
    22f0:	4c f5       	brge	.+82     	; 0x2344 <LCD_voidSendChar+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22f2:	6c 85       	ldd	r22, Y+12	; 0x0c
    22f4:	7d 85       	ldd	r23, Y+13	; 0x0d
    22f6:	8e 85       	ldd	r24, Y+14	; 0x0e
    22f8:	9f 85       	ldd	r25, Y+15	; 0x0f
    22fa:	20 e0       	ldi	r18, 0x00	; 0
    22fc:	30 e0       	ldi	r19, 0x00	; 0
    22fe:	40 e2       	ldi	r20, 0x20	; 32
    2300:	51 e4       	ldi	r21, 0x41	; 65
    2302:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2306:	dc 01       	movw	r26, r24
    2308:	cb 01       	movw	r24, r22
    230a:	bc 01       	movw	r22, r24
    230c:	cd 01       	movw	r24, r26
    230e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2312:	dc 01       	movw	r26, r24
    2314:	cb 01       	movw	r24, r22
    2316:	9f 83       	std	Y+7, r25	; 0x07
    2318:	8e 83       	std	Y+6, r24	; 0x06
    231a:	0f c0       	rjmp	.+30     	; 0x233a <LCD_voidSendChar+0x2ec>
    231c:	88 ec       	ldi	r24, 0xC8	; 200
    231e:	90 e0       	ldi	r25, 0x00	; 0
    2320:	9d 83       	std	Y+5, r25	; 0x05
    2322:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2324:	8c 81       	ldd	r24, Y+4	; 0x04
    2326:	9d 81       	ldd	r25, Y+5	; 0x05
    2328:	01 97       	sbiw	r24, 0x01	; 1
    232a:	f1 f7       	brne	.-4      	; 0x2328 <LCD_voidSendChar+0x2da>
    232c:	9d 83       	std	Y+5, r25	; 0x05
    232e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2330:	8e 81       	ldd	r24, Y+6	; 0x06
    2332:	9f 81       	ldd	r25, Y+7	; 0x07
    2334:	01 97       	sbiw	r24, 0x01	; 1
    2336:	9f 83       	std	Y+7, r25	; 0x07
    2338:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    233a:	8e 81       	ldd	r24, Y+6	; 0x06
    233c:	9f 81       	ldd	r25, Y+7	; 0x07
    233e:	00 97       	sbiw	r24, 0x00	; 0
    2340:	69 f7       	brne	.-38     	; 0x231c <LCD_voidSendChar+0x2ce>
    2342:	24 c0       	rjmp	.+72     	; 0x238c <LCD_voidSendChar+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2344:	68 85       	ldd	r22, Y+8	; 0x08
    2346:	79 85       	ldd	r23, Y+9	; 0x09
    2348:	8a 85       	ldd	r24, Y+10	; 0x0a
    234a:	9b 85       	ldd	r25, Y+11	; 0x0b
    234c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2350:	dc 01       	movw	r26, r24
    2352:	cb 01       	movw	r24, r22
    2354:	9f 83       	std	Y+7, r25	; 0x07
    2356:	8e 83       	std	Y+6, r24	; 0x06
    2358:	8e 81       	ldd	r24, Y+6	; 0x06
    235a:	9f 81       	ldd	r25, Y+7	; 0x07
    235c:	9b 83       	std	Y+3, r25	; 0x03
    235e:	8a 83       	std	Y+2, r24	; 0x02
    2360:	8a 81       	ldd	r24, Y+2	; 0x02
    2362:	9b 81       	ldd	r25, Y+3	; 0x03
    2364:	01 97       	sbiw	r24, 0x01	; 1
    2366:	f1 f7       	brne	.-4      	; 0x2364 <LCD_voidSendChar+0x316>
    2368:	9b 83       	std	Y+3, r25	; 0x03
    236a:	8a 83       	std	Y+2, r24	; 0x02
    236c:	0f c0       	rjmp	.+30     	; 0x238c <LCD_voidSendChar+0x33e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    236e:	69 89       	ldd	r22, Y+17	; 0x11
    2370:	7a 89       	ldd	r23, Y+18	; 0x12
    2372:	8b 89       	ldd	r24, Y+19	; 0x13
    2374:	9c 89       	ldd	r25, Y+20	; 0x14
    2376:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    237a:	dc 01       	movw	r26, r24
    237c:	cb 01       	movw	r24, r22
    237e:	88 8b       	std	Y+16, r24	; 0x10
    2380:	88 89       	ldd	r24, Y+16	; 0x10
    2382:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2384:	89 81       	ldd	r24, Y+1	; 0x01
    2386:	8a 95       	dec	r24
    2388:	f1 f7       	brne	.-4      	; 0x2386 <LCD_voidSendChar+0x338>
    238a:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
}
    238c:	e1 96       	adiw	r28, 0x31	; 49
    238e:	0f b6       	in	r0, 0x3f	; 63
    2390:	f8 94       	cli
    2392:	de bf       	out	0x3e, r29	; 62
    2394:	0f be       	out	0x3f, r0	; 63
    2396:	cd bf       	out	0x3d, r28	; 61
    2398:	cf 91       	pop	r28
    239a:	df 91       	pop	r29
    239c:	08 95       	ret

0000239e <LCD_voidSendString>:
void LCD_voidSendString(u8 *Copy_up8Arr)
{
    239e:	df 93       	push	r29
    23a0:	cf 93       	push	r28
    23a2:	00 d0       	rcall	.+0      	; 0x23a4 <LCD_voidSendString+0x6>
    23a4:	00 d0       	rcall	.+0      	; 0x23a6 <LCD_voidSendString+0x8>
    23a6:	cd b7       	in	r28, 0x3d	; 61
    23a8:	de b7       	in	r29, 0x3e	; 62
    23aa:	9c 83       	std	Y+4, r25	; 0x04
    23ac:	8b 83       	std	Y+3, r24	; 0x03
	int i=0;
    23ae:	1a 82       	std	Y+2, r1	; 0x02
    23b0:	19 82       	std	Y+1, r1	; 0x01
    23b2:	0f c0       	rjmp	.+30     	; 0x23d2 <LCD_voidSendString+0x34>
	while (Copy_up8Arr[i]!=0)
	{
		LCD_voidSendChar(Copy_up8Arr[i]);
    23b4:	29 81       	ldd	r18, Y+1	; 0x01
    23b6:	3a 81       	ldd	r19, Y+2	; 0x02
    23b8:	8b 81       	ldd	r24, Y+3	; 0x03
    23ba:	9c 81       	ldd	r25, Y+4	; 0x04
    23bc:	fc 01       	movw	r30, r24
    23be:	e2 0f       	add	r30, r18
    23c0:	f3 1f       	adc	r31, r19
    23c2:	80 81       	ld	r24, Z
    23c4:	0e 94 27 10 	call	0x204e	; 0x204e <LCD_voidSendChar>
		i++;
    23c8:	89 81       	ldd	r24, Y+1	; 0x01
    23ca:	9a 81       	ldd	r25, Y+2	; 0x02
    23cc:	01 96       	adiw	r24, 0x01	; 1
    23ce:	9a 83       	std	Y+2, r25	; 0x02
    23d0:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
}
void LCD_voidSendString(u8 *Copy_up8Arr)
{
	int i=0;
	while (Copy_up8Arr[i]!=0)
    23d2:	29 81       	ldd	r18, Y+1	; 0x01
    23d4:	3a 81       	ldd	r19, Y+2	; 0x02
    23d6:	8b 81       	ldd	r24, Y+3	; 0x03
    23d8:	9c 81       	ldd	r25, Y+4	; 0x04
    23da:	fc 01       	movw	r30, r24
    23dc:	e2 0f       	add	r30, r18
    23de:	f3 1f       	adc	r31, r19
    23e0:	80 81       	ld	r24, Z
    23e2:	88 23       	and	r24, r24
    23e4:	39 f7       	brne	.-50     	; 0x23b4 <LCD_voidSendString+0x16>
		i++;

	}


}
    23e6:	0f 90       	pop	r0
    23e8:	0f 90       	pop	r0
    23ea:	0f 90       	pop	r0
    23ec:	0f 90       	pop	r0
    23ee:	cf 91       	pop	r28
    23f0:	df 91       	pop	r29
    23f2:	08 95       	ret

000023f4 <LCD_voidClear>:
void LCD_voidClear(void)
{
    23f4:	df 93       	push	r29
    23f6:	cf 93       	push	r28
    23f8:	cd b7       	in	r28, 0x3d	; 61
    23fa:	de b7       	in	r29, 0x3e	; 62
	LCD_voidSendCmd(0b0000000001);
    23fc:	81 e0       	ldi	r24, 0x01	; 1
    23fe:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <LCD_voidSendCmd>
}
    2402:	cf 91       	pop	r28
    2404:	df 91       	pop	r29
    2406:	08 95       	ret

00002408 <LCD_voidGoToRowColumn>:
void LCD_voidGoToRowColumn(u8 Copy_u8Row,u8 Copy_u8Column)
{
    2408:	df 93       	push	r29
    240a:	cf 93       	push	r28
    240c:	00 d0       	rcall	.+0      	; 0x240e <LCD_voidGoToRowColumn+0x6>
    240e:	00 d0       	rcall	.+0      	; 0x2410 <LCD_voidGoToRowColumn+0x8>
    2410:	cd b7       	in	r28, 0x3d	; 61
    2412:	de b7       	in	r29, 0x3e	; 62
    2414:	89 83       	std	Y+1, r24	; 0x01
    2416:	6a 83       	std	Y+2, r22	; 0x02
	if((Copy_u8Row <= ROW2) && (Copy_u8Column < 39))
    2418:	89 81       	ldd	r24, Y+1	; 0x01
    241a:	82 30       	cpi	r24, 0x02	; 2
    241c:	d8 f4       	brcc	.+54     	; 0x2454 <LCD_voidGoToRowColumn+0x4c>
    241e:	8a 81       	ldd	r24, Y+2	; 0x02
    2420:	87 32       	cpi	r24, 0x27	; 39
    2422:	c0 f4       	brcc	.+48     	; 0x2454 <LCD_voidGoToRowColumn+0x4c>
	{
		switch(Copy_u8Row)
    2424:	89 81       	ldd	r24, Y+1	; 0x01
    2426:	28 2f       	mov	r18, r24
    2428:	30 e0       	ldi	r19, 0x00	; 0
    242a:	3c 83       	std	Y+4, r19	; 0x04
    242c:	2b 83       	std	Y+3, r18	; 0x03
    242e:	8b 81       	ldd	r24, Y+3	; 0x03
    2430:	9c 81       	ldd	r25, Y+4	; 0x04
    2432:	00 97       	sbiw	r24, 0x00	; 0
    2434:	31 f0       	breq	.+12     	; 0x2442 <LCD_voidGoToRowColumn+0x3a>
    2436:	2b 81       	ldd	r18, Y+3	; 0x03
    2438:	3c 81       	ldd	r19, Y+4	; 0x04
    243a:	21 30       	cpi	r18, 0x01	; 1
    243c:	31 05       	cpc	r19, r1
    243e:	31 f0       	breq	.+12     	; 0x244c <LCD_voidGoToRowColumn+0x44>
    2440:	09 c0       	rjmp	.+18     	; 0x2454 <LCD_voidGoToRowColumn+0x4c>
		{
		case ROW1:{LCD_voidSendCmd(0x80+Copy_u8Column);break;}
    2442:	8a 81       	ldd	r24, Y+2	; 0x02
    2444:	80 58       	subi	r24, 0x80	; 128
    2446:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <LCD_voidSendCmd>
    244a:	04 c0       	rjmp	.+8      	; 0x2454 <LCD_voidGoToRowColumn+0x4c>
		case ROW2:{LCD_voidSendCmd(0xC0+Copy_u8Column);break;}
    244c:	8a 81       	ldd	r24, Y+2	; 0x02
    244e:	80 54       	subi	r24, 0x40	; 64
    2450:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <LCD_voidSendCmd>
		}
	}
}
    2454:	0f 90       	pop	r0
    2456:	0f 90       	pop	r0
    2458:	0f 90       	pop	r0
    245a:	0f 90       	pop	r0
    245c:	cf 91       	pop	r28
    245e:	df 91       	pop	r29
    2460:	08 95       	ret

00002462 <LCD_voidSendSpecialChar>:
{
	  Array[i]=num%10;
	  Array[i+1]=int(num/10);
}*/
void LCD_voidSendSpecialChar(u8 Copy_u8Index,u8* Copy_pu8SpecialChar,u8 Copy_u8Row,u8 Copy_u8Column)
{
    2462:	df 93       	push	r29
    2464:	cf 93       	push	r28
    2466:	cd b7       	in	r28, 0x3d	; 61
    2468:	de b7       	in	r29, 0x3e	; 62
    246a:	28 97       	sbiw	r28, 0x08	; 8
    246c:	0f b6       	in	r0, 0x3f	; 63
    246e:	f8 94       	cli
    2470:	de bf       	out	0x3e, r29	; 62
    2472:	0f be       	out	0x3f, r0	; 63
    2474:	cd bf       	out	0x3d, r28	; 61
    2476:	8c 83       	std	Y+4, r24	; 0x04
    2478:	7e 83       	std	Y+6, r23	; 0x06
    247a:	6d 83       	std	Y+5, r22	; 0x05
    247c:	4f 83       	std	Y+7, r20	; 0x07
    247e:	28 87       	std	Y+8, r18	; 0x08
	u8 Local;
	Local=Copy_u8Index*8;
    2480:	8c 81       	ldd	r24, Y+4	; 0x04
    2482:	88 2f       	mov	r24, r24
    2484:	90 e0       	ldi	r25, 0x00	; 0
    2486:	88 0f       	add	r24, r24
    2488:	99 1f       	adc	r25, r25
    248a:	88 0f       	add	r24, r24
    248c:	99 1f       	adc	r25, r25
    248e:	88 0f       	add	r24, r24
    2490:	99 1f       	adc	r25, r25
    2492:	8b 83       	std	Y+3, r24	; 0x03
	LCD_voidSendCmd(0b01000000+Local);//access CGRAM character 0
    2494:	8b 81       	ldd	r24, Y+3	; 0x03
    2496:	80 5c       	subi	r24, 0xC0	; 192
    2498:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <LCD_voidSendCmd>
	for(int i=0;i<=8;i++)
    249c:	1a 82       	std	Y+2, r1	; 0x02
    249e:	19 82       	std	Y+1, r1	; 0x01
    24a0:	0f c0       	rjmp	.+30     	; 0x24c0 <LCD_voidSendSpecialChar+0x5e>
	{
     LCD_voidSendChar(Copy_pu8SpecialChar[i]);
    24a2:	29 81       	ldd	r18, Y+1	; 0x01
    24a4:	3a 81       	ldd	r19, Y+2	; 0x02
    24a6:	8d 81       	ldd	r24, Y+5	; 0x05
    24a8:	9e 81       	ldd	r25, Y+6	; 0x06
    24aa:	fc 01       	movw	r30, r24
    24ac:	e2 0f       	add	r30, r18
    24ae:	f3 1f       	adc	r31, r19
    24b0:	80 81       	ld	r24, Z
    24b2:	0e 94 27 10 	call	0x204e	; 0x204e <LCD_voidSendChar>
void LCD_voidSendSpecialChar(u8 Copy_u8Index,u8* Copy_pu8SpecialChar,u8 Copy_u8Row,u8 Copy_u8Column)
{
	u8 Local;
	Local=Copy_u8Index*8;
	LCD_voidSendCmd(0b01000000+Local);//access CGRAM character 0
	for(int i=0;i<=8;i++)
    24b6:	89 81       	ldd	r24, Y+1	; 0x01
    24b8:	9a 81       	ldd	r25, Y+2	; 0x02
    24ba:	01 96       	adiw	r24, 0x01	; 1
    24bc:	9a 83       	std	Y+2, r25	; 0x02
    24be:	89 83       	std	Y+1, r24	; 0x01
    24c0:	89 81       	ldd	r24, Y+1	; 0x01
    24c2:	9a 81       	ldd	r25, Y+2	; 0x02
    24c4:	89 30       	cpi	r24, 0x09	; 9
    24c6:	91 05       	cpc	r25, r1
    24c8:	64 f3       	brlt	.-40     	; 0x24a2 <LCD_voidSendSpecialChar+0x40>
	{
     LCD_voidSendChar(Copy_pu8SpecialChar[i]);
	}

	LCD_voidGoToRowColumn(Copy_u8Row,Copy_u8Column);//access DDRAM
    24ca:	8f 81       	ldd	r24, Y+7	; 0x07
    24cc:	68 85       	ldd	r22, Y+8	; 0x08
    24ce:	0e 94 04 12 	call	0x2408	; 0x2408 <LCD_voidGoToRowColumn>
	LCD_voidSendChar(Copy_u8Index);
    24d2:	8c 81       	ldd	r24, Y+4	; 0x04
    24d4:	0e 94 27 10 	call	0x204e	; 0x204e <LCD_voidSendChar>

}
    24d8:	28 96       	adiw	r28, 0x08	; 8
    24da:	0f b6       	in	r0, 0x3f	; 63
    24dc:	f8 94       	cli
    24de:	de bf       	out	0x3e, r29	; 62
    24e0:	0f be       	out	0x3f, r0	; 63
    24e2:	cd bf       	out	0x3d, r28	; 61
    24e4:	cf 91       	pop	r28
    24e6:	df 91       	pop	r29
    24e8:	08 95       	ret

000024ea <LCD_voidSendNum>:
void LCD_voidSendNum(u32 Copy_u32Num)
{
    24ea:	df 93       	push	r29
    24ec:	cf 93       	push	r28
    24ee:	cd b7       	in	r28, 0x3d	; 61
    24f0:	de b7       	in	r29, 0x3e	; 62
    24f2:	2e 97       	sbiw	r28, 0x0e	; 14
    24f4:	0f b6       	in	r0, 0x3f	; 63
    24f6:	f8 94       	cli
    24f8:	de bf       	out	0x3e, r29	; 62
    24fa:	0f be       	out	0x3f, r0	; 63
    24fc:	cd bf       	out	0x3d, r28	; 61
    24fe:	9e 87       	std	Y+14, r25	; 0x0e
    2500:	8d 87       	std	Y+13, r24	; 0x0d
	u8 l=0;u8 Arr[10];
    2502:	1a 82       	std	Y+2, r1	; 0x02
    2504:	1d c0       	rjmp	.+58     	; 0x2540 <LCD_voidSendNum+0x56>
	while(Copy_u32Num!=0)
	{
		Arr[l]=Copy_u32Num%10;
    2506:	8a 81       	ldd	r24, Y+2	; 0x02
    2508:	e8 2f       	mov	r30, r24
    250a:	f0 e0       	ldi	r31, 0x00	; 0
    250c:	8d 85       	ldd	r24, Y+13	; 0x0d
    250e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2510:	2a e0       	ldi	r18, 0x0A	; 10
    2512:	30 e0       	ldi	r19, 0x00	; 0
    2514:	b9 01       	movw	r22, r18
    2516:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <__udivmodhi4>
    251a:	28 2f       	mov	r18, r24
    251c:	ce 01       	movw	r24, r28
    251e:	03 96       	adiw	r24, 0x03	; 3
    2520:	e8 0f       	add	r30, r24
    2522:	f9 1f       	adc	r31, r25
    2524:	20 83       	st	Z, r18
	    Copy_u32Num=(Copy_u32Num/10);
    2526:	8d 85       	ldd	r24, Y+13	; 0x0d
    2528:	9e 85       	ldd	r25, Y+14	; 0x0e
    252a:	2a e0       	ldi	r18, 0x0A	; 10
    252c:	30 e0       	ldi	r19, 0x00	; 0
    252e:	b9 01       	movw	r22, r18
    2530:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <__udivmodhi4>
    2534:	cb 01       	movw	r24, r22
    2536:	9e 87       	std	Y+14, r25	; 0x0e
    2538:	8d 87       	std	Y+13, r24	; 0x0d
	    l++;
    253a:	8a 81       	ldd	r24, Y+2	; 0x02
    253c:	8f 5f       	subi	r24, 0xFF	; 255
    253e:	8a 83       	std	Y+2, r24	; 0x02

}
void LCD_voidSendNum(u32 Copy_u32Num)
{
	u8 l=0;u8 Arr[10];
	while(Copy_u32Num!=0)
    2540:	8d 85       	ldd	r24, Y+13	; 0x0d
    2542:	9e 85       	ldd	r25, Y+14	; 0x0e
    2544:	00 97       	sbiw	r24, 0x00	; 0
    2546:	f9 f6       	brne	.-66     	; 0x2506 <LCD_voidSendNum+0x1c>
	{
		Arr[l]=Copy_u32Num%10;
	    Copy_u32Num=(Copy_u32Num/10);
	    l++;
	}
	for(s8 i=l-1;i>=0;i--)
    2548:	8a 81       	ldd	r24, Y+2	; 0x02
    254a:	81 50       	subi	r24, 0x01	; 1
    254c:	89 83       	std	Y+1, r24	; 0x01
    254e:	11 c0       	rjmp	.+34     	; 0x2572 <LCD_voidSendNum+0x88>
	{
		LCD_voidSendChar(Arr[i]+48);
    2550:	89 81       	ldd	r24, Y+1	; 0x01
    2552:	28 2f       	mov	r18, r24
    2554:	33 27       	eor	r19, r19
    2556:	27 fd       	sbrc	r18, 7
    2558:	30 95       	com	r19
    255a:	ce 01       	movw	r24, r28
    255c:	03 96       	adiw	r24, 0x03	; 3
    255e:	fc 01       	movw	r30, r24
    2560:	e2 0f       	add	r30, r18
    2562:	f3 1f       	adc	r31, r19
    2564:	80 81       	ld	r24, Z
    2566:	80 5d       	subi	r24, 0xD0	; 208
    2568:	0e 94 27 10 	call	0x204e	; 0x204e <LCD_voidSendChar>
	{
		Arr[l]=Copy_u32Num%10;
	    Copy_u32Num=(Copy_u32Num/10);
	    l++;
	}
	for(s8 i=l-1;i>=0;i--)
    256c:	89 81       	ldd	r24, Y+1	; 0x01
    256e:	81 50       	subi	r24, 0x01	; 1
    2570:	89 83       	std	Y+1, r24	; 0x01
    2572:	89 81       	ldd	r24, Y+1	; 0x01
    2574:	88 23       	and	r24, r24
    2576:	64 f7       	brge	.-40     	; 0x2550 <LCD_voidSendNum+0x66>
	{
		LCD_voidSendChar(Arr[i]+48);
    }
}
    2578:	2e 96       	adiw	r28, 0x0e	; 14
    257a:	0f b6       	in	r0, 0x3f	; 63
    257c:	f8 94       	cli
    257e:	de bf       	out	0x3e, r29	; 62
    2580:	0f be       	out	0x3f, r0	; 63
    2582:	cd bf       	out	0x3d, r28	; 61
    2584:	cf 91       	pop	r28
    2586:	df 91       	pop	r29
    2588:	08 95       	ret

0000258a <__mulsi3>:
    258a:	62 9f       	mul	r22, r18
    258c:	d0 01       	movw	r26, r0
    258e:	73 9f       	mul	r23, r19
    2590:	f0 01       	movw	r30, r0
    2592:	82 9f       	mul	r24, r18
    2594:	e0 0d       	add	r30, r0
    2596:	f1 1d       	adc	r31, r1
    2598:	64 9f       	mul	r22, r20
    259a:	e0 0d       	add	r30, r0
    259c:	f1 1d       	adc	r31, r1
    259e:	92 9f       	mul	r25, r18
    25a0:	f0 0d       	add	r31, r0
    25a2:	83 9f       	mul	r24, r19
    25a4:	f0 0d       	add	r31, r0
    25a6:	74 9f       	mul	r23, r20
    25a8:	f0 0d       	add	r31, r0
    25aa:	65 9f       	mul	r22, r21
    25ac:	f0 0d       	add	r31, r0
    25ae:	99 27       	eor	r25, r25
    25b0:	72 9f       	mul	r23, r18
    25b2:	b0 0d       	add	r27, r0
    25b4:	e1 1d       	adc	r30, r1
    25b6:	f9 1f       	adc	r31, r25
    25b8:	63 9f       	mul	r22, r19
    25ba:	b0 0d       	add	r27, r0
    25bc:	e1 1d       	adc	r30, r1
    25be:	f9 1f       	adc	r31, r25
    25c0:	bd 01       	movw	r22, r26
    25c2:	cf 01       	movw	r24, r30
    25c4:	11 24       	eor	r1, r1
    25c6:	08 95       	ret

000025c8 <__udivmodhi4>:
    25c8:	aa 1b       	sub	r26, r26
    25ca:	bb 1b       	sub	r27, r27
    25cc:	51 e1       	ldi	r21, 0x11	; 17
    25ce:	07 c0       	rjmp	.+14     	; 0x25de <__udivmodhi4_ep>

000025d0 <__udivmodhi4_loop>:
    25d0:	aa 1f       	adc	r26, r26
    25d2:	bb 1f       	adc	r27, r27
    25d4:	a6 17       	cp	r26, r22
    25d6:	b7 07       	cpc	r27, r23
    25d8:	10 f0       	brcs	.+4      	; 0x25de <__udivmodhi4_ep>
    25da:	a6 1b       	sub	r26, r22
    25dc:	b7 0b       	sbc	r27, r23

000025de <__udivmodhi4_ep>:
    25de:	88 1f       	adc	r24, r24
    25e0:	99 1f       	adc	r25, r25
    25e2:	5a 95       	dec	r21
    25e4:	a9 f7       	brne	.-22     	; 0x25d0 <__udivmodhi4_loop>
    25e6:	80 95       	com	r24
    25e8:	90 95       	com	r25
    25ea:	bc 01       	movw	r22, r24
    25ec:	cd 01       	movw	r24, r26
    25ee:	08 95       	ret

000025f0 <__prologue_saves__>:
    25f0:	2f 92       	push	r2
    25f2:	3f 92       	push	r3
    25f4:	4f 92       	push	r4
    25f6:	5f 92       	push	r5
    25f8:	6f 92       	push	r6
    25fa:	7f 92       	push	r7
    25fc:	8f 92       	push	r8
    25fe:	9f 92       	push	r9
    2600:	af 92       	push	r10
    2602:	bf 92       	push	r11
    2604:	cf 92       	push	r12
    2606:	df 92       	push	r13
    2608:	ef 92       	push	r14
    260a:	ff 92       	push	r15
    260c:	0f 93       	push	r16
    260e:	1f 93       	push	r17
    2610:	cf 93       	push	r28
    2612:	df 93       	push	r29
    2614:	cd b7       	in	r28, 0x3d	; 61
    2616:	de b7       	in	r29, 0x3e	; 62
    2618:	ca 1b       	sub	r28, r26
    261a:	db 0b       	sbc	r29, r27
    261c:	0f b6       	in	r0, 0x3f	; 63
    261e:	f8 94       	cli
    2620:	de bf       	out	0x3e, r29	; 62
    2622:	0f be       	out	0x3f, r0	; 63
    2624:	cd bf       	out	0x3d, r28	; 61
    2626:	09 94       	ijmp

00002628 <__epilogue_restores__>:
    2628:	2a 88       	ldd	r2, Y+18	; 0x12
    262a:	39 88       	ldd	r3, Y+17	; 0x11
    262c:	48 88       	ldd	r4, Y+16	; 0x10
    262e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2630:	6e 84       	ldd	r6, Y+14	; 0x0e
    2632:	7d 84       	ldd	r7, Y+13	; 0x0d
    2634:	8c 84       	ldd	r8, Y+12	; 0x0c
    2636:	9b 84       	ldd	r9, Y+11	; 0x0b
    2638:	aa 84       	ldd	r10, Y+10	; 0x0a
    263a:	b9 84       	ldd	r11, Y+9	; 0x09
    263c:	c8 84       	ldd	r12, Y+8	; 0x08
    263e:	df 80       	ldd	r13, Y+7	; 0x07
    2640:	ee 80       	ldd	r14, Y+6	; 0x06
    2642:	fd 80       	ldd	r15, Y+5	; 0x05
    2644:	0c 81       	ldd	r16, Y+4	; 0x04
    2646:	1b 81       	ldd	r17, Y+3	; 0x03
    2648:	aa 81       	ldd	r26, Y+2	; 0x02
    264a:	b9 81       	ldd	r27, Y+1	; 0x01
    264c:	ce 0f       	add	r28, r30
    264e:	d1 1d       	adc	r29, r1
    2650:	0f b6       	in	r0, 0x3f	; 63
    2652:	f8 94       	cli
    2654:	de bf       	out	0x3e, r29	; 62
    2656:	0f be       	out	0x3f, r0	; 63
    2658:	cd bf       	out	0x3d, r28	; 61
    265a:	ed 01       	movw	r28, r26
    265c:	08 95       	ret

0000265e <_exit>:
    265e:	f8 94       	cli

00002660 <__stop_program>:
    2660:	ff cf       	rjmp	.-2      	; 0x2660 <__stop_program>
